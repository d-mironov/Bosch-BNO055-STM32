ARM GAS  /tmp/cc9CDFEk.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"bno055.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.bno055_quaternion_w,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.global	bno055_quaternion_w
  21              		.arch armv7e-m
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  25              		.fpu fpv4-sp-d16
  27              	bno055_quaternion_w:
  28              	.LVL0:
  29              	.LFB159:
  30              		.file 1 "Src/bno055/bno055.c"
   1:Src/bno055/bno055.c **** #include <stdint.h>
   2:Src/bno055/bno055.c **** #include <stdio.h>
   3:Src/bno055/bno055.c **** #include <stm32f4xx.h>
   4:Src/bno055/bno055.c **** 
   5:Src/bno055/bno055.c **** #include "bno055.h"
   6:Src/bno055/bno055.c **** #include "stm32f4xx_hal.h"
   7:Src/bno055/bno055.c **** #include "stm32f4xx_hal_def.h"
   8:Src/bno055/bno055.c **** #include "stm32f4xx_hal_i2c.h"
   9:Src/bno055/bno055.c **** 
  10:Src/bno055/bno055.c **** /**
  11:Src/bno055/bno055.c ****  * Initialize the Bosch BNO055 Sensor
  12:Src/bno055/bno055.c ****  * ---------------------------------------------------------------
  13:Src/bno055/bno055.c ****  *
  14:Src/bno055/bno055.c ****  *  Initializes the Bosch BNO055 Sensor with
  15:Src/bno055/bno055.c ****  *  the specified operation mode.
  16:Src/bno055/bno055.c ****  * ---------------------------------------------------------------
  17:Src/bno055/bno055.c ****  *
  18:Src/bno055/bno055.c ****  *  Args:
  19:Src/bno055/bno055.c ****  *  > `imu[bno055_t*]`: pointer to the structure to initialize
  20:Src/bno055/bno055.c ****  * ---------------------------------------------------------------
  21:Src/bno055/bno055.c ****  *
  22:Src/bno055/bno055.c ****  *  Return:
  23:Src/bno055/bno055.c ****  *  > `bool`: `true` if none of the init steps fail, `false` else
  24:Src/bno055/bno055.c ****  * ---------------------------------------------------------------
  25:Src/bno055/bno055.c ****  */
  26:Src/bno055/bno055.c **** error_bno bno055_init(bno055_t* imu) {
  27:Src/bno055/bno055.c ****     u8 id = 0;
  28:Src/bno055/bno055.c ****     error_bno err;
ARM GAS  /tmp/cc9CDFEk.s 			page 2


  29:Src/bno055/bno055.c **** 
  30:Src/bno055/bno055.c ****     imu->addr = (imu->addr << 1);
  31:Src/bno055/bno055.c ****     err = bno055_read_regs(*imu, BNO_CHIP_ID, &id, 1);
  32:Src/bno055/bno055.c ****     if (err != BNO_OK) {
  33:Src/bno055/bno055.c ****         return err;
  34:Src/bno055/bno055.c ****     }
  35:Src/bno055/bno055.c ****     if (id != BNO_DEF_CHIP_ID) {
  36:Src/bno055/bno055.c ****         return BNO_ERR_WRONG_CHIP_ID;
  37:Src/bno055/bno055.c ****     }
  38:Src/bno055/bno055.c ****     if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
  39:Src/bno055/bno055.c ****         return err;
  40:Src/bno055/bno055.c ****     }
  41:Src/bno055/bno055.c ****     HAL_Delay(2);
  42:Src/bno055/bno055.c ****     bno055_reset(imu);
  43:Src/bno055/bno055.c ****     HAL_Delay(5000);
  44:Src/bno055/bno055.c ****     if ((err = bno055_set_pwr_mode(imu, BNO_PWR_NORMAL)) != BNO_OK) {
  45:Src/bno055/bno055.c ****         return err;
  46:Src/bno055/bno055.c ****     }
  47:Src/bno055/bno055.c ****     HAL_Delay(10);
  48:Src/bno055/bno055.c ****     if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
  49:Src/bno055/bno055.c ****         return err;
  50:Src/bno055/bno055.c ****     }
  51:Src/bno055/bno055.c ****     HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
  52:Src/bno055/bno055.c ****     bno055_on(imu);
  53:Src/bno055/bno055.c ****     if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
  54:Src/bno055/bno055.c ****         return err;
  55:Src/bno055/bno055.c ****     }
  56:Src/bno055/bno055.c ****     HAL_Delay(BNO_ANY_TIME_DELAY + 5);
  57:Src/bno055/bno055.c **** 
  58:Src/bno055/bno055.c ****     imu->temperature = &bno055_temperature;
  59:Src/bno055/bno055.c ****     imu->acc_x = &bno055_acc_x;
  60:Src/bno055/bno055.c ****     imu->acc_y = &bno055_acc_y;
  61:Src/bno055/bno055.c ****     imu->acc_z = &bno055_acc_z;
  62:Src/bno055/bno055.c ****     imu->acc = &bno055_acc;
  63:Src/bno055/bno055.c ****     imu->linear_acc_x = &bno055_linear_acc_x;
  64:Src/bno055/bno055.c ****     imu->linear_acc_y = &bno055_linear_acc_y;
  65:Src/bno055/bno055.c ****     imu->linear_acc_z = &bno055_linear_acc_z;
  66:Src/bno055/bno055.c ****     imu->linear_acc = &bno055_linear_acc;
  67:Src/bno055/bno055.c ****     imu->gyro_x = &bno055_gyro_x;
  68:Src/bno055/bno055.c ****     imu->gyro_y = &bno055_gyro_y;
  69:Src/bno055/bno055.c ****     imu->gyro_z = &bno055_gyro_z;
  70:Src/bno055/bno055.c ****     imu->gyro = &bno055_gyro;
  71:Src/bno055/bno055.c ****     imu->mag_x = &bno055_mag_x;
  72:Src/bno055/bno055.c ****     imu->mag_y = &bno055_mag_y;
  73:Src/bno055/bno055.c ****     imu->mag_z = &bno055_mag_z;
  74:Src/bno055/bno055.c ****     imu->mag = &bno055_mag;
  75:Src/bno055/bno055.c ****     imu->gravity_x = &bno055_gravity_x;
  76:Src/bno055/bno055.c ****     imu->gravity_y = &bno055_gravity_y;
  77:Src/bno055/bno055.c ****     imu->gravity_z = &bno055_gravity_z;
  78:Src/bno055/bno055.c ****     imu->gravity = &bno055_gravity;
  79:Src/bno055/bno055.c ****     imu->euler_yaw = &bno055_euler_yaw;
  80:Src/bno055/bno055.c ****     imu->euler_roll = &bno055_euler_roll;
  81:Src/bno055/bno055.c ****     imu->euler_pitch = &bno055_euler_pitch;
  82:Src/bno055/bno055.c ****     imu->euler = &bno055_euler;
  83:Src/bno055/bno055.c ****     imu->quaternion_w = &bno055_quaternion_w;
  84:Src/bno055/bno055.c ****     imu->quaternion_x = &bno055_quaternion_x;
  85:Src/bno055/bno055.c ****     imu->quaternion_y = &bno055_quaternion_y;
ARM GAS  /tmp/cc9CDFEk.s 			page 3


  86:Src/bno055/bno055.c ****     imu->quaternion_z = &bno055_quaternion_z;
  87:Src/bno055/bno055.c ****     imu->quaternion = &bno055_quaternion;
  88:Src/bno055/bno055.c ****     return BNO_OK;
  89:Src/bno055/bno055.c **** }
  90:Src/bno055/bno055.c **** 
  91:Src/bno055/bno055.c **** /**
  92:Src/bno055/bno055.c ****  * Bosch BNO055 read temperature function
  93:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
  94:Src/bno055/bno055.c ****  *
  95:Src/bno055/bno055.c ****  * Read the temperature of the Bosch BNO055 Sensor and store it in a
  96:Src/bno055/bno055.c ****  * specified buffer.
  97:Src/bno055/bno055.c ****  * Unit can be specified with `bno055_set_unit(...)`. (Default: Celsius)
  98:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
  99:Src/bno055/bno055.c ****  *
 100:Src/bno055/bno055.c ****  * Args:
 101:Src/bno055/bno055.c ****  *     > `imu[bno055_t*]`: BNO055 to read the temperature from
 102:Src/bno055/bno055.c ****  *     > `buf[s8*|int8_t*]`: Buffer to store the read value in
 103:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 104:Src/bno055/bno055.c ****  *
 105:Src/bno055/bno055.c ****  * Return:
 106:Src/bno055/bno055.c ****  *     > `error_bno`: `BNO_OK` on success, `BNO_ERR_X` else.
 107:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 108:Src/bno055/bno055.c ****  */
 109:Src/bno055/bno055.c **** error_bno bno055_temperature(bno055_t* imu, s8* buf) {
 110:Src/bno055/bno055.c ****     error_bno err;
 111:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 112:Src/bno055/bno055.c ****     if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 113:Src/bno055/bno055.c ****         return err;
 114:Src/bno055/bno055.c ****     }
 115:Src/bno055/bno055.c **** #endif  // BNO_AUTO_PAGE_SET
 116:Src/bno055/bno055.c ****     u8 data = 0;
 117:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_TEMP, &data, 1)) != BNO_OK) {
 118:Src/bno055/bno055.c ****         return err;
 119:Src/bno055/bno055.c ****     }
 120:Src/bno055/bno055.c ****     *buf = (imu->_temp_unit) ? data * 2 : data;
 121:Src/bno055/bno055.c ****     return BNO_OK;
 122:Src/bno055/bno055.c **** }
 123:Src/bno055/bno055.c **** 
 124:Src/bno055/bno055.c **** /**
 125:Src/bno055/bno055.c ****  * Bosch BNO055 read accelerometer data on X-axis
 126:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 127:Src/bno055/bno055.c ****  *
 128:Src/bno055/bno055.c ****  * Reads the accelerometer data and stores the value in the specified buffer.
 129:Src/bno055/bno055.c ****  * Unit can be specified with `bno055_set_unit(...)`. (Default: m/s^2)
 130:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 131:Src/bno055/bno055.c ****  *
 132:Src/bno055/bno055.c ****  * Args:
 133:Src/bno055/bno055.c ****  *     > `imu[bno055_t*]`: BNO055 to read the data from
 134:Src/bno055/bno055.c ****  *     > `buf[f32*]`: Buffer to store the read value in
 135:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 136:Src/bno055/bno055.c ****  *
 137:Src/bno055/bno055.c ****  * Return:
 138:Src/bno055/bno055.c ****  *     > `error_bno`: `BNO_OK` on success, errorcode else.
 139:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 140:Src/bno055/bno055.c ****  */
 141:Src/bno055/bno055.c **** error_bno bno055_acc_x(bno055_t* imu, f32* buf) {
 142:Src/bno055/bno055.c ****     error_bno err;
ARM GAS  /tmp/cc9CDFEk.s 			page 4


 143:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 144:Src/bno055/bno055.c ****     if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 145:Src/bno055/bno055.c ****         return err;
 146:Src/bno055/bno055.c ****     }
 147:Src/bno055/bno055.c **** #endif  // BNO_AUTO_PAGE_SET
 148:Src/bno055/bno055.c ****     u8 data[2];
 149:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 2)) != BNO_OK) {
 150:Src/bno055/bno055.c ****         return err;
 151:Src/bno055/bno055.c ****     }
 152:Src/bno055/bno055.c **** 
 153:Src/bno055/bno055.c ****     *buf = (s16)((data[1] << 8) | data[0]) /
 154:Src/bno055/bno055.c ****            ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 155:Src/bno055/bno055.c ****                                                      : BNO_ACC_SCALE_MG);
 156:Src/bno055/bno055.c ****     return BNO_OK;
 157:Src/bno055/bno055.c **** };
 158:Src/bno055/bno055.c **** 
 159:Src/bno055/bno055.c **** /**
 160:Src/bno055/bno055.c ****  * Bosch BNO055 read accelerometer data on Y-axis
 161:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 162:Src/bno055/bno055.c ****  *
 163:Src/bno055/bno055.c ****  * Reads the accelerometer data and stores the value in the specified buffer.
 164:Src/bno055/bno055.c ****  * Unit can be specified with `bno055_set_unit(...)`. (Default: m/s^2)
 165:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 166:Src/bno055/bno055.c ****  *
 167:Src/bno055/bno055.c ****  * Args:
 168:Src/bno055/bno055.c ****  *     > `imu[bno055_t*]`: BNO055 to read the data from
 169:Src/bno055/bno055.c ****  *     > `buf[f32*]`: Buffer to store the read value in
 170:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 171:Src/bno055/bno055.c ****  *
 172:Src/bno055/bno055.c ****  * Return:
 173:Src/bno055/bno055.c ****  *     > `error_bno`: `BNO_OK` on success, errorcode else.
 174:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 175:Src/bno055/bno055.c ****  */
 176:Src/bno055/bno055.c **** error_bno bno055_acc_y(bno055_t* imu, f32* buf) {
 177:Src/bno055/bno055.c ****     error_bno err;
 178:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 179:Src/bno055/bno055.c ****     if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 180:Src/bno055/bno055.c ****         return err;
 181:Src/bno055/bno055.c ****     }
 182:Src/bno055/bno055.c **** #endif  // BNO_AUTO_PAGE_SET
 183:Src/bno055/bno055.c ****     u8 data[2];
 184:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Y_LSB, data, 2)) != BNO_OK) {
 185:Src/bno055/bno055.c ****         return err;
 186:Src/bno055/bno055.c ****     }
 187:Src/bno055/bno055.c **** 
 188:Src/bno055/bno055.c ****     *buf = (s16)((data[1] << 8) | data[0]) /
 189:Src/bno055/bno055.c ****            ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 190:Src/bno055/bno055.c ****                                                      : BNO_ACC_SCALE_MG);
 191:Src/bno055/bno055.c ****     return BNO_OK;
 192:Src/bno055/bno055.c **** };
 193:Src/bno055/bno055.c **** 
 194:Src/bno055/bno055.c **** /**
 195:Src/bno055/bno055.c ****  * Bosch BNO055 read accelerometer data on Z-axis
 196:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 197:Src/bno055/bno055.c ****  *
 198:Src/bno055/bno055.c ****  * Reads the accelerometer data and stores the value in the specified buffer.
 199:Src/bno055/bno055.c ****  * Unit can be specified with `bno055_set_unit(...)`. (Default: m/s^2)
ARM GAS  /tmp/cc9CDFEk.s 			page 5


 200:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 201:Src/bno055/bno055.c ****  *
 202:Src/bno055/bno055.c ****  * Args:
 203:Src/bno055/bno055.c ****  *     > `imu[bno055_t*]`: BNO055 to read the data from
 204:Src/bno055/bno055.c ****  *     > `buf[f32*]`: Buffer to store the read value in
 205:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 206:Src/bno055/bno055.c ****  *
 207:Src/bno055/bno055.c ****  * Return:
 208:Src/bno055/bno055.c ****  *     > `error_bno`: `BNO_OK` on success, errorcode else.
 209:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 210:Src/bno055/bno055.c ****  */
 211:Src/bno055/bno055.c **** error_bno bno055_acc_z(bno055_t* imu, f32* buf) {
 212:Src/bno055/bno055.c ****     error_bno err;
 213:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 214:Src/bno055/bno055.c ****     if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 215:Src/bno055/bno055.c ****         return err;
 216:Src/bno055/bno055.c ****     }
 217:Src/bno055/bno055.c **** #endif  // BNO_AUTO_PAGE_SET
 218:Src/bno055/bno055.c ****     u8 data[2];
 219:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Z_LSB, data, 2)) != BNO_OK) {
 220:Src/bno055/bno055.c ****         return err;
 221:Src/bno055/bno055.c ****     }
 222:Src/bno055/bno055.c **** 
 223:Src/bno055/bno055.c ****     *buf = (s16)((data[1] << 8) | data[0]) /
 224:Src/bno055/bno055.c ****            ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 225:Src/bno055/bno055.c ****                                                      : BNO_ACC_SCALE_MG);
 226:Src/bno055/bno055.c ****     return BNO_OK;
 227:Src/bno055/bno055.c **** };
 228:Src/bno055/bno055.c **** 
 229:Src/bno055/bno055.c **** /**
 230:Src/bno055/bno055.c ****  * Bosch BNO055 read acceleration data on all axis
 231:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 232:Src/bno055/bno055.c ****  *
 233:Src/bno055/bno055.c ****  * Reads the acceleration data and stores the value in the specified
 234:Src/bno055/bno055.c ****  * vector buffer. Unit can be specified with `bno055_set_unit(...)`. (Default:
 235:Src/bno055/bno055.c ****  * m/s^2)
 236:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 237:Src/bno055/bno055.c ****  *
 238:Src/bno055/bno055.c ****  * Args:
 239:Src/bno055/bno055.c ****  *     > `imu[bno055_t*]`: BNO055 to read the data from
 240:Src/bno055/bno055.c ****  *     > `buf[bno055_vec3_t*]`: Buffer to store the read value in
 241:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 242:Src/bno055/bno055.c ****  *
 243:Src/bno055/bno055.c ****  * Return:
 244:Src/bno055/bno055.c ****  *     > `error_bno`: `BNO_OK` on success, errorcode else.
 245:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 246:Src/bno055/bno055.c ****  */
 247:Src/bno055/bno055.c **** error_bno bno055_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 248:Src/bno055/bno055.c ****     error_bno err;
 249:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 250:Src/bno055/bno055.c ****     if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 251:Src/bno055/bno055.c ****         return err;
 252:Src/bno055/bno055.c ****     }
 253:Src/bno055/bno055.c **** #endif  // BNO_AUTO_PAGE_SET
 254:Src/bno055/bno055.c ****     u8 data[6];
 255:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 6)) != BNO_OK) {
 256:Src/bno055/bno055.c ****         return err;
ARM GAS  /tmp/cc9CDFEk.s 			page 6


 257:Src/bno055/bno055.c ****     }
 258:Src/bno055/bno055.c ****     float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 259:Src/bno055/bno055.c ****                                                            : BNO_ACC_SCALE_MG;
 260:Src/bno055/bno055.c ****     xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 261:Src/bno055/bno055.c ****     xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 262:Src/bno055/bno055.c ****     xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 263:Src/bno055/bno055.c **** 
 264:Src/bno055/bno055.c ****     return BNO_OK;
 265:Src/bno055/bno055.c **** };
 266:Src/bno055/bno055.c **** 
 267:Src/bno055/bno055.c **** /**
 268:Src/bno055/bno055.c ****  * Bosch BNO055 read linear acceleration data on X-axis
 269:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 270:Src/bno055/bno055.c ****  *
 271:Src/bno055/bno055.c ****  * Reads the linear acceleration data and stores the value in the specified
 272:Src/bno055/bno055.c ****  * buffer. Unit can be specified with `bno055_set_unit(...)`. (Default: m/s^2)
 273:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 274:Src/bno055/bno055.c ****  *
 275:Src/bno055/bno055.c ****  * Args:
 276:Src/bno055/bno055.c ****  *     > `imu[bno055_t*]`: BNO055 to read the data from
 277:Src/bno055/bno055.c ****  *     > `buf[f32*]`: Buffer to store the read value in
 278:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 279:Src/bno055/bno055.c ****  *
 280:Src/bno055/bno055.c ****  * Return:
 281:Src/bno055/bno055.c ****  *     > `error_bno`: `BNO_OK` on success, errorcode else.
 282:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 283:Src/bno055/bno055.c ****  */
 284:Src/bno055/bno055.c **** error_bno bno055_linear_acc_x(bno055_t* imu, f32* buf) {
 285:Src/bno055/bno055.c ****     error_bno err;
 286:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 287:Src/bno055/bno055.c ****     if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 288:Src/bno055/bno055.c ****         return err;
 289:Src/bno055/bno055.c ****     }
 290:Src/bno055/bno055.c **** #endif  // BNO_AUTO_PAGE_SET
 291:Src/bno055/bno055.c ****     u8 data[2];
 292:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 2)) != BNO_OK) {
 293:Src/bno055/bno055.c ****         return err;
 294:Src/bno055/bno055.c ****     }
 295:Src/bno055/bno055.c **** 
 296:Src/bno055/bno055.c ****     *buf = (s16)((data[1] << 8) | data[0]) /
 297:Src/bno055/bno055.c ****            ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 298:Src/bno055/bno055.c ****                                                      : BNO_ACC_SCALE_MG);
 299:Src/bno055/bno055.c ****     return BNO_OK;
 300:Src/bno055/bno055.c **** };
 301:Src/bno055/bno055.c **** 
 302:Src/bno055/bno055.c **** /**
 303:Src/bno055/bno055.c ****  * Bosch BNO055 read linear acceleration data on Y-axis
 304:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 305:Src/bno055/bno055.c ****  *
 306:Src/bno055/bno055.c ****  * Reads the linear acceleration data and stores the value in the specified
 307:Src/bno055/bno055.c ****  * buffer. Unit can be specified with `bno055_set_unit(...)`. (Default: m/s^2)
 308:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 309:Src/bno055/bno055.c ****  *
 310:Src/bno055/bno055.c ****  * Args:
 311:Src/bno055/bno055.c ****  *     > `imu[bno055_t*]`: BNO055 to read the data from
 312:Src/bno055/bno055.c ****  *     > `buf[f32*]`: Buffer to store the read value in
 313:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
ARM GAS  /tmp/cc9CDFEk.s 			page 7


 314:Src/bno055/bno055.c ****  *
 315:Src/bno055/bno055.c ****  * Return:
 316:Src/bno055/bno055.c ****  *     > `error_bno`: `BNO_OK` on success, errorcode else.
 317:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 318:Src/bno055/bno055.c ****  */
 319:Src/bno055/bno055.c **** error_bno bno055_linear_acc_y(bno055_t* imu, f32* buf) {
 320:Src/bno055/bno055.c ****     error_bno err;
 321:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 322:Src/bno055/bno055.c ****     if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 323:Src/bno055/bno055.c ****         return err;
 324:Src/bno055/bno055.c ****     }
 325:Src/bno055/bno055.c **** #endif  // BNO_AUTO_PAGE_SET
 326:Src/bno055/bno055.c ****     u8 data[2];
 327:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 328:Src/bno055/bno055.c ****         return err;
 329:Src/bno055/bno055.c ****     }
 330:Src/bno055/bno055.c **** 
 331:Src/bno055/bno055.c ****     *buf = (s16)((data[1] << 8) | data[0]) /
 332:Src/bno055/bno055.c ****            ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 333:Src/bno055/bno055.c ****                                                      : BNO_ACC_SCALE_MG);
 334:Src/bno055/bno055.c ****     return BNO_OK;
 335:Src/bno055/bno055.c **** };
 336:Src/bno055/bno055.c **** 
 337:Src/bno055/bno055.c **** /**
 338:Src/bno055/bno055.c ****  * Bosch BNO055 read linear acceleration data on Z-axis
 339:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 340:Src/bno055/bno055.c ****  *
 341:Src/bno055/bno055.c ****  * Reads the linear acceleration data and stores the value in the specified
 342:Src/bno055/bno055.c ****  * buffer. Unit can be specified with `bno055_set_unit(...)`. (Default: m/s^2)
 343:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 344:Src/bno055/bno055.c ****  *
 345:Src/bno055/bno055.c ****  * Args:
 346:Src/bno055/bno055.c ****  *     > `imu[bno055_t*]`: BNO055 to read the data from
 347:Src/bno055/bno055.c ****  *     > `buf[f32*]`: Buffer to store the read value in
 348:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 349:Src/bno055/bno055.c ****  *
 350:Src/bno055/bno055.c ****  * Return:
 351:Src/bno055/bno055.c ****  *     > `error_bno`: `BNO_OK` on success, errorcode else.
 352:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 353:Src/bno055/bno055.c ****  */
 354:Src/bno055/bno055.c **** error_bno bno055_linear_acc_z(bno055_t* imu, f32* buf) {
 355:Src/bno055/bno055.c ****     error_bno err;
 356:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 357:Src/bno055/bno055.c ****     if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 358:Src/bno055/bno055.c ****         return err;
 359:Src/bno055/bno055.c ****     }
 360:Src/bno055/bno055.c **** #endif  // BNO_AUTO_PAGE_SET
 361:Src/bno055/bno055.c ****     u8 data[2];
 362:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 363:Src/bno055/bno055.c ****         return err;
 364:Src/bno055/bno055.c ****     }
 365:Src/bno055/bno055.c **** 
 366:Src/bno055/bno055.c ****     *buf = (s16)((data[1] << 8) | data[0]) /
 367:Src/bno055/bno055.c ****            ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 368:Src/bno055/bno055.c ****                                                      : BNO_ACC_SCALE_MG);
 369:Src/bno055/bno055.c ****     return BNO_OK;
 370:Src/bno055/bno055.c **** };
ARM GAS  /tmp/cc9CDFEk.s 			page 8


 371:Src/bno055/bno055.c **** 
 372:Src/bno055/bno055.c **** /**
 373:Src/bno055/bno055.c ****  * Bosch BNO055 read linear acceleration data on all axis
 374:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 375:Src/bno055/bno055.c ****  *
 376:Src/bno055/bno055.c ****  * Reads the linear acceleration data and stores the value in the specified
 377:Src/bno055/bno055.c ****  * vector buffer. Unit can be specified with `bno055_set_unit(...)`. (Default:
 378:Src/bno055/bno055.c ****  * m/s^2)
 379:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 380:Src/bno055/bno055.c ****  *
 381:Src/bno055/bno055.c ****  * Args:
 382:Src/bno055/bno055.c ****  *     > `imu[bno055_t*]`: BNO055 to read the data from
 383:Src/bno055/bno055.c ****  *     > `buf[bno055_vec3_t*]`: Buffer to store the read value in
 384:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 385:Src/bno055/bno055.c ****  *
 386:Src/bno055/bno055.c ****  * Return:
 387:Src/bno055/bno055.c ****  *     > `error_bno`: `BNO_OK` on success, errorcode else.
 388:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 389:Src/bno055/bno055.c ****  */
 390:Src/bno055/bno055.c **** error_bno bno055_linear_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 391:Src/bno055/bno055.c ****     error_bno err;
 392:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 393:Src/bno055/bno055.c ****     if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 394:Src/bno055/bno055.c ****         return err;
 395:Src/bno055/bno055.c ****     }
 396:Src/bno055/bno055.c **** #endif  // BNO_AUTO_PAGE_SET
 397:Src/bno055/bno055.c ****     u8 data[6];
 398:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 6)) != BNO_OK) {
 399:Src/bno055/bno055.c ****         return err;
 400:Src/bno055/bno055.c ****     }
 401:Src/bno055/bno055.c ****     float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 402:Src/bno055/bno055.c ****                                                            : BNO_ACC_SCALE_MG;
 403:Src/bno055/bno055.c ****     xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 404:Src/bno055/bno055.c ****     xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 405:Src/bno055/bno055.c ****     xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 406:Src/bno055/bno055.c **** 
 407:Src/bno055/bno055.c ****     return BNO_OK;
 408:Src/bno055/bno055.c **** };
 409:Src/bno055/bno055.c **** 
 410:Src/bno055/bno055.c **** /**
 411:Src/bno055/bno055.c ****  * Bosch BNO055 read gyroscope data on X-axis
 412:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 413:Src/bno055/bno055.c ****  *
 414:Src/bno055/bno055.c ****  * Reads the gyroscope data and stores the value in the specified
 415:Src/bno055/bno055.c ****  * buffer. Unit can be specified with `bno055_set_unit(...)`. (Default: m/s^2)
 416:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 417:Src/bno055/bno055.c ****  *
 418:Src/bno055/bno055.c ****  * Args:
 419:Src/bno055/bno055.c ****  *     > `imu[bno055_t*]`: BNO055 to read the data from
 420:Src/bno055/bno055.c ****  *     > `buf[f32*]`: Buffer to store the read value in
 421:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 422:Src/bno055/bno055.c ****  *
 423:Src/bno055/bno055.c ****  * Return:
 424:Src/bno055/bno055.c ****  *     > `error_bno`: `BNO_OK` on success, errorcode else.
 425:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 426:Src/bno055/bno055.c ****  */
 427:Src/bno055/bno055.c **** error_bno bno055_gyro_x(bno055_t* imu, f32* buf) {
ARM GAS  /tmp/cc9CDFEk.s 			page 9


 428:Src/bno055/bno055.c ****     error_bno err;
 429:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 430:Src/bno055/bno055.c ****     if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 431:Src/bno055/bno055.c ****         return err;
 432:Src/bno055/bno055.c ****     }
 433:Src/bno055/bno055.c **** #endif  // BNO_AUTO_PAGE_SET
 434:Src/bno055/bno055.c ****     u8 data[2];
 435:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 2)) != BNO_OK) {
 436:Src/bno055/bno055.c ****         return err;
 437:Src/bno055/bno055.c ****     }
 438:Src/bno055/bno055.c **** 
 439:Src/bno055/bno055.c ****     *buf = (s16)((data[1] << 8) | data[0]) /
 440:Src/bno055/bno055.c ****            ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 441:Src/bno055/bno055.c ****                                                  : BNO_GYR_SCALE_RPS);
 442:Src/bno055/bno055.c ****     return BNO_OK;
 443:Src/bno055/bno055.c **** };
 444:Src/bno055/bno055.c **** 
 445:Src/bno055/bno055.c **** /**
 446:Src/bno055/bno055.c ****  * Bosch BNO055 read gyroscope data on Y-axis
 447:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 448:Src/bno055/bno055.c ****  *
 449:Src/bno055/bno055.c ****  * Reads the gyroscope data and stores the value in the specified
 450:Src/bno055/bno055.c ****  * buffer. Unit can be specified with `bno055_set_unit(...)`. (Default: m/s^2)
 451:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 452:Src/bno055/bno055.c ****  *
 453:Src/bno055/bno055.c ****  * Args:
 454:Src/bno055/bno055.c ****  *     > `imu[bno055_t*]`: BNO055 to read the data from
 455:Src/bno055/bno055.c ****  *     > `buf[f32*]`: Buffer to store the read value in
 456:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 457:Src/bno055/bno055.c ****  *
 458:Src/bno055/bno055.c ****  * Return:
 459:Src/bno055/bno055.c ****  *     > `error_bno`: `BNO_OK` on success, errorcode else.
 460:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 461:Src/bno055/bno055.c ****  */
 462:Src/bno055/bno055.c **** error_bno bno055_gyro_y(bno055_t* imu, f32* buf) {
 463:Src/bno055/bno055.c ****     error_bno err;
 464:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 465:Src/bno055/bno055.c ****     if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 466:Src/bno055/bno055.c ****         return err;
 467:Src/bno055/bno055.c ****     }
 468:Src/bno055/bno055.c **** #endif  // BNO_AUTO_PAGE_SET
 469:Src/bno055/bno055.c ****     u8 data[2];
 470:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Y_LSB, data, 2)) != BNO_OK) {
 471:Src/bno055/bno055.c ****         return err;
 472:Src/bno055/bno055.c ****     }
 473:Src/bno055/bno055.c **** 
 474:Src/bno055/bno055.c ****     *buf = (s16)((data[1] << 8) | data[0]) /
 475:Src/bno055/bno055.c ****            ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 476:Src/bno055/bno055.c ****                                                  : BNO_GYR_SCALE_RPS);
 477:Src/bno055/bno055.c ****     return BNO_OK;
 478:Src/bno055/bno055.c **** };
 479:Src/bno055/bno055.c **** 
 480:Src/bno055/bno055.c **** /**
 481:Src/bno055/bno055.c ****  * Bosch BNO055 read gyroscope data on Z-axis
 482:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 483:Src/bno055/bno055.c ****  *
 484:Src/bno055/bno055.c ****  * Reads the gyroscope data and stores the value in the specified
ARM GAS  /tmp/cc9CDFEk.s 			page 10


 485:Src/bno055/bno055.c ****  * buffer. Unit can be specified with `bno055_set_unit(...)`. (Default: m/s^2)
 486:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 487:Src/bno055/bno055.c ****  *
 488:Src/bno055/bno055.c ****  * Args:
 489:Src/bno055/bno055.c ****  *     > `imu[bno055_t*]`: BNO055 to read the data from
 490:Src/bno055/bno055.c ****  *     > `buf[f32*]`: Buffer to store the read value in
 491:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 492:Src/bno055/bno055.c ****  *
 493:Src/bno055/bno055.c ****  * Return:
 494:Src/bno055/bno055.c ****  *     > `error_bno`: `BNO_OK` on success, errorcode else.
 495:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 496:Src/bno055/bno055.c ****  */
 497:Src/bno055/bno055.c **** error_bno bno055_gyro_z(bno055_t* imu, f32* buf) {
 498:Src/bno055/bno055.c ****     error_bno err;
 499:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 500:Src/bno055/bno055.c ****     if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 501:Src/bno055/bno055.c ****         return err;
 502:Src/bno055/bno055.c ****     }
 503:Src/bno055/bno055.c **** #endif  // BNO_AUTO_PAGE_SET
 504:Src/bno055/bno055.c ****     u8 data[2];
 505:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Z_LSB, data, 2)) != BNO_OK) {
 506:Src/bno055/bno055.c ****         return err;
 507:Src/bno055/bno055.c ****     }
 508:Src/bno055/bno055.c **** 
 509:Src/bno055/bno055.c ****     *buf = (s16)((data[1] << 8) | data[0]) /
 510:Src/bno055/bno055.c ****            ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 511:Src/bno055/bno055.c ****                                                  : BNO_GYR_SCALE_RPS);
 512:Src/bno055/bno055.c ****     return BNO_OK;
 513:Src/bno055/bno055.c **** };
 514:Src/bno055/bno055.c **** 
 515:Src/bno055/bno055.c **** /**
 516:Src/bno055/bno055.c ****  * Bosch BNO055 read gyroscope data on all axis
 517:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 518:Src/bno055/bno055.c ****  *
 519:Src/bno055/bno055.c ****  * Reads the gyroscope data and stores the value in the specified
 520:Src/bno055/bno055.c ****  * vector buffer. Unit can be specified with `bno055_set_unit(...)`. (Default:
 521:Src/bno055/bno055.c ****  * m/s^2)
 522:Src/bno055/bno055.c ****  *
 523:Src/bno055/bno055.c ****  * FIX: MCU restart when moving
 524:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 525:Src/bno055/bno055.c ****  *
 526:Src/bno055/bno055.c ****  * Args:
 527:Src/bno055/bno055.c ****  *     > `imu[bno055_t*]`: BNO055 to read the data from
 528:Src/bno055/bno055.c ****  *     > `buf[bno055_vec3_t*]`: Buffer to store the read value in
 529:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 530:Src/bno055/bno055.c ****  *
 531:Src/bno055/bno055.c ****  * Return:
 532:Src/bno055/bno055.c ****  *     > `error_bno`: `BNO_OK` on success, errorcode else.
 533:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 534:Src/bno055/bno055.c ****  */
 535:Src/bno055/bno055.c **** error_bno bno055_gyro(bno055_t* imu, bno055_vec3_t* xyz) {
 536:Src/bno055/bno055.c ****     error_bno err;
 537:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 538:Src/bno055/bno055.c ****     if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 539:Src/bno055/bno055.c ****         return err;
 540:Src/bno055/bno055.c ****     }
 541:Src/bno055/bno055.c **** #endif  // BNO_AUTO_PAGE_SET
ARM GAS  /tmp/cc9CDFEk.s 			page 11


 542:Src/bno055/bno055.c ****     u8 data[6];
 543:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 6)) != BNO_OK) {
 544:Src/bno055/bno055.c ****         return err;
 545:Src/bno055/bno055.c ****     }
 546:Src/bno055/bno055.c **** 
 547:Src/bno055/bno055.c ****     f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 548:Src/bno055/bno055.c ****                                                      : BNO_GYR_SCALE_RPS;
 549:Src/bno055/bno055.c ****     xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 550:Src/bno055/bno055.c ****     xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 551:Src/bno055/bno055.c ****     xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 552:Src/bno055/bno055.c **** 
 553:Src/bno055/bno055.c ****     return BNO_OK;
 554:Src/bno055/bno055.c **** }
 555:Src/bno055/bno055.c **** 
 556:Src/bno055/bno055.c **** /**
 557:Src/bno055/bno055.c ****  * Bosch BNO055 read magnetometer data on X-axis
 558:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 559:Src/bno055/bno055.c ****  *
 560:Src/bno055/bno055.c ****  * Reads the magnetometer data and stores the value in the specified
 561:Src/bno055/bno055.c ****  * buffer. Unit is `[uT]`.
 562:Src/bno055/bno055.c **** 
 563:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 564:Src/bno055/bno055.c ****  *
 565:Src/bno055/bno055.c ****  * Args:
 566:Src/bno055/bno055.c ****  *     > `imu[bno055_t*]`: BNO055 to read the data from
 567:Src/bno055/bno055.c ****  *     > `buf[f32*]`: Buffer to store the read value in
 568:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 569:Src/bno055/bno055.c ****  *
 570:Src/bno055/bno055.c ****  * Return:
 571:Src/bno055/bno055.c ****  *     > `error_bno`: `BNO_OK` on success, errorcode else.
 572:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 573:Src/bno055/bno055.c ****  */
 574:Src/bno055/bno055.c **** error_bno bno055_mag_x(bno055_t* imu, f32* buf) {
 575:Src/bno055/bno055.c ****     error_bno err;
 576:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 577:Src/bno055/bno055.c ****     if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 578:Src/bno055/bno055.c ****         return err;
 579:Src/bno055/bno055.c ****     }
 580:Src/bno055/bno055.c **** #endif  // BNO_AUTO_PAGE_SET
 581:Src/bno055/bno055.c ****     u8 data[2];
 582:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 2)) != BNO_OK) {
 583:Src/bno055/bno055.c ****         return err;
 584:Src/bno055/bno055.c ****     }
 585:Src/bno055/bno055.c **** 
 586:Src/bno055/bno055.c ****     *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 587:Src/bno055/bno055.c ****     return BNO_OK;
 588:Src/bno055/bno055.c **** }
 589:Src/bno055/bno055.c **** 
 590:Src/bno055/bno055.c **** /**
 591:Src/bno055/bno055.c ****  * Bosch BNO055 read magnetometer data on Y-axis
 592:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 593:Src/bno055/bno055.c ****  *
 594:Src/bno055/bno055.c ****  * Reads the magnetometer data and stores the value in the specified
 595:Src/bno055/bno055.c ****  * buffer. Unit is `[uT]`.
 596:Src/bno055/bno055.c **** 
 597:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 598:Src/bno055/bno055.c ****  *
ARM GAS  /tmp/cc9CDFEk.s 			page 12


 599:Src/bno055/bno055.c ****  * Args:
 600:Src/bno055/bno055.c ****  *     > `imu[bno055_t*]`: BNO055 to read the data from
 601:Src/bno055/bno055.c ****  *     > `buf[f32*]`: Buffer to store the read value in
 602:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 603:Src/bno055/bno055.c ****  *
 604:Src/bno055/bno055.c ****  * Return:
 605:Src/bno055/bno055.c ****  *     > `error_bno`: `BNO_OK` on success, errorcode else.
 606:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 607:Src/bno055/bno055.c ****  */
 608:Src/bno055/bno055.c **** error_bno bno055_mag_y(bno055_t* imu, f32* buf) {
 609:Src/bno055/bno055.c ****     error_bno err;
 610:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 611:Src/bno055/bno055.c ****     if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 612:Src/bno055/bno055.c ****         return err;
 613:Src/bno055/bno055.c ****     }
 614:Src/bno055/bno055.c **** #endif  // BNO_AUTO_PAGE_SET
 615:Src/bno055/bno055.c ****     u8 data[2];
 616:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Y_LSB, data, 2)) != BNO_OK) {
 617:Src/bno055/bno055.c ****         return err;
 618:Src/bno055/bno055.c ****     }
 619:Src/bno055/bno055.c **** 
 620:Src/bno055/bno055.c ****     *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 621:Src/bno055/bno055.c ****     return BNO_OK;
 622:Src/bno055/bno055.c **** }
 623:Src/bno055/bno055.c **** 
 624:Src/bno055/bno055.c **** /**
 625:Src/bno055/bno055.c ****  * Bosch BNO055 read magnetometer data on Z-axis
 626:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 627:Src/bno055/bno055.c ****  *
 628:Src/bno055/bno055.c ****  * Reads the magnetometer data and stores the value in the specified
 629:Src/bno055/bno055.c ****  * buffer. Unit is `[uT]`.
 630:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 631:Src/bno055/bno055.c ****  *
 632:Src/bno055/bno055.c ****  * Args:
 633:Src/bno055/bno055.c ****  *     > `imu[bno055_t*]`: BNO055 to read the data from
 634:Src/bno055/bno055.c ****  *     > `buf[f32*]`: Buffer to store the read value in
 635:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 636:Src/bno055/bno055.c ****  *
 637:Src/bno055/bno055.c ****  * Return:
 638:Src/bno055/bno055.c ****  *     > `error_bno`: `BNO_OK` on success, errorcode else.
 639:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 640:Src/bno055/bno055.c ****  */
 641:Src/bno055/bno055.c **** error_bno bno055_mag_z(bno055_t* imu, f32* buf) {
 642:Src/bno055/bno055.c ****     error_bno err;
 643:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 644:Src/bno055/bno055.c ****     if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 645:Src/bno055/bno055.c ****         return err;
 646:Src/bno055/bno055.c ****     }
 647:Src/bno055/bno055.c **** #endif  // BNO_AUTO_PAGE_SET
 648:Src/bno055/bno055.c ****     u8 data[2];
 649:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Z_LSB, data, 2)) != BNO_OK) {
 650:Src/bno055/bno055.c ****         return err;
 651:Src/bno055/bno055.c ****     }
 652:Src/bno055/bno055.c **** 
 653:Src/bno055/bno055.c ****     *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 654:Src/bno055/bno055.c ****     return BNO_OK;
 655:Src/bno055/bno055.c **** }
ARM GAS  /tmp/cc9CDFEk.s 			page 13


 656:Src/bno055/bno055.c **** 
 657:Src/bno055/bno055.c **** /**
 658:Src/bno055/bno055.c ****  * Bosch BNO055 read magnetometer data on all axis
 659:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 660:Src/bno055/bno055.c ****  *
 661:Src/bno055/bno055.c ****  * Reads the magnetometer data and stores the value in the specified vector
 662:Src/bno055/bno055.c ****  * buffer. Unit is `[uT]`.
 663:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 664:Src/bno055/bno055.c ****  *
 665:Src/bno055/bno055.c ****  * Args:
 666:Src/bno055/bno055.c ****  *     > `imu[bno055_t*]`: BNO055 to read the data from
 667:Src/bno055/bno055.c ****  *     > `buf[bno055_vec3_t*]`: Buffer to store the read value in
 668:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 669:Src/bno055/bno055.c ****  *
 670:Src/bno055/bno055.c ****  * Return:
 671:Src/bno055/bno055.c ****  *     > `error_bno`: `BNO_OK` on success, errorcode else.
 672:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 673:Src/bno055/bno055.c ****  */
 674:Src/bno055/bno055.c **** error_bno bno055_mag(bno055_t* imu, bno055_vec3_t* xyz) {
 675:Src/bno055/bno055.c ****     error_bno err;
 676:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 677:Src/bno055/bno055.c ****     if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 678:Src/bno055/bno055.c ****         return err;
 679:Src/bno055/bno055.c ****     }
 680:Src/bno055/bno055.c **** #endif  // BNO_AUTO_PAGE_SET
 681:Src/bno055/bno055.c ****     u8 data[6];
 682:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 6)) != BNO_OK) {
 683:Src/bno055/bno055.c ****         return err;
 684:Src/bno055/bno055.c ****     }
 685:Src/bno055/bno055.c **** 
 686:Src/bno055/bno055.c ****     xyz->x = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 687:Src/bno055/bno055.c ****     xyz->y = (s16)((data[3] << 8) | data[2]) / BNO_MAG_SCALE;
 688:Src/bno055/bno055.c ****     xyz->z = (s16)((data[5] << 8) | data[4]) / BNO_MAG_SCALE;
 689:Src/bno055/bno055.c **** 
 690:Src/bno055/bno055.c ****     return BNO_OK;
 691:Src/bno055/bno055.c **** };
 692:Src/bno055/bno055.c **** 
 693:Src/bno055/bno055.c **** /**
 694:Src/bno055/bno055.c ****  * Bosch BNO055 read gravity data on X-axis
 695:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 696:Src/bno055/bno055.c ****  *
 697:Src/bno055/bno055.c ****  * Reads the gravity data and stores the value in the specified
 698:Src/bno055/bno055.c ****  * buffer. Unit can be specified with `bno055_set_unit(...)`. (Default: m/s^2)
 699:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 700:Src/bno055/bno055.c ****  *
 701:Src/bno055/bno055.c ****  * Args:
 702:Src/bno055/bno055.c ****  *     > `imu[bno055_t*]`: BNO055 to read the data from
 703:Src/bno055/bno055.c ****  *     > `buf[f32*]`: Buffer to store the read value in
 704:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 705:Src/bno055/bno055.c ****  *
 706:Src/bno055/bno055.c ****  * Return:
 707:Src/bno055/bno055.c ****  *     > `error_bno`: `BNO_OK` on success, errorcode else.
 708:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 709:Src/bno055/bno055.c ****  */
 710:Src/bno055/bno055.c **** error_bno bno055_gravity_x(bno055_t* imu, f32* buf) {
 711:Src/bno055/bno055.c ****     error_bno err;
 712:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
ARM GAS  /tmp/cc9CDFEk.s 			page 14


 713:Src/bno055/bno055.c ****     if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 714:Src/bno055/bno055.c ****         return err;
 715:Src/bno055/bno055.c ****     }
 716:Src/bno055/bno055.c **** #endif  // BNO_AUTO_PAGE_SET
 717:Src/bno055/bno055.c ****     u8 data[2];
 718:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 2)) != BNO_OK) {
 719:Src/bno055/bno055.c ****         return err;
 720:Src/bno055/bno055.c ****     }
 721:Src/bno055/bno055.c ****     f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 722:Src/bno055/bno055.c ****                                                          : BNO_ACC_SCALE_MG;
 723:Src/bno055/bno055.c ****     *buf = (s16)((data[1] << 8) | data[0]) / scale;
 724:Src/bno055/bno055.c ****     return BNO_OK;
 725:Src/bno055/bno055.c **** }
 726:Src/bno055/bno055.c **** 
 727:Src/bno055/bno055.c **** /**
 728:Src/bno055/bno055.c ****  * Bosch BNO055 read gravity data on Y-axis
 729:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 730:Src/bno055/bno055.c ****  *
 731:Src/bno055/bno055.c ****  * Reads the gravity data and stores the value in the specified
 732:Src/bno055/bno055.c ****  * buffer. Unit can be specified with `bno055_set_unit(...)`. (Default: m/s^2)
 733:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 734:Src/bno055/bno055.c ****  *
 735:Src/bno055/bno055.c ****  * Args:
 736:Src/bno055/bno055.c ****  *     > `imu[bno055_t*]`: BNO055 to read the data from
 737:Src/bno055/bno055.c ****  *     > `buf[f32*]`: Buffer to store the read value in
 738:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 739:Src/bno055/bno055.c ****  *
 740:Src/bno055/bno055.c ****  * Return:
 741:Src/bno055/bno055.c ****  *     > `error_bno`: `BNO_OK` on success, errorcode else.
 742:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 743:Src/bno055/bno055.c ****  */
 744:Src/bno055/bno055.c **** error_bno bno055_gravity_y(bno055_t* imu, f32* buf) {
 745:Src/bno055/bno055.c ****     error_bno err;
 746:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 747:Src/bno055/bno055.c ****     if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 748:Src/bno055/bno055.c ****         return err;
 749:Src/bno055/bno055.c ****     }
 750:Src/bno055/bno055.c **** #endif  // BNO_AUTO_PAGE_SET
 751:Src/bno055/bno055.c ****     u8 data[2];
 752:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Y_LSB, data, 2)) != BNO_OK) {
 753:Src/bno055/bno055.c ****         return err;
 754:Src/bno055/bno055.c ****     }
 755:Src/bno055/bno055.c ****     f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 756:Src/bno055/bno055.c ****                                                          : BNO_ACC_SCALE_MG;
 757:Src/bno055/bno055.c ****     *buf = (s16)((data[1] << 8) | data[0]) / scale;
 758:Src/bno055/bno055.c ****     return BNO_OK;
 759:Src/bno055/bno055.c **** }
 760:Src/bno055/bno055.c **** 
 761:Src/bno055/bno055.c **** /**
 762:Src/bno055/bno055.c ****  * Bosch BNO055 read gravity data on Z-axis
 763:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 764:Src/bno055/bno055.c ****  *
 765:Src/bno055/bno055.c ****  * Reads the gravity data and stores the value in the specified
 766:Src/bno055/bno055.c ****  * buffer. Unit can be specified with `bno055_set_unit(...)`. (Default: m/s^2)
 767:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 768:Src/bno055/bno055.c ****  *
 769:Src/bno055/bno055.c ****  * Args:
ARM GAS  /tmp/cc9CDFEk.s 			page 15


 770:Src/bno055/bno055.c ****  *     > `imu[bno055_t*]`: BNO055 to read the data from
 771:Src/bno055/bno055.c ****  *     > `buf[f32*]`: Buffer to store the read value in
 772:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 773:Src/bno055/bno055.c ****  *
 774:Src/bno055/bno055.c ****  * Return:
 775:Src/bno055/bno055.c ****  *     > `error_bno`: `BNO_OK` on success, errorcode else.
 776:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 777:Src/bno055/bno055.c ****  */
 778:Src/bno055/bno055.c **** error_bno bno055_gravity_z(bno055_t* imu, f32* buf) {
 779:Src/bno055/bno055.c ****     error_bno err;
 780:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 781:Src/bno055/bno055.c ****     if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 782:Src/bno055/bno055.c ****         return err;
 783:Src/bno055/bno055.c ****     }
 784:Src/bno055/bno055.c **** #endif  // BNO_AUTO_PAGE_SET
 785:Src/bno055/bno055.c ****     u8 data[2];
 786:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Z_LSB, data, 2)) != BNO_OK) {
 787:Src/bno055/bno055.c ****         return err;
 788:Src/bno055/bno055.c ****     }
 789:Src/bno055/bno055.c ****     f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 790:Src/bno055/bno055.c ****                                                          : BNO_ACC_SCALE_MG;
 791:Src/bno055/bno055.c ****     *buf = (s16)((data[1] << 8) | data[0]) / scale;
 792:Src/bno055/bno055.c ****     return BNO_OK;
 793:Src/bno055/bno055.c **** }
 794:Src/bno055/bno055.c **** 
 795:Src/bno055/bno055.c **** /**
 796:Src/bno055/bno055.c ****  * Bosch BNO055 read gravity data on all axis
 797:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 798:Src/bno055/bno055.c ****  *
 799:Src/bno055/bno055.c ****  * Reads the gravity data and stores the value in the specified
 800:Src/bno055/bno055.c ****  * vector buffer. Unit can be selected with `bno055_set_unit(...)` (default:
 801:Src/bno055/bno055.c ****  * m/s^2).
 802:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 803:Src/bno055/bno055.c ****  *
 804:Src/bno055/bno055.c ****  * Args:
 805:Src/bno055/bno055.c ****  *     > `imu[bno055_t*]`: BNO055 to read the data from
 806:Src/bno055/bno055.c ****  *     > `buf[bno055_vec3_t*]`: Buffer to store the read value in
 807:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 808:Src/bno055/bno055.c ****  *
 809:Src/bno055/bno055.c ****  * Return:
 810:Src/bno055/bno055.c ****  *     > `error_bno`: `BNO_OK` on success, errorcode else.
 811:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 812:Src/bno055/bno055.c ****  */
 813:Src/bno055/bno055.c **** error_bno bno055_gravity(bno055_t* imu, bno055_vec3_t* buf) {
 814:Src/bno055/bno055.c ****     error_bno err;
 815:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 816:Src/bno055/bno055.c ****     if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 817:Src/bno055/bno055.c ****         return err;
 818:Src/bno055/bno055.c ****     }
 819:Src/bno055/bno055.c **** #endif  // BNO_AUTO_PAGE_SET
 820:Src/bno055/bno055.c ****     u8 data[6];
 821:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 6)) != BNO_OK) {
 822:Src/bno055/bno055.c ****         return err;
 823:Src/bno055/bno055.c ****     }
 824:Src/bno055/bno055.c ****     f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 825:Src/bno055/bno055.c ****                                                          : BNO_ACC_SCALE_MG;
 826:Src/bno055/bno055.c ****     buf->x = (s16)((data[1] << 8) | data[0]) / scale;
ARM GAS  /tmp/cc9CDFEk.s 			page 16


 827:Src/bno055/bno055.c ****     buf->y = (s16)((data[3] << 8) | data[2]) / scale;
 828:Src/bno055/bno055.c ****     buf->x = (s16)((data[5] << 8) | data[4]) / scale;
 829:Src/bno055/bno055.c ****     return BNO_OK;
 830:Src/bno055/bno055.c **** }
 831:Src/bno055/bno055.c **** 
 832:Src/bno055/bno055.c **** /**
 833:Src/bno055/bno055.c ****  * Bosch BNO055 read euler yaw data
 834:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 835:Src/bno055/bno055.c ****  *
 836:Src/bno055/bno055.c ****  * Reads the yaw data and stores the value in the specified
 837:Src/bno055/bno055.c ****  * buffer. Unit can be specified with `bno055_set_unit(...)`. (Default: deg)
 838:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 839:Src/bno055/bno055.c ****  *
 840:Src/bno055/bno055.c ****  * Args:
 841:Src/bno055/bno055.c ****  *     > `imu[bno055_t*]`: BNO055 to read the data from
 842:Src/bno055/bno055.c ****  *     > `buf[f32*]`: Buffer to store the read value in
 843:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 844:Src/bno055/bno055.c ****  *
 845:Src/bno055/bno055.c ****  * Return:
 846:Src/bno055/bno055.c ****  *     > `error_bno`: `BNO_OK` on success, errorcode else.
 847:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 848:Src/bno055/bno055.c ****  */
 849:Src/bno055/bno055.c **** error_bno bno055_euler_yaw(bno055_t* imu, f32* buf) {
 850:Src/bno055/bno055.c ****     error_bno err;
 851:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 852:Src/bno055/bno055.c ****     if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 853:Src/bno055/bno055.c ****         return err;
 854:Src/bno055/bno055.c ****     }
 855:Src/bno055/bno055.c **** #endif  // BNO_AUTO_PAGE_SET
 856:Src/bno055/bno055.c ****     u8 data[2];
 857:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 2)) !=
 858:Src/bno055/bno055.c ****         BNO_OK) {
 859:Src/bno055/bno055.c ****         return err;
 860:Src/bno055/bno055.c ****     }
 861:Src/bno055/bno055.c ****     f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 862:Src/bno055/bno055.c ****                                                      : BNO_EUL_SCALE_RAD;
 863:Src/bno055/bno055.c ****     *buf = (s16)((data[1] << 8) | data[0]) / scale;
 864:Src/bno055/bno055.c ****     return BNO_OK;
 865:Src/bno055/bno055.c **** }
 866:Src/bno055/bno055.c **** 
 867:Src/bno055/bno055.c **** /**
 868:Src/bno055/bno055.c ****  * Bosch BNO055 read euler roll data
 869:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 870:Src/bno055/bno055.c ****  *
 871:Src/bno055/bno055.c ****  * Reads the roll data and stores the value in the specified
 872:Src/bno055/bno055.c ****  * buffer. Unit can be specified with `bno055_set_unit(...)`. (Default: deg)
 873:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 874:Src/bno055/bno055.c ****  *
 875:Src/bno055/bno055.c ****  * Args:
 876:Src/bno055/bno055.c ****  *     > `imu[bno055_t*]`: BNO055 to read the data from
 877:Src/bno055/bno055.c ****  *     > `buf[f32*]`: Buffer to store the read value in
 878:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 879:Src/bno055/bno055.c ****  *
 880:Src/bno055/bno055.c ****  * Return:
 881:Src/bno055/bno055.c ****  *     > `error_bno`: `BNO_OK` on success, errorcode else.
 882:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 883:Src/bno055/bno055.c ****  */
ARM GAS  /tmp/cc9CDFEk.s 			page 17


 884:Src/bno055/bno055.c **** error_bno bno055_euler_roll(bno055_t* imu, f32* buf) {
 885:Src/bno055/bno055.c ****     error_bno err;
 886:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 887:Src/bno055/bno055.c ****     if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 888:Src/bno055/bno055.c ****         return err;
 889:Src/bno055/bno055.c ****     }
 890:Src/bno055/bno055.c **** #endif  // BNO_AUTO_PAGE_SET
 891:Src/bno055/bno055.c ****     u8 data[2];
 892:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_EUL_ROLL_LSB, data, 2)) != BNO_OK) {
 893:Src/bno055/bno055.c ****         return err;
 894:Src/bno055/bno055.c ****     }
 895:Src/bno055/bno055.c ****     f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 896:Src/bno055/bno055.c ****                                                      : BNO_EUL_SCALE_RAD;
 897:Src/bno055/bno055.c ****     *buf = (s16)((data[1] << 8) | data[0]) / scale;
 898:Src/bno055/bno055.c ****     return BNO_OK;
 899:Src/bno055/bno055.c **** }
 900:Src/bno055/bno055.c **** 
 901:Src/bno055/bno055.c **** /**
 902:Src/bno055/bno055.c ****  * Bosch BNO055 read euler pitch data
 903:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 904:Src/bno055/bno055.c ****  *
 905:Src/bno055/bno055.c ****  * Reads the pitch data and stores the value in the specified
 906:Src/bno055/bno055.c ****  * buffer. Unit can be specified with `bno055_set_unit(...)`. (Default: deg)
 907:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 908:Src/bno055/bno055.c ****  *
 909:Src/bno055/bno055.c ****  * Args:
 910:Src/bno055/bno055.c ****  *     > `imu[bno055_t*]`: BNO055 to read the data from
 911:Src/bno055/bno055.c ****  *     > `buf[f32*]`: Buffer to store the read value in
 912:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 913:Src/bno055/bno055.c ****  *
 914:Src/bno055/bno055.c ****  * Return:
 915:Src/bno055/bno055.c ****  *     > `error_bno`: `BNO_OK` on success, errorcode else.
 916:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 917:Src/bno055/bno055.c ****  */
 918:Src/bno055/bno055.c **** error_bno bno055_euler_pitch(bno055_t* imu, f32* buf) {
 919:Src/bno055/bno055.c ****     error_bno err;
 920:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 921:Src/bno055/bno055.c ****     if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 922:Src/bno055/bno055.c ****         return err;
 923:Src/bno055/bno055.c ****     }
 924:Src/bno055/bno055.c **** #endif  // BNO_AUTO_PAGE_SET
 925:Src/bno055/bno055.c ****     u8 data[2];
 926:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_EUL_PITCH_LSB, data, 2)) != BNO_OK) {
 927:Src/bno055/bno055.c ****         return err;
 928:Src/bno055/bno055.c ****     }
 929:Src/bno055/bno055.c ****     f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 930:Src/bno055/bno055.c ****                                                      : BNO_EUL_SCALE_RAD;
 931:Src/bno055/bno055.c ****     *buf = (s16)((data[1] << 8) | data[0]) / scale;
 932:Src/bno055/bno055.c ****     return BNO_OK;
 933:Src/bno055/bno055.c **** }
 934:Src/bno055/bno055.c **** 
 935:Src/bno055/bno055.c **** /**
 936:Src/bno055/bno055.c ****  * Bosch BNO055 read euler data on all axis
 937:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 938:Src/bno055/bno055.c ****  *
 939:Src/bno055/bno055.c ****  * Reads the euler data and stores the value in the specified
 940:Src/bno055/bno055.c ****  * vector buffer. Unit can be selected with `bno055_set_unit(...)` (default:
ARM GAS  /tmp/cc9CDFEk.s 			page 18


 941:Src/bno055/bno055.c ****  * deg).
 942:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 943:Src/bno055/bno055.c ****  *
 944:Src/bno055/bno055.c ****  * Args:
 945:Src/bno055/bno055.c ****  *     > `imu[bno055_t*]`: BNO055 to read the data from
 946:Src/bno055/bno055.c ****  *     > `buf[bno055_euler_t*]`: Buffer to store the read value in
 947:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 948:Src/bno055/bno055.c ****  *
 949:Src/bno055/bno055.c ****  * Return:
 950:Src/bno055/bno055.c ****  *     > `error_bno`: `BNO_OK` on success, errorcode else.
 951:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 952:Src/bno055/bno055.c ****  */
 953:Src/bno055/bno055.c **** error_bno bno055_euler(bno055_t* imu, bno055_euler_t* buf) {
 954:Src/bno055/bno055.c ****     error_bno err;
 955:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 956:Src/bno055/bno055.c ****     if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 957:Src/bno055/bno055.c ****         return err;
 958:Src/bno055/bno055.c ****     }
 959:Src/bno055/bno055.c **** #endif  // BNO_AUTO_PAGE_SET
 960:Src/bno055/bno055.c ****     u8 data[6];
 961:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 6)) !=
 962:Src/bno055/bno055.c ****         BNO_OK) {
 963:Src/bno055/bno055.c ****         return err;
 964:Src/bno055/bno055.c ****     }
 965:Src/bno055/bno055.c ****     f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 966:Src/bno055/bno055.c ****                                                      : BNO_EUL_SCALE_RAD;
 967:Src/bno055/bno055.c ****     buf->yaw = (s16)((data[1] << 8) | data[0]) / scale;
 968:Src/bno055/bno055.c ****     buf->roll = (s16)((data[3] << 8) | data[2]) / scale;
 969:Src/bno055/bno055.c ****     buf->pitch = (s16)((data[5] << 8) | data[4]) / scale;
 970:Src/bno055/bno055.c ****     return BNO_OK;
 971:Src/bno055/bno055.c **** }
 972:Src/bno055/bno055.c **** 
 973:Src/bno055/bno055.c **** /**
 974:Src/bno055/bno055.c ****  * Bosch BNO055 read quaternion W-axis data
 975:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 976:Src/bno055/bno055.c ****  *
 977:Src/bno055/bno055.c ****  * Reads the quaternion data and stores the value in the specified
 978:Src/bno055/bno055.c ****  * buffer.
 979:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 980:Src/bno055/bno055.c ****  *
 981:Src/bno055/bno055.c ****  * Args:
 982:Src/bno055/bno055.c ****  *     > `imu[bno055_t*]`: BNO055 to read the data from
 983:Src/bno055/bno055.c ****  *     > `buf[f32*]`: Buffer to store the read value in
 984:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 985:Src/bno055/bno055.c ****  *
 986:Src/bno055/bno055.c ****  * Return:
 987:Src/bno055/bno055.c ****  *     > `error_bno`: `BNO_OK` on success, errorcode else.
 988:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
 989:Src/bno055/bno055.c ****  */
 990:Src/bno055/bno055.c **** error_bno bno055_quaternion_w(bno055_t* imu, f32* buf) {
  31              		.loc 1 990 56 view -0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 8
  34              		@ frame_needed = 0, uses_anonymous_args = 0
 991:Src/bno055/bno055.c ****     error_bno err;
  35              		.loc 1 991 5 view .LVU1
 992:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
ARM GAS  /tmp/cc9CDFEk.s 			page 19


 993:Src/bno055/bno055.c ****     if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 994:Src/bno055/bno055.c ****         return err;
 995:Src/bno055/bno055.c ****     }
 996:Src/bno055/bno055.c **** #endif  // BNO_AUTO_PAGE_SET
 997:Src/bno055/bno055.c ****     u8 data[2];
  36              		.loc 1 997 5 view .LVU2
 998:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 2)) != BNO_OK) {
  37              		.loc 1 998 5 view .LVU3
 990:Src/bno055/bno055.c ****     error_bno err;
  38              		.loc 1 990 56 is_stmt 0 view .LVU4
  39 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  40              	.LCFI0:
  41              		.cfi_def_cfa_offset 20
  42              		.cfi_offset 4, -20
  43              		.cfi_offset 5, -16
  44              		.cfi_offset 6, -12
  45              		.cfi_offset 7, -8
  46              		.cfi_offset 14, -4
  47 0002 0568     		ldr	r5, [r0]
  48              	.LVL1:
  49              	.LBB16:
  50              	.LBB17:
 999:Src/bno055/bno055.c ****         return err;
1000:Src/bno055/bno055.c ****     }
1001:Src/bno055/bno055.c ****     *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
1002:Src/bno055/bno055.c ****     return BNO_OK;
1003:Src/bno055/bno055.c **** }
1004:Src/bno055/bno055.c **** 
1005:Src/bno055/bno055.c **** /**
1006:Src/bno055/bno055.c ****  * Bosch BNO055 read quaternion X-axis data
1007:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
1008:Src/bno055/bno055.c ****  *
1009:Src/bno055/bno055.c ****  * Reads the quaternion data and stores the value in the specified
1010:Src/bno055/bno055.c ****  * buffer.
1011:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
1012:Src/bno055/bno055.c ****  *
1013:Src/bno055/bno055.c ****  * Args:
1014:Src/bno055/bno055.c ****  *     > `imu[bno055_t*]`: BNO055 to read the data from
1015:Src/bno055/bno055.c ****  *     > `buf[f32*]`: Buffer to store the read value in
1016:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
1017:Src/bno055/bno055.c ****  *
1018:Src/bno055/bno055.c ****  * Return:
1019:Src/bno055/bno055.c ****  *     > `error_bno`: `BNO_OK` on success, errorcode else.
1020:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
1021:Src/bno055/bno055.c ****  */
1022:Src/bno055/bno055.c **** error_bno bno055_quaternion_x(bno055_t* imu, f32* buf) {
1023:Src/bno055/bno055.c ****     error_bno err;
1024:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
1025:Src/bno055/bno055.c ****     if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
1026:Src/bno055/bno055.c ****         return err;
1027:Src/bno055/bno055.c ****     }
1028:Src/bno055/bno055.c **** #endif  // BNO_AUTO_PAGE_SET
1029:Src/bno055/bno055.c ****     u8 data[2];
1030:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_X_LSB, data, 2)) != BNO_OK) {
1031:Src/bno055/bno055.c ****         return err;
1032:Src/bno055/bno055.c ****     }
1033:Src/bno055/bno055.c ****     *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
ARM GAS  /tmp/cc9CDFEk.s 			page 20


1034:Src/bno055/bno055.c ****     return BNO_OK;
1035:Src/bno055/bno055.c **** }
1036:Src/bno055/bno055.c **** 
1037:Src/bno055/bno055.c **** /**
1038:Src/bno055/bno055.c ****  * Bosch BNO055 read quaternion Y-axis data
1039:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
1040:Src/bno055/bno055.c ****  *
1041:Src/bno055/bno055.c ****  * Reads the quaternion data and stores the value in the specified
1042:Src/bno055/bno055.c ****  * buffer.
1043:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
1044:Src/bno055/bno055.c ****  *
1045:Src/bno055/bno055.c ****  * Args:
1046:Src/bno055/bno055.c ****  *     > `imu[bno055_t*]`: BNO055 to read the data from
1047:Src/bno055/bno055.c ****  *     > `buf[f32*]`: Buffer to store the read value in
1048:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
1049:Src/bno055/bno055.c ****  *
1050:Src/bno055/bno055.c ****  * Return:
1051:Src/bno055/bno055.c ****  *     > `error_bno`: `BNO_OK` on success, errorcode else.
1052:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
1053:Src/bno055/bno055.c ****  */
1054:Src/bno055/bno055.c **** error_bno bno055_quaternion_y(bno055_t* imu, f32* buf) {
1055:Src/bno055/bno055.c ****     error_bno err;
1056:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
1057:Src/bno055/bno055.c ****     if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
1058:Src/bno055/bno055.c ****         return err;
1059:Src/bno055/bno055.c ****     }
1060:Src/bno055/bno055.c **** #endif  // BNO_AUTO_PAGE_SET
1061:Src/bno055/bno055.c ****     u8 data[2];
1062:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Y_LSB, data, 2)) != BNO_OK) {
1063:Src/bno055/bno055.c ****         return err;
1064:Src/bno055/bno055.c ****     }
1065:Src/bno055/bno055.c ****     *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
1066:Src/bno055/bno055.c ****     return BNO_OK;
1067:Src/bno055/bno055.c **** }
1068:Src/bno055/bno055.c **** 
1069:Src/bno055/bno055.c **** /**
1070:Src/bno055/bno055.c ****  * Bosch BNO055 read quaternion Z-axis data
1071:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
1072:Src/bno055/bno055.c ****  *
1073:Src/bno055/bno055.c ****  * Reads the quaternion data and stores the value in the specified
1074:Src/bno055/bno055.c ****  * buffer.
1075:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
1076:Src/bno055/bno055.c ****  *
1077:Src/bno055/bno055.c ****  * Args:
1078:Src/bno055/bno055.c ****  *     > `imu[bno055_t*]`: BNO055 to read the data from
1079:Src/bno055/bno055.c ****  *     > `buf[f32*]`: Buffer to store the read value in
1080:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
1081:Src/bno055/bno055.c ****  *
1082:Src/bno055/bno055.c ****  * Return:
1083:Src/bno055/bno055.c ****  *     > `error_bno`: `BNO_OK` on success, errorcode else.
1084:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
1085:Src/bno055/bno055.c ****  */
1086:Src/bno055/bno055.c **** error_bno bno055_quaternion_z(bno055_t* imu, f32* buf) {
1087:Src/bno055/bno055.c ****     error_bno err;
1088:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
1089:Src/bno055/bno055.c ****     if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
1090:Src/bno055/bno055.c ****         return err;
ARM GAS  /tmp/cc9CDFEk.s 			page 21


1091:Src/bno055/bno055.c ****     }
1092:Src/bno055/bno055.c **** #endif  // BNO_AUTO_PAGE_SET
1093:Src/bno055/bno055.c ****     u8 data[2];
1094:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Z_LSB, data, 2)) != BNO_OK) {
1095:Src/bno055/bno055.c ****         return err;
1096:Src/bno055/bno055.c ****     }
1097:Src/bno055/bno055.c ****     *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
1098:Src/bno055/bno055.c ****     return BNO_OK;
1099:Src/bno055/bno055.c **** }
1100:Src/bno055/bno055.c **** 
1101:Src/bno055/bno055.c **** /**
1102:Src/bno055/bno055.c ****  * Bosch BNO055 read quaternion data on all axis
1103:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
1104:Src/bno055/bno055.c ****  *
1105:Src/bno055/bno055.c ****  * Reads the euler data and stores the value in the specified
1106:Src/bno055/bno055.c ****  * vector buffer. Unit can be selected with `bno055_set_unit(...)` (default:
1107:Src/bno055/bno055.c ****  * deg).
1108:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
1109:Src/bno055/bno055.c ****  *
1110:Src/bno055/bno055.c ****  * Args:
1111:Src/bno055/bno055.c ****  *     > `imu[bno055_t*]`: BNO055 to read the data from
1112:Src/bno055/bno055.c ****  *     > `buf[bno055_euler_t*]`: Buffer to store the read value in
1113:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
1114:Src/bno055/bno055.c ****  *
1115:Src/bno055/bno055.c ****  * Return:
1116:Src/bno055/bno055.c ****  *     > `error_bno`: `BNO_OK` on success, errorcode else.
1117:Src/bno055/bno055.c ****  * ----------------------------------------------------------------------
1118:Src/bno055/bno055.c ****  */
1119:Src/bno055/bno055.c **** error_bno bno055_quaternion(bno055_t* imu, bno055_vec4_t* buf) {
1120:Src/bno055/bno055.c ****     error_bno err;
1121:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
1122:Src/bno055/bno055.c ****     if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
1123:Src/bno055/bno055.c ****         return err;
1124:Src/bno055/bno055.c ****     }
1125:Src/bno055/bno055.c **** #endif  // BNO_AUTO_PAGE_SET
1126:Src/bno055/bno055.c ****     u8 data[8];
1127:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 8)) != BNO_OK) {
1128:Src/bno055/bno055.c ****         return err;
1129:Src/bno055/bno055.c ****     }
1130:Src/bno055/bno055.c ****     buf->w = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
1131:Src/bno055/bno055.c ****     buf->x = (s16)((data[3] << 8) | data[2]) / (f32)BNO_QUA_SCALE;
1132:Src/bno055/bno055.c ****     buf->y = (s16)((data[5] << 8) | data[4]) / (f32)BNO_QUA_SCALE;
1133:Src/bno055/bno055.c ****     buf->z = (s16)((data[7] << 8) | data[6]) / (f32)BNO_QUA_SCALE;
1134:Src/bno055/bno055.c ****     return BNO_OK;
1135:Src/bno055/bno055.c **** }
1136:Src/bno055/bno055.c **** 
1137:Src/bno055/bno055.c **** error_bno bno055_set_opmode(bno055_t* imu, const bno055_opmode_t opmode) {
1138:Src/bno055/bno055.c ****     error_bno err;
1139:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
1140:Src/bno055/bno055.c ****     if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
1141:Src/bno055/bno055.c ****         return err;
1142:Src/bno055/bno055.c ****     }
1143:Src/bno055/bno055.c **** #endif  // BNO_AUTO_PAGE_SET
1144:Src/bno055/bno055.c ****     if ((err = bno055_write_regs(*imu, BNO_OPR_MODE, (u8*)&opmode, 1)) !=
1145:Src/bno055/bno055.c ****         BNO_OK) {
1146:Src/bno055/bno055.c ****         return err;
1147:Src/bno055/bno055.c ****     }
ARM GAS  /tmp/cc9CDFEk.s 			page 22


1148:Src/bno055/bno055.c ****     HAL_Delay(BNO_ANY_TIME_DELAY + 5);
1149:Src/bno055/bno055.c ****     return BNO_OK;
1150:Src/bno055/bno055.c **** }
1151:Src/bno055/bno055.c **** 
1152:Src/bno055/bno055.c **** error_bno bno055_set_unit(bno055_t* bno, const bno055_temp_unitsel_t t_unit,
1153:Src/bno055/bno055.c ****                           const bno055_gyr_unitsel_t g_unit,
1154:Src/bno055/bno055.c ****                           const bno055_acc_unitsel_t a_unit,
1155:Src/bno055/bno055.c ****                           const bno055_eul_unitsel_t e_unit) {
1156:Src/bno055/bno055.c ****     error_bno err;
1157:Src/bno055/bno055.c ****     if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
1158:Src/bno055/bno055.c ****         return err;
1159:Src/bno055/bno055.c ****     }
1160:Src/bno055/bno055.c ****     if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
1161:Src/bno055/bno055.c ****         return err;
1162:Src/bno055/bno055.c ****     }
1163:Src/bno055/bno055.c ****     uint8_t data = t_unit | g_unit | a_unit | e_unit;
1164:Src/bno055/bno055.c ****     if ((err = bno055_write_regs(*bno, BNO_UNIT_SEL, &data, 1)) != BNO_OK) {
1165:Src/bno055/bno055.c ****         return err;
1166:Src/bno055/bno055.c ****     }
1167:Src/bno055/bno055.c ****     bno->_gyr_unit = g_unit;
1168:Src/bno055/bno055.c ****     bno->_acc_unit = a_unit;
1169:Src/bno055/bno055.c ****     bno->_eul_unit = e_unit;
1170:Src/bno055/bno055.c ****     bno->_temp_unit = t_unit;
1171:Src/bno055/bno055.c **** 
1172:Src/bno055/bno055.c ****     if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
1173:Src/bno055/bno055.c ****         return err;
1174:Src/bno055/bno055.c ****     }
1175:Src/bno055/bno055.c ****     return BNO_OK;
1176:Src/bno055/bno055.c **** }
1177:Src/bno055/bno055.c **** 
1178:Src/bno055/bno055.c **** error_bno bno055_set_pwr_mode(bno055_t* imu, bno055_pwr_t pwr_mode) {
1179:Src/bno055/bno055.c ****     if (imu == NULL) {
1180:Src/bno055/bno055.c ****         return BNO_ERR_NULL_PTR;
1181:Src/bno055/bno055.c ****     }
1182:Src/bno055/bno055.c ****     error_bno err;
1183:Src/bno055/bno055.c ****     if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
1184:Src/bno055/bno055.c ****         return err;
1185:Src/bno055/bno055.c ****     }
1186:Src/bno055/bno055.c ****     if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
1187:Src/bno055/bno055.c ****         return err;
1188:Src/bno055/bno055.c ****     }
1189:Src/bno055/bno055.c ****     if ((err = bno055_write_regs(*imu, BNO_PWR_MODE, (u8*)&pwr_mode, 1)) !=
1190:Src/bno055/bno055.c ****         BNO_OK) {
1191:Src/bno055/bno055.c ****         return err;
1192:Src/bno055/bno055.c ****     }
1193:Src/bno055/bno055.c ****     imu->_pwr_mode = pwr_mode;
1194:Src/bno055/bno055.c ****     if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
1195:Src/bno055/bno055.c ****         return err;
1196:Src/bno055/bno055.c ****     }
1197:Src/bno055/bno055.c ****     if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
1198:Src/bno055/bno055.c ****         return err;
1199:Src/bno055/bno055.c ****     }
1200:Src/bno055/bno055.c ****     HAL_Delay(2);
1201:Src/bno055/bno055.c ****     return BNO_OK;
1202:Src/bno055/bno055.c **** }
1203:Src/bno055/bno055.c **** 
1204:Src/bno055/bno055.c **** error_bno bno055_reset(bno055_t* imu) {
ARM GAS  /tmp/cc9CDFEk.s 			page 23


1205:Src/bno055/bno055.c ****     u8 data = 0x20U;
1206:Src/bno055/bno055.c ****     if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
1207:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
1208:Src/bno055/bno055.c ****     }
1209:Src/bno055/bno055.c ****     return BNO_OK;
1210:Src/bno055/bno055.c **** }
1211:Src/bno055/bno055.c **** 
1212:Src/bno055/bno055.c **** error_bno bno055_on(bno055_t* imu) {
1213:Src/bno055/bno055.c ****     u8 data = 0x00U;
1214:Src/bno055/bno055.c ****     if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
1215:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
1216:Src/bno055/bno055.c ****     }
1217:Src/bno055/bno055.c ****     return BNO_OK;
1218:Src/bno055/bno055.c **** }
1219:Src/bno055/bno055.c **** 
1220:Src/bno055/bno055.c **** error_bno bno055_read_regs(bno055_t imu, u8 addr, uint8_t* buf,
1221:Src/bno055/bno055.c ****                            uint32_t buf_size) {
1222:Src/bno055/bno055.c ****     HAL_StatusTypeDef err;
1223:Src/bno055/bno055.c ****     // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
1224:Src/bno055/bno055.c ****     // buf,
1225:Src/bno055/bno055.c ****     //                        buf_size, HAL_MAX_DELAY);
1226:Src/bno055/bno055.c ****     err = HAL_I2C_Master_Transmit(imu.i2c, imu.addr, &addr, 1, HAL_MAX_DELAY);
  51              		.loc 1 1226 11 view .LVU5
  52 0004 8679     		ldrb	r6, [r0, #6]	@ zero_extendqisi2
  53              	.LBE17:
  54              	.LBE16:
 990:Src/bno055/bno055.c ****     error_bno err;
  55              		.loc 1 990 56 view .LVU6
  56 0006 85B0     		sub	sp, sp, #20
  57              	.LCFI1:
  58              		.cfi_def_cfa_offset 40
  59 0008 2023     		movs	r3, #32
  60              	.LBB21:
  61              	.LBB18:
  62              		.loc 1 1226 11 view .LVU7
  63 000a 4FF0FF37 		mov	r7, #-1
  64              	.LBE18:
  65              	.LBE21:
 990:Src/bno055/bno055.c ****     error_bno err;
  66              		.loc 1 990 56 view .LVU8
  67 000e 0C46     		mov	r4, r1
  68 0010 8DF80B30 		strb	r3, [sp, #11]
  69              	.LVL2:
  70              	.LBB22:
  71              	.LBI16:
1220:Src/bno055/bno055.c ****                            uint32_t buf_size) {
  72              		.loc 1 1220 11 is_stmt 1 view .LVU9
  73              	.LBB19:
1222:Src/bno055/bno055.c ****     // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
  74              		.loc 1 1222 5 view .LVU10
  75              		.loc 1 1226 5 view .LVU11
  76              		.loc 1 1226 11 is_stmt 0 view .LVU12
  77 0014 0097     		str	r7, [sp]
  78              	.LVL3:
  79              		.loc 1 1226 11 view .LVU13
  80 0016 0123     		movs	r3, #1
  81              	.LVL4:
ARM GAS  /tmp/cc9CDFEk.s 			page 24


  82              		.loc 1 1226 11 view .LVU14
  83 0018 0DF10B02 		add	r2, sp, #11
  84              	.LVL5:
  85              		.loc 1 1226 11 view .LVU15
  86 001c 3146     		mov	r1, r6
  87              	.LVL6:
  88              		.loc 1 1226 11 view .LVU16
  89 001e 2846     		mov	r0, r5
  90              	.LVL7:
  91              		.loc 1 1226 11 view .LVU17
  92 0020 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
  93              	.LVL8:
1227:Src/bno055/bno055.c ****     if (err != HAL_OK) {
  94              		.loc 1 1227 5 is_stmt 1 view .LVU18
  95              		.loc 1 1227 8 is_stmt 0 view .LVU19
  96 0024 10B1     		cbz	r0, .L2
  97              	.L4:
  98              	.LVL9:
1228:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
  99              		.loc 1 1228 16 view .LVU20
 100 0026 0120     		movs	r0, #1
 101              	.LBE19:
 102              	.LBE22:
1003:Src/bno055/bno055.c **** 
 103              		.loc 1 1003 1 view .LVU21
 104 0028 05B0     		add	sp, sp, #20
 105              	.LCFI2:
 106              		.cfi_remember_state
 107              		.cfi_def_cfa_offset 20
 108              		@ sp needed
 109 002a F0BD     		pop	{r4, r5, r6, r7, pc}
 110              	.LVL10:
 111              	.L2:
 112              	.LCFI3:
 113              		.cfi_restore_state
 114              	.LBB23:
 115              	.LBB20:
1229:Src/bno055/bno055.c ****     }
1230:Src/bno055/bno055.c ****     err =
 116              		.loc 1 1230 5 is_stmt 1 view .LVU22
1231:Src/bno055/bno055.c ****         HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 117              		.loc 1 1231 9 is_stmt 0 view .LVU23
 118 002c 0097     		str	r7, [sp]
 119 002e 0223     		movs	r3, #2
 120 0030 03AA     		add	r2, sp, #12
 121              	.LVL11:
 122              		.loc 1 1231 9 view .LVU24
 123 0032 3146     		mov	r1, r6
 124 0034 2846     		mov	r0, r5
 125              	.LVL12:
 126              		.loc 1 1231 9 view .LVU25
 127 0036 FFF7FEFF 		bl	HAL_I2C_Master_Receive
 128              	.LVL13:
1232:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 129              		.loc 1 1232 5 is_stmt 1 view .LVU26
 130              		.loc 1 1232 8 is_stmt 0 view .LVU27
 131 003a 0028     		cmp	r0, #0
ARM GAS  /tmp/cc9CDFEk.s 			page 25


 132 003c F3D1     		bne	.L4
 133              	.LVL14:
 134              		.loc 1 1232 8 view .LVU28
 135              	.LBE20:
 136              	.LBE23:
1001:Src/bno055/bno055.c ****     return BNO_OK;
 137              		.loc 1 1001 5 is_stmt 1 view .LVU29
1001:Src/bno055/bno055.c ****     return BNO_OK;
 138              		.loc 1 1001 44 is_stmt 0 view .LVU30
 139 003e BDF90C30 		ldrsh	r3, [sp, #12]
 140 0042 07EE903A 		vmov	s15, r3	@ int
 141 0046 FAEEC97A 		vcvt.f32.s32	s15, s15, #14
1001:Src/bno055/bno055.c ****     return BNO_OK;
 142              		.loc 1 1001 10 view .LVU31
 143 004a C4ED007A 		vstr.32	s15, [r4]
1002:Src/bno055/bno055.c **** }
 144              		.loc 1 1002 5 is_stmt 1 view .LVU32
1003:Src/bno055/bno055.c **** 
 145              		.loc 1 1003 1 is_stmt 0 view .LVU33
 146 004e 05B0     		add	sp, sp, #20
 147              	.LCFI4:
 148              		.cfi_def_cfa_offset 20
 149              		@ sp needed
 150 0050 F0BD     		pop	{r4, r5, r6, r7, pc}
1003:Src/bno055/bno055.c **** 
 151              		.loc 1 1003 1 view .LVU34
 152              		.cfi_endproc
 153              	.LFE159:
 155 0052 00BF     		.section	.text.bno055_quaternion_x,"ax",%progbits
 156              		.align	1
 157              		.p2align 2,,3
 158              		.global	bno055_quaternion_x
 159              		.syntax unified
 160              		.thumb
 161              		.thumb_func
 162              		.fpu fpv4-sp-d16
 164              	bno055_quaternion_x:
 165              	.LVL15:
 166              	.LFB160:
1022:Src/bno055/bno055.c ****     error_bno err;
 167              		.loc 1 1022 56 is_stmt 1 view -0
 168              		.cfi_startproc
 169              		@ args = 0, pretend = 0, frame = 8
 170              		@ frame_needed = 0, uses_anonymous_args = 0
1023:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 171              		.loc 1 1023 5 view .LVU36
1029:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_X_LSB, data, 2)) != BNO_OK) {
 172              		.loc 1 1029 5 view .LVU37
1030:Src/bno055/bno055.c ****         return err;
 173              		.loc 1 1030 5 view .LVU38
1022:Src/bno055/bno055.c ****     error_bno err;
 174              		.loc 1 1022 56 is_stmt 0 view .LVU39
 175 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 176              	.LCFI5:
 177              		.cfi_def_cfa_offset 20
 178              		.cfi_offset 4, -20
 179              		.cfi_offset 5, -16
ARM GAS  /tmp/cc9CDFEk.s 			page 26


 180              		.cfi_offset 6, -12
 181              		.cfi_offset 7, -8
 182              		.cfi_offset 14, -4
 183 0002 0568     		ldr	r5, [r0]
 184              	.LVL16:
 185              	.LBB26:
 186              	.LBB27:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 187              		.loc 1 1226 11 view .LVU40
 188 0004 8679     		ldrb	r6, [r0, #6]	@ zero_extendqisi2
 189              	.LBE27:
 190              	.LBE26:
1022:Src/bno055/bno055.c ****     error_bno err;
 191              		.loc 1 1022 56 view .LVU41
 192 0006 85B0     		sub	sp, sp, #20
 193              	.LCFI6:
 194              		.cfi_def_cfa_offset 40
 195 0008 2223     		movs	r3, #34
 196              	.LBB31:
 197              	.LBB28:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 198              		.loc 1 1226 11 view .LVU42
 199 000a 4FF0FF37 		mov	r7, #-1
 200              	.LBE28:
 201              	.LBE31:
1022:Src/bno055/bno055.c ****     error_bno err;
 202              		.loc 1 1022 56 view .LVU43
 203 000e 0C46     		mov	r4, r1
 204 0010 8DF80B30 		strb	r3, [sp, #11]
 205              	.LVL17:
 206              	.LBB32:
 207              	.LBI26:
1220:Src/bno055/bno055.c ****                            uint32_t buf_size) {
 208              		.loc 1 1220 11 is_stmt 1 view .LVU44
 209              	.LBB29:
1222:Src/bno055/bno055.c ****     // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
 210              		.loc 1 1222 5 view .LVU45
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 211              		.loc 1 1226 5 view .LVU46
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 212              		.loc 1 1226 11 is_stmt 0 view .LVU47
 213 0014 0097     		str	r7, [sp]
 214              	.LVL18:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 215              		.loc 1 1226 11 view .LVU48
 216 0016 0123     		movs	r3, #1
 217              	.LVL19:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 218              		.loc 1 1226 11 view .LVU49
 219 0018 0DF10B02 		add	r2, sp, #11
 220              	.LVL20:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 221              		.loc 1 1226 11 view .LVU50
 222 001c 3146     		mov	r1, r6
 223              	.LVL21:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 224              		.loc 1 1226 11 view .LVU51
ARM GAS  /tmp/cc9CDFEk.s 			page 27


 225 001e 2846     		mov	r0, r5
 226              	.LVL22:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 227              		.loc 1 1226 11 view .LVU52
 228 0020 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 229              	.LVL23:
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 230              		.loc 1 1227 5 is_stmt 1 view .LVU53
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 231              		.loc 1 1227 8 is_stmt 0 view .LVU54
 232 0024 10B1     		cbz	r0, .L8
 233              	.L10:
 234              	.LVL24:
1228:Src/bno055/bno055.c ****     }
 235              		.loc 1 1228 16 view .LVU55
 236 0026 0120     		movs	r0, #1
 237              	.LBE29:
 238              	.LBE32:
1035:Src/bno055/bno055.c **** 
 239              		.loc 1 1035 1 view .LVU56
 240 0028 05B0     		add	sp, sp, #20
 241              	.LCFI7:
 242              		.cfi_remember_state
 243              		.cfi_def_cfa_offset 20
 244              		@ sp needed
 245 002a F0BD     		pop	{r4, r5, r6, r7, pc}
 246              	.LVL25:
 247              	.L8:
 248              	.LCFI8:
 249              		.cfi_restore_state
 250              	.LBB33:
 251              	.LBB30:
1230:Src/bno055/bno055.c ****         HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 252              		.loc 1 1230 5 is_stmt 1 view .LVU57
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 253              		.loc 1 1231 9 is_stmt 0 view .LVU58
 254 002c 0097     		str	r7, [sp]
 255 002e 0223     		movs	r3, #2
 256 0030 03AA     		add	r2, sp, #12
 257              	.LVL26:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 258              		.loc 1 1231 9 view .LVU59
 259 0032 3146     		mov	r1, r6
 260 0034 2846     		mov	r0, r5
 261              	.LVL27:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 262              		.loc 1 1231 9 view .LVU60
 263 0036 FFF7FEFF 		bl	HAL_I2C_Master_Receive
 264              	.LVL28:
 265              		.loc 1 1232 5 is_stmt 1 view .LVU61
 266              		.loc 1 1232 8 is_stmt 0 view .LVU62
 267 003a 0028     		cmp	r0, #0
 268 003c F3D1     		bne	.L10
 269              	.LVL29:
 270              		.loc 1 1232 8 view .LVU63
 271              	.LBE30:
 272              	.LBE33:
ARM GAS  /tmp/cc9CDFEk.s 			page 28


1033:Src/bno055/bno055.c ****     return BNO_OK;
 273              		.loc 1 1033 5 is_stmt 1 view .LVU64
1033:Src/bno055/bno055.c ****     return BNO_OK;
 274              		.loc 1 1033 44 is_stmt 0 view .LVU65
 275 003e BDF90C30 		ldrsh	r3, [sp, #12]
 276 0042 07EE903A 		vmov	s15, r3	@ int
 277 0046 FAEEC97A 		vcvt.f32.s32	s15, s15, #14
1033:Src/bno055/bno055.c ****     return BNO_OK;
 278              		.loc 1 1033 10 view .LVU66
 279 004a C4ED007A 		vstr.32	s15, [r4]
1034:Src/bno055/bno055.c **** }
 280              		.loc 1 1034 5 is_stmt 1 view .LVU67
1035:Src/bno055/bno055.c **** 
 281              		.loc 1 1035 1 is_stmt 0 view .LVU68
 282 004e 05B0     		add	sp, sp, #20
 283              	.LCFI9:
 284              		.cfi_def_cfa_offset 20
 285              		@ sp needed
 286 0050 F0BD     		pop	{r4, r5, r6, r7, pc}
1035:Src/bno055/bno055.c **** 
 287              		.loc 1 1035 1 view .LVU69
 288              		.cfi_endproc
 289              	.LFE160:
 291 0052 00BF     		.section	.text.bno055_mag_x,"ax",%progbits
 292              		.align	1
 293              		.p2align 2,,3
 294              		.global	bno055_mag_x
 295              		.syntax unified
 296              		.thumb
 297              		.thumb_func
 298              		.fpu fpv4-sp-d16
 300              	bno055_mag_x:
 301              	.LVL30:
 302              	.LFB147:
 574:Src/bno055/bno055.c ****     error_bno err;
 303              		.loc 1 574 49 is_stmt 1 view -0
 304              		.cfi_startproc
 305              		@ args = 0, pretend = 0, frame = 8
 306              		@ frame_needed = 0, uses_anonymous_args = 0
 575:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 307              		.loc 1 575 5 view .LVU71
 581:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 2)) != BNO_OK) {
 308              		.loc 1 581 5 view .LVU72
 582:Src/bno055/bno055.c ****         return err;
 309              		.loc 1 582 5 view .LVU73
 574:Src/bno055/bno055.c ****     error_bno err;
 310              		.loc 1 574 49 is_stmt 0 view .LVU74
 311 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 312              	.LCFI10:
 313              		.cfi_def_cfa_offset 20
 314              		.cfi_offset 4, -20
 315              		.cfi_offset 5, -16
 316              		.cfi_offset 6, -12
 317              		.cfi_offset 7, -8
 318              		.cfi_offset 14, -4
 319 0002 0568     		ldr	r5, [r0]
 320              	.LVL31:
ARM GAS  /tmp/cc9CDFEk.s 			page 29


 321              	.LBB36:
 322              	.LBB37:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 323              		.loc 1 1226 11 view .LVU75
 324 0004 8679     		ldrb	r6, [r0, #6]	@ zero_extendqisi2
 325              	.LBE37:
 326              	.LBE36:
 574:Src/bno055/bno055.c ****     error_bno err;
 327              		.loc 1 574 49 view .LVU76
 328 0006 85B0     		sub	sp, sp, #20
 329              	.LCFI11:
 330              		.cfi_def_cfa_offset 40
 331 0008 0E23     		movs	r3, #14
 332              	.LBB41:
 333              	.LBB38:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 334              		.loc 1 1226 11 view .LVU77
 335 000a 4FF0FF37 		mov	r7, #-1
 336              	.LBE38:
 337              	.LBE41:
 574:Src/bno055/bno055.c ****     error_bno err;
 338              		.loc 1 574 49 view .LVU78
 339 000e 0C46     		mov	r4, r1
 340 0010 8DF80B30 		strb	r3, [sp, #11]
 341              	.LVL32:
 342              	.LBB42:
 343              	.LBI36:
1220:Src/bno055/bno055.c ****                            uint32_t buf_size) {
 344              		.loc 1 1220 11 is_stmt 1 view .LVU79
 345              	.LBB39:
1222:Src/bno055/bno055.c ****     // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
 346              		.loc 1 1222 5 view .LVU80
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 347              		.loc 1 1226 5 view .LVU81
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 348              		.loc 1 1226 11 is_stmt 0 view .LVU82
 349 0014 0097     		str	r7, [sp]
 350              	.LVL33:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 351              		.loc 1 1226 11 view .LVU83
 352 0016 0123     		movs	r3, #1
 353              	.LVL34:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 354              		.loc 1 1226 11 view .LVU84
 355 0018 0DF10B02 		add	r2, sp, #11
 356              	.LVL35:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 357              		.loc 1 1226 11 view .LVU85
 358 001c 3146     		mov	r1, r6
 359              	.LVL36:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 360              		.loc 1 1226 11 view .LVU86
 361 001e 2846     		mov	r0, r5
 362              	.LVL37:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 363              		.loc 1 1226 11 view .LVU87
 364 0020 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
ARM GAS  /tmp/cc9CDFEk.s 			page 30


 365              	.LVL38:
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 366              		.loc 1 1227 5 is_stmt 1 view .LVU88
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 367              		.loc 1 1227 8 is_stmt 0 view .LVU89
 368 0024 10B1     		cbz	r0, .L13
 369              	.L15:
 370              	.LVL39:
1228:Src/bno055/bno055.c ****     }
 371              		.loc 1 1228 16 view .LVU90
 372 0026 0120     		movs	r0, #1
 373              	.LBE39:
 374              	.LBE42:
 588:Src/bno055/bno055.c **** 
 375              		.loc 1 588 1 view .LVU91
 376 0028 05B0     		add	sp, sp, #20
 377              	.LCFI12:
 378              		.cfi_remember_state
 379              		.cfi_def_cfa_offset 20
 380              		@ sp needed
 381 002a F0BD     		pop	{r4, r5, r6, r7, pc}
 382              	.LVL40:
 383              	.L13:
 384              	.LCFI13:
 385              		.cfi_restore_state
 386              	.LBB43:
 387              	.LBB40:
1230:Src/bno055/bno055.c ****         HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 388              		.loc 1 1230 5 is_stmt 1 view .LVU92
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 389              		.loc 1 1231 9 is_stmt 0 view .LVU93
 390 002c 0097     		str	r7, [sp]
 391 002e 0223     		movs	r3, #2
 392 0030 03AA     		add	r2, sp, #12
 393              	.LVL41:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 394              		.loc 1 1231 9 view .LVU94
 395 0032 3146     		mov	r1, r6
 396 0034 2846     		mov	r0, r5
 397              	.LVL42:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 398              		.loc 1 1231 9 view .LVU95
 399 0036 FFF7FEFF 		bl	HAL_I2C_Master_Receive
 400              	.LVL43:
 401              		.loc 1 1232 5 is_stmt 1 view .LVU96
 402              		.loc 1 1232 8 is_stmt 0 view .LVU97
 403 003a 0028     		cmp	r0, #0
 404 003c F3D1     		bne	.L15
 405              	.LVL44:
 406              		.loc 1 1232 8 view .LVU98
 407              	.LBE40:
 408              	.LBE43:
 586:Src/bno055/bno055.c ****     return BNO_OK;
 409              		.loc 1 586 5 is_stmt 1 view .LVU99
 586:Src/bno055/bno055.c ****     return BNO_OK;
 410              		.loc 1 586 44 is_stmt 0 view .LVU100
 411 003e BDF90C30 		ldrsh	r3, [sp, #12]
ARM GAS  /tmp/cc9CDFEk.s 			page 31


 412 0042 07EE903A 		vmov	s15, r3	@ int
 413 0046 FAEECE7A 		vcvt.f32.s32	s15, s15, #4
 586:Src/bno055/bno055.c ****     return BNO_OK;
 414              		.loc 1 586 10 view .LVU101
 415 004a C4ED007A 		vstr.32	s15, [r4]
 587:Src/bno055/bno055.c **** }
 416              		.loc 1 587 5 is_stmt 1 view .LVU102
 588:Src/bno055/bno055.c **** 
 417              		.loc 1 588 1 is_stmt 0 view .LVU103
 418 004e 05B0     		add	sp, sp, #20
 419              	.LCFI14:
 420              		.cfi_def_cfa_offset 20
 421              		@ sp needed
 422 0050 F0BD     		pop	{r4, r5, r6, r7, pc}
 588:Src/bno055/bno055.c **** 
 423              		.loc 1 588 1 view .LVU104
 424              		.cfi_endproc
 425              	.LFE147:
 427 0052 00BF     		.section	.text.bno055_mag_y,"ax",%progbits
 428              		.align	1
 429              		.p2align 2,,3
 430              		.global	bno055_mag_y
 431              		.syntax unified
 432              		.thumb
 433              		.thumb_func
 434              		.fpu fpv4-sp-d16
 436              	bno055_mag_y:
 437              	.LVL45:
 438              	.LFB148:
 608:Src/bno055/bno055.c ****     error_bno err;
 439              		.loc 1 608 49 is_stmt 1 view -0
 440              		.cfi_startproc
 441              		@ args = 0, pretend = 0, frame = 8
 442              		@ frame_needed = 0, uses_anonymous_args = 0
 609:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 443              		.loc 1 609 5 view .LVU106
 615:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Y_LSB, data, 2)) != BNO_OK) {
 444              		.loc 1 615 5 view .LVU107
 616:Src/bno055/bno055.c ****         return err;
 445              		.loc 1 616 5 view .LVU108
 608:Src/bno055/bno055.c ****     error_bno err;
 446              		.loc 1 608 49 is_stmt 0 view .LVU109
 447 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 448              	.LCFI15:
 449              		.cfi_def_cfa_offset 20
 450              		.cfi_offset 4, -20
 451              		.cfi_offset 5, -16
 452              		.cfi_offset 6, -12
 453              		.cfi_offset 7, -8
 454              		.cfi_offset 14, -4
 455 0002 0568     		ldr	r5, [r0]
 456              	.LVL46:
 457              	.LBB46:
 458              	.LBB47:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 459              		.loc 1 1226 11 view .LVU110
 460 0004 8679     		ldrb	r6, [r0, #6]	@ zero_extendqisi2
ARM GAS  /tmp/cc9CDFEk.s 			page 32


 461              	.LBE47:
 462              	.LBE46:
 608:Src/bno055/bno055.c ****     error_bno err;
 463              		.loc 1 608 49 view .LVU111
 464 0006 85B0     		sub	sp, sp, #20
 465              	.LCFI16:
 466              		.cfi_def_cfa_offset 40
 467 0008 1023     		movs	r3, #16
 468              	.LBB51:
 469              	.LBB48:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 470              		.loc 1 1226 11 view .LVU112
 471 000a 4FF0FF37 		mov	r7, #-1
 472              	.LBE48:
 473              	.LBE51:
 608:Src/bno055/bno055.c ****     error_bno err;
 474              		.loc 1 608 49 view .LVU113
 475 000e 0C46     		mov	r4, r1
 476 0010 8DF80B30 		strb	r3, [sp, #11]
 477              	.LVL47:
 478              	.LBB52:
 479              	.LBI46:
1220:Src/bno055/bno055.c ****                            uint32_t buf_size) {
 480              		.loc 1 1220 11 is_stmt 1 view .LVU114
 481              	.LBB49:
1222:Src/bno055/bno055.c ****     // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
 482              		.loc 1 1222 5 view .LVU115
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 483              		.loc 1 1226 5 view .LVU116
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 484              		.loc 1 1226 11 is_stmt 0 view .LVU117
 485 0014 0097     		str	r7, [sp]
 486              	.LVL48:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 487              		.loc 1 1226 11 view .LVU118
 488 0016 0123     		movs	r3, #1
 489              	.LVL49:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 490              		.loc 1 1226 11 view .LVU119
 491 0018 0DF10B02 		add	r2, sp, #11
 492              	.LVL50:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 493              		.loc 1 1226 11 view .LVU120
 494 001c 3146     		mov	r1, r6
 495              	.LVL51:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 496              		.loc 1 1226 11 view .LVU121
 497 001e 2846     		mov	r0, r5
 498              	.LVL52:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 499              		.loc 1 1226 11 view .LVU122
 500 0020 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 501              	.LVL53:
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 502              		.loc 1 1227 5 is_stmt 1 view .LVU123
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 503              		.loc 1 1227 8 is_stmt 0 view .LVU124
ARM GAS  /tmp/cc9CDFEk.s 			page 33


 504 0024 10B1     		cbz	r0, .L18
 505              	.L20:
 506              	.LVL54:
1228:Src/bno055/bno055.c ****     }
 507              		.loc 1 1228 16 view .LVU125
 508 0026 0120     		movs	r0, #1
 509              	.LBE49:
 510              	.LBE52:
 622:Src/bno055/bno055.c **** 
 511              		.loc 1 622 1 view .LVU126
 512 0028 05B0     		add	sp, sp, #20
 513              	.LCFI17:
 514              		.cfi_remember_state
 515              		.cfi_def_cfa_offset 20
 516              		@ sp needed
 517 002a F0BD     		pop	{r4, r5, r6, r7, pc}
 518              	.LVL55:
 519              	.L18:
 520              	.LCFI18:
 521              		.cfi_restore_state
 522              	.LBB53:
 523              	.LBB50:
1230:Src/bno055/bno055.c ****         HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 524              		.loc 1 1230 5 is_stmt 1 view .LVU127
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 525              		.loc 1 1231 9 is_stmt 0 view .LVU128
 526 002c 0097     		str	r7, [sp]
 527 002e 0223     		movs	r3, #2
 528 0030 03AA     		add	r2, sp, #12
 529              	.LVL56:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 530              		.loc 1 1231 9 view .LVU129
 531 0032 3146     		mov	r1, r6
 532 0034 2846     		mov	r0, r5
 533              	.LVL57:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 534              		.loc 1 1231 9 view .LVU130
 535 0036 FFF7FEFF 		bl	HAL_I2C_Master_Receive
 536              	.LVL58:
 537              		.loc 1 1232 5 is_stmt 1 view .LVU131
 538              		.loc 1 1232 8 is_stmt 0 view .LVU132
 539 003a 0028     		cmp	r0, #0
 540 003c F3D1     		bne	.L20
 541              	.LVL59:
 542              		.loc 1 1232 8 view .LVU133
 543              	.LBE50:
 544              	.LBE53:
 620:Src/bno055/bno055.c ****     return BNO_OK;
 545              		.loc 1 620 5 is_stmt 1 view .LVU134
 620:Src/bno055/bno055.c ****     return BNO_OK;
 546              		.loc 1 620 44 is_stmt 0 view .LVU135
 547 003e BDF90C30 		ldrsh	r3, [sp, #12]
 548 0042 07EE903A 		vmov	s15, r3	@ int
 549 0046 FAEECE7A 		vcvt.f32.s32	s15, s15, #4
 620:Src/bno055/bno055.c ****     return BNO_OK;
 550              		.loc 1 620 10 view .LVU136
 551 004a C4ED007A 		vstr.32	s15, [r4]
ARM GAS  /tmp/cc9CDFEk.s 			page 34


 621:Src/bno055/bno055.c **** }
 552              		.loc 1 621 5 is_stmt 1 view .LVU137
 622:Src/bno055/bno055.c **** 
 553              		.loc 1 622 1 is_stmt 0 view .LVU138
 554 004e 05B0     		add	sp, sp, #20
 555              	.LCFI19:
 556              		.cfi_def_cfa_offset 20
 557              		@ sp needed
 558 0050 F0BD     		pop	{r4, r5, r6, r7, pc}
 622:Src/bno055/bno055.c **** 
 559              		.loc 1 622 1 view .LVU139
 560              		.cfi_endproc
 561              	.LFE148:
 563 0052 00BF     		.section	.text.bno055_mag_z,"ax",%progbits
 564              		.align	1
 565              		.p2align 2,,3
 566              		.global	bno055_mag_z
 567              		.syntax unified
 568              		.thumb
 569              		.thumb_func
 570              		.fpu fpv4-sp-d16
 572              	bno055_mag_z:
 573              	.LVL60:
 574              	.LFB149:
 641:Src/bno055/bno055.c ****     error_bno err;
 575              		.loc 1 641 49 is_stmt 1 view -0
 576              		.cfi_startproc
 577              		@ args = 0, pretend = 0, frame = 8
 578              		@ frame_needed = 0, uses_anonymous_args = 0
 642:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 579              		.loc 1 642 5 view .LVU141
 648:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Z_LSB, data, 2)) != BNO_OK) {
 580              		.loc 1 648 5 view .LVU142
 649:Src/bno055/bno055.c ****         return err;
 581              		.loc 1 649 5 view .LVU143
 641:Src/bno055/bno055.c ****     error_bno err;
 582              		.loc 1 641 49 is_stmt 0 view .LVU144
 583 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 584              	.LCFI20:
 585              		.cfi_def_cfa_offset 20
 586              		.cfi_offset 4, -20
 587              		.cfi_offset 5, -16
 588              		.cfi_offset 6, -12
 589              		.cfi_offset 7, -8
 590              		.cfi_offset 14, -4
 591 0002 0568     		ldr	r5, [r0]
 592              	.LVL61:
 593              	.LBB56:
 594              	.LBB57:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 595              		.loc 1 1226 11 view .LVU145
 596 0004 8679     		ldrb	r6, [r0, #6]	@ zero_extendqisi2
 597              	.LBE57:
 598              	.LBE56:
 641:Src/bno055/bno055.c ****     error_bno err;
 599              		.loc 1 641 49 view .LVU146
 600 0006 85B0     		sub	sp, sp, #20
ARM GAS  /tmp/cc9CDFEk.s 			page 35


 601              	.LCFI21:
 602              		.cfi_def_cfa_offset 40
 603 0008 1223     		movs	r3, #18
 604              	.LBB61:
 605              	.LBB58:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 606              		.loc 1 1226 11 view .LVU147
 607 000a 4FF0FF37 		mov	r7, #-1
 608              	.LBE58:
 609              	.LBE61:
 641:Src/bno055/bno055.c ****     error_bno err;
 610              		.loc 1 641 49 view .LVU148
 611 000e 0C46     		mov	r4, r1
 612 0010 8DF80B30 		strb	r3, [sp, #11]
 613              	.LVL62:
 614              	.LBB62:
 615              	.LBI56:
1220:Src/bno055/bno055.c ****                            uint32_t buf_size) {
 616              		.loc 1 1220 11 is_stmt 1 view .LVU149
 617              	.LBB59:
1222:Src/bno055/bno055.c ****     // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
 618              		.loc 1 1222 5 view .LVU150
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 619              		.loc 1 1226 5 view .LVU151
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 620              		.loc 1 1226 11 is_stmt 0 view .LVU152
 621 0014 0097     		str	r7, [sp]
 622              	.LVL63:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 623              		.loc 1 1226 11 view .LVU153
 624 0016 0123     		movs	r3, #1
 625              	.LVL64:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 626              		.loc 1 1226 11 view .LVU154
 627 0018 0DF10B02 		add	r2, sp, #11
 628              	.LVL65:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 629              		.loc 1 1226 11 view .LVU155
 630 001c 3146     		mov	r1, r6
 631              	.LVL66:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 632              		.loc 1 1226 11 view .LVU156
 633 001e 2846     		mov	r0, r5
 634              	.LVL67:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 635              		.loc 1 1226 11 view .LVU157
 636 0020 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 637              	.LVL68:
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 638              		.loc 1 1227 5 is_stmt 1 view .LVU158
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 639              		.loc 1 1227 8 is_stmt 0 view .LVU159
 640 0024 10B1     		cbz	r0, .L23
 641              	.L25:
 642              	.LVL69:
1228:Src/bno055/bno055.c ****     }
 643              		.loc 1 1228 16 view .LVU160
ARM GAS  /tmp/cc9CDFEk.s 			page 36


 644 0026 0120     		movs	r0, #1
 645              	.LBE59:
 646              	.LBE62:
 655:Src/bno055/bno055.c **** 
 647              		.loc 1 655 1 view .LVU161
 648 0028 05B0     		add	sp, sp, #20
 649              	.LCFI22:
 650              		.cfi_remember_state
 651              		.cfi_def_cfa_offset 20
 652              		@ sp needed
 653 002a F0BD     		pop	{r4, r5, r6, r7, pc}
 654              	.LVL70:
 655              	.L23:
 656              	.LCFI23:
 657              		.cfi_restore_state
 658              	.LBB63:
 659              	.LBB60:
1230:Src/bno055/bno055.c ****         HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 660              		.loc 1 1230 5 is_stmt 1 view .LVU162
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 661              		.loc 1 1231 9 is_stmt 0 view .LVU163
 662 002c 0097     		str	r7, [sp]
 663 002e 0223     		movs	r3, #2
 664 0030 03AA     		add	r2, sp, #12
 665              	.LVL71:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 666              		.loc 1 1231 9 view .LVU164
 667 0032 3146     		mov	r1, r6
 668 0034 2846     		mov	r0, r5
 669              	.LVL72:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 670              		.loc 1 1231 9 view .LVU165
 671 0036 FFF7FEFF 		bl	HAL_I2C_Master_Receive
 672              	.LVL73:
 673              		.loc 1 1232 5 is_stmt 1 view .LVU166
 674              		.loc 1 1232 8 is_stmt 0 view .LVU167
 675 003a 0028     		cmp	r0, #0
 676 003c F3D1     		bne	.L25
 677              	.LVL74:
 678              		.loc 1 1232 8 view .LVU168
 679              	.LBE60:
 680              	.LBE63:
 653:Src/bno055/bno055.c ****     return BNO_OK;
 681              		.loc 1 653 5 is_stmt 1 view .LVU169
 653:Src/bno055/bno055.c ****     return BNO_OK;
 682              		.loc 1 653 44 is_stmt 0 view .LVU170
 683 003e BDF90C30 		ldrsh	r3, [sp, #12]
 684 0042 07EE903A 		vmov	s15, r3	@ int
 685 0046 FAEECE7A 		vcvt.f32.s32	s15, s15, #4
 653:Src/bno055/bno055.c ****     return BNO_OK;
 686              		.loc 1 653 10 view .LVU171
 687 004a C4ED007A 		vstr.32	s15, [r4]
 654:Src/bno055/bno055.c **** }
 688              		.loc 1 654 5 is_stmt 1 view .LVU172
 655:Src/bno055/bno055.c **** 
 689              		.loc 1 655 1 is_stmt 0 view .LVU173
 690 004e 05B0     		add	sp, sp, #20
ARM GAS  /tmp/cc9CDFEk.s 			page 37


 691              	.LCFI24:
 692              		.cfi_def_cfa_offset 20
 693              		@ sp needed
 694 0050 F0BD     		pop	{r4, r5, r6, r7, pc}
 655:Src/bno055/bno055.c **** 
 695              		.loc 1 655 1 view .LVU174
 696              		.cfi_endproc
 697              	.LFE149:
 699 0052 00BF     		.section	.text.bno055_quaternion_y,"ax",%progbits
 700              		.align	1
 701              		.p2align 2,,3
 702              		.global	bno055_quaternion_y
 703              		.syntax unified
 704              		.thumb
 705              		.thumb_func
 706              		.fpu fpv4-sp-d16
 708              	bno055_quaternion_y:
 709              	.LVL75:
 710              	.LFB161:
1054:Src/bno055/bno055.c ****     error_bno err;
 711              		.loc 1 1054 56 is_stmt 1 view -0
 712              		.cfi_startproc
 713              		@ args = 0, pretend = 0, frame = 8
 714              		@ frame_needed = 0, uses_anonymous_args = 0
1055:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 715              		.loc 1 1055 5 view .LVU176
1061:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 716              		.loc 1 1061 5 view .LVU177
1062:Src/bno055/bno055.c ****         return err;
 717              		.loc 1 1062 5 view .LVU178
1054:Src/bno055/bno055.c ****     error_bno err;
 718              		.loc 1 1054 56 is_stmt 0 view .LVU179
 719 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 720              	.LCFI25:
 721              		.cfi_def_cfa_offset 20
 722              		.cfi_offset 4, -20
 723              		.cfi_offset 5, -16
 724              		.cfi_offset 6, -12
 725              		.cfi_offset 7, -8
 726              		.cfi_offset 14, -4
 727 0002 0568     		ldr	r5, [r0]
 728              	.LVL76:
 729              	.LBB66:
 730              	.LBB67:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 731              		.loc 1 1226 11 view .LVU180
 732 0004 8679     		ldrb	r6, [r0, #6]	@ zero_extendqisi2
 733              	.LBE67:
 734              	.LBE66:
1054:Src/bno055/bno055.c ****     error_bno err;
 735              		.loc 1 1054 56 view .LVU181
 736 0006 85B0     		sub	sp, sp, #20
 737              	.LCFI26:
 738              		.cfi_def_cfa_offset 40
 739 0008 2423     		movs	r3, #36
 740              	.LBB71:
 741              	.LBB68:
ARM GAS  /tmp/cc9CDFEk.s 			page 38


1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 742              		.loc 1 1226 11 view .LVU182
 743 000a 4FF0FF37 		mov	r7, #-1
 744              	.LBE68:
 745              	.LBE71:
1054:Src/bno055/bno055.c ****     error_bno err;
 746              		.loc 1 1054 56 view .LVU183
 747 000e 0C46     		mov	r4, r1
 748 0010 8DF80B30 		strb	r3, [sp, #11]
 749              	.LVL77:
 750              	.LBB72:
 751              	.LBI66:
1220:Src/bno055/bno055.c ****                            uint32_t buf_size) {
 752              		.loc 1 1220 11 is_stmt 1 view .LVU184
 753              	.LBB69:
1222:Src/bno055/bno055.c ****     // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
 754              		.loc 1 1222 5 view .LVU185
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 755              		.loc 1 1226 5 view .LVU186
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 756              		.loc 1 1226 11 is_stmt 0 view .LVU187
 757 0014 0097     		str	r7, [sp]
 758              	.LVL78:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 759              		.loc 1 1226 11 view .LVU188
 760 0016 0123     		movs	r3, #1
 761              	.LVL79:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 762              		.loc 1 1226 11 view .LVU189
 763 0018 0DF10B02 		add	r2, sp, #11
 764              	.LVL80:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 765              		.loc 1 1226 11 view .LVU190
 766 001c 3146     		mov	r1, r6
 767              	.LVL81:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 768              		.loc 1 1226 11 view .LVU191
 769 001e 2846     		mov	r0, r5
 770              	.LVL82:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 771              		.loc 1 1226 11 view .LVU192
 772 0020 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 773              	.LVL83:
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 774              		.loc 1 1227 5 is_stmt 1 view .LVU193
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 775              		.loc 1 1227 8 is_stmt 0 view .LVU194
 776 0024 10B1     		cbz	r0, .L28
 777              	.L30:
 778              	.LVL84:
1228:Src/bno055/bno055.c ****     }
 779              		.loc 1 1228 16 view .LVU195
 780 0026 0120     		movs	r0, #1
 781              	.LBE69:
 782              	.LBE72:
1067:Src/bno055/bno055.c **** 
 783              		.loc 1 1067 1 view .LVU196
ARM GAS  /tmp/cc9CDFEk.s 			page 39


 784 0028 05B0     		add	sp, sp, #20
 785              	.LCFI27:
 786              		.cfi_remember_state
 787              		.cfi_def_cfa_offset 20
 788              		@ sp needed
 789 002a F0BD     		pop	{r4, r5, r6, r7, pc}
 790              	.LVL85:
 791              	.L28:
 792              	.LCFI28:
 793              		.cfi_restore_state
 794              	.LBB73:
 795              	.LBB70:
1230:Src/bno055/bno055.c ****         HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 796              		.loc 1 1230 5 is_stmt 1 view .LVU197
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 797              		.loc 1 1231 9 is_stmt 0 view .LVU198
 798 002c 0097     		str	r7, [sp]
 799 002e 0223     		movs	r3, #2
 800 0030 03AA     		add	r2, sp, #12
 801              	.LVL86:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 802              		.loc 1 1231 9 view .LVU199
 803 0032 3146     		mov	r1, r6
 804 0034 2846     		mov	r0, r5
 805              	.LVL87:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 806              		.loc 1 1231 9 view .LVU200
 807 0036 FFF7FEFF 		bl	HAL_I2C_Master_Receive
 808              	.LVL88:
 809              		.loc 1 1232 5 is_stmt 1 view .LVU201
 810              		.loc 1 1232 8 is_stmt 0 view .LVU202
 811 003a 0028     		cmp	r0, #0
 812 003c F3D1     		bne	.L30
 813              	.LVL89:
 814              		.loc 1 1232 8 view .LVU203
 815              	.LBE70:
 816              	.LBE73:
1065:Src/bno055/bno055.c ****     return BNO_OK;
 817              		.loc 1 1065 5 is_stmt 1 view .LVU204
1065:Src/bno055/bno055.c ****     return BNO_OK;
 818              		.loc 1 1065 44 is_stmt 0 view .LVU205
 819 003e BDF90C30 		ldrsh	r3, [sp, #12]
 820 0042 07EE903A 		vmov	s15, r3	@ int
 821 0046 FAEEC97A 		vcvt.f32.s32	s15, s15, #14
1065:Src/bno055/bno055.c ****     return BNO_OK;
 822              		.loc 1 1065 10 view .LVU206
 823 004a C4ED007A 		vstr.32	s15, [r4]
1066:Src/bno055/bno055.c **** }
 824              		.loc 1 1066 5 is_stmt 1 view .LVU207
1067:Src/bno055/bno055.c **** 
 825              		.loc 1 1067 1 is_stmt 0 view .LVU208
 826 004e 05B0     		add	sp, sp, #20
 827              	.LCFI29:
 828              		.cfi_def_cfa_offset 20
 829              		@ sp needed
 830 0050 F0BD     		pop	{r4, r5, r6, r7, pc}
1067:Src/bno055/bno055.c **** 
ARM GAS  /tmp/cc9CDFEk.s 			page 40


 831              		.loc 1 1067 1 view .LVU209
 832              		.cfi_endproc
 833              	.LFE161:
 835 0052 00BF     		.section	.text.bno055_quaternion_z,"ax",%progbits
 836              		.align	1
 837              		.p2align 2,,3
 838              		.global	bno055_quaternion_z
 839              		.syntax unified
 840              		.thumb
 841              		.thumb_func
 842              		.fpu fpv4-sp-d16
 844              	bno055_quaternion_z:
 845              	.LVL90:
 846              	.LFB162:
1086:Src/bno055/bno055.c ****     error_bno err;
 847              		.loc 1 1086 56 is_stmt 1 view -0
 848              		.cfi_startproc
 849              		@ args = 0, pretend = 0, frame = 8
 850              		@ frame_needed = 0, uses_anonymous_args = 0
1087:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 851              		.loc 1 1087 5 view .LVU211
1093:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 852              		.loc 1 1093 5 view .LVU212
1094:Src/bno055/bno055.c ****         return err;
 853              		.loc 1 1094 5 view .LVU213
1086:Src/bno055/bno055.c ****     error_bno err;
 854              		.loc 1 1086 56 is_stmt 0 view .LVU214
 855 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 856              	.LCFI30:
 857              		.cfi_def_cfa_offset 20
 858              		.cfi_offset 4, -20
 859              		.cfi_offset 5, -16
 860              		.cfi_offset 6, -12
 861              		.cfi_offset 7, -8
 862              		.cfi_offset 14, -4
 863 0002 0568     		ldr	r5, [r0]
 864              	.LVL91:
 865              	.LBB76:
 866              	.LBB77:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 867              		.loc 1 1226 11 view .LVU215
 868 0004 8679     		ldrb	r6, [r0, #6]	@ zero_extendqisi2
 869              	.LBE77:
 870              	.LBE76:
1086:Src/bno055/bno055.c ****     error_bno err;
 871              		.loc 1 1086 56 view .LVU216
 872 0006 85B0     		sub	sp, sp, #20
 873              	.LCFI31:
 874              		.cfi_def_cfa_offset 40
 875 0008 2623     		movs	r3, #38
 876              	.LBB81:
 877              	.LBB78:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 878              		.loc 1 1226 11 view .LVU217
 879 000a 4FF0FF37 		mov	r7, #-1
 880              	.LBE78:
 881              	.LBE81:
ARM GAS  /tmp/cc9CDFEk.s 			page 41


1086:Src/bno055/bno055.c ****     error_bno err;
 882              		.loc 1 1086 56 view .LVU218
 883 000e 0C46     		mov	r4, r1
 884 0010 8DF80B30 		strb	r3, [sp, #11]
 885              	.LVL92:
 886              	.LBB82:
 887              	.LBI76:
1220:Src/bno055/bno055.c ****                            uint32_t buf_size) {
 888              		.loc 1 1220 11 is_stmt 1 view .LVU219
 889              	.LBB79:
1222:Src/bno055/bno055.c ****     // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
 890              		.loc 1 1222 5 view .LVU220
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 891              		.loc 1 1226 5 view .LVU221
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 892              		.loc 1 1226 11 is_stmt 0 view .LVU222
 893 0014 0097     		str	r7, [sp]
 894              	.LVL93:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 895              		.loc 1 1226 11 view .LVU223
 896 0016 0123     		movs	r3, #1
 897              	.LVL94:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 898              		.loc 1 1226 11 view .LVU224
 899 0018 0DF10B02 		add	r2, sp, #11
 900              	.LVL95:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 901              		.loc 1 1226 11 view .LVU225
 902 001c 3146     		mov	r1, r6
 903              	.LVL96:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 904              		.loc 1 1226 11 view .LVU226
 905 001e 2846     		mov	r0, r5
 906              	.LVL97:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 907              		.loc 1 1226 11 view .LVU227
 908 0020 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 909              	.LVL98:
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 910              		.loc 1 1227 5 is_stmt 1 view .LVU228
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 911              		.loc 1 1227 8 is_stmt 0 view .LVU229
 912 0024 10B1     		cbz	r0, .L33
 913              	.L35:
 914              	.LVL99:
1228:Src/bno055/bno055.c ****     }
 915              		.loc 1 1228 16 view .LVU230
 916 0026 0120     		movs	r0, #1
 917              	.LBE79:
 918              	.LBE82:
1099:Src/bno055/bno055.c **** 
 919              		.loc 1 1099 1 view .LVU231
 920 0028 05B0     		add	sp, sp, #20
 921              	.LCFI32:
 922              		.cfi_remember_state
 923              		.cfi_def_cfa_offset 20
 924              		@ sp needed
ARM GAS  /tmp/cc9CDFEk.s 			page 42


 925 002a F0BD     		pop	{r4, r5, r6, r7, pc}
 926              	.LVL100:
 927              	.L33:
 928              	.LCFI33:
 929              		.cfi_restore_state
 930              	.LBB83:
 931              	.LBB80:
1230:Src/bno055/bno055.c ****         HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 932              		.loc 1 1230 5 is_stmt 1 view .LVU232
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 933              		.loc 1 1231 9 is_stmt 0 view .LVU233
 934 002c 0097     		str	r7, [sp]
 935 002e 0223     		movs	r3, #2
 936 0030 03AA     		add	r2, sp, #12
 937              	.LVL101:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 938              		.loc 1 1231 9 view .LVU234
 939 0032 3146     		mov	r1, r6
 940 0034 2846     		mov	r0, r5
 941              	.LVL102:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 942              		.loc 1 1231 9 view .LVU235
 943 0036 FFF7FEFF 		bl	HAL_I2C_Master_Receive
 944              	.LVL103:
 945              		.loc 1 1232 5 is_stmt 1 view .LVU236
 946              		.loc 1 1232 8 is_stmt 0 view .LVU237
 947 003a 0028     		cmp	r0, #0
 948 003c F3D1     		bne	.L35
 949              	.LVL104:
 950              		.loc 1 1232 8 view .LVU238
 951              	.LBE80:
 952              	.LBE83:
1097:Src/bno055/bno055.c ****     return BNO_OK;
 953              		.loc 1 1097 5 is_stmt 1 view .LVU239
1097:Src/bno055/bno055.c ****     return BNO_OK;
 954              		.loc 1 1097 44 is_stmt 0 view .LVU240
 955 003e BDF90C30 		ldrsh	r3, [sp, #12]
 956 0042 07EE903A 		vmov	s15, r3	@ int
 957 0046 FAEEC97A 		vcvt.f32.s32	s15, s15, #14
1097:Src/bno055/bno055.c ****     return BNO_OK;
 958              		.loc 1 1097 10 view .LVU241
 959 004a C4ED007A 		vstr.32	s15, [r4]
1098:Src/bno055/bno055.c **** }
 960              		.loc 1 1098 5 is_stmt 1 view .LVU242
1099:Src/bno055/bno055.c **** 
 961              		.loc 1 1099 1 is_stmt 0 view .LVU243
 962 004e 05B0     		add	sp, sp, #20
 963              	.LCFI34:
 964              		.cfi_def_cfa_offset 20
 965              		@ sp needed
 966 0050 F0BD     		pop	{r4, r5, r6, r7, pc}
1099:Src/bno055/bno055.c **** 
 967              		.loc 1 1099 1 view .LVU244
 968              		.cfi_endproc
 969              	.LFE162:
 971 0052 00BF     		.section	.text.bno055_temperature,"ax",%progbits
 972              		.align	1
ARM GAS  /tmp/cc9CDFEk.s 			page 43


 973              		.p2align 2,,3
 974              		.global	bno055_temperature
 975              		.syntax unified
 976              		.thumb
 977              		.thumb_func
 978              		.fpu fpv4-sp-d16
 980              	bno055_temperature:
 981              	.LVL105:
 982              	.LFB134:
 109:Src/bno055/bno055.c ****     error_bno err;
 983              		.loc 1 109 54 is_stmt 1 view -0
 984              		.cfi_startproc
 985              		@ args = 0, pretend = 0, frame = 16
 986              		@ frame_needed = 0, uses_anonymous_args = 0
 110:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 987              		.loc 1 110 5 view .LVU246
 116:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_TEMP, &data, 1)) != BNO_OK) {
 988              		.loc 1 116 5 view .LVU247
 109:Src/bno055/bno055.c ****     error_bno err;
 989              		.loc 1 109 54 is_stmt 0 view .LVU248
 990 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 991              	.LCFI35:
 992              		.cfi_def_cfa_offset 20
 993              		.cfi_offset 4, -20
 994              		.cfi_offset 5, -16
 995              		.cfi_offset 6, -12
 996              		.cfi_offset 7, -8
 997              		.cfi_offset 14, -4
 998 0002 87B0     		sub	sp, sp, #28
 999              	.LCFI36:
 1000              		.cfi_def_cfa_offset 48
 1001 0004 0668     		ldr	r6, [r0]
 116:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_TEMP, &data, 1)) != BNO_OK) {
 1002              		.loc 1 116 8 view .LVU249
 1003 0006 0023     		movs	r3, #0
 1004              	.LBB86:
 1005              	.LBB87:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1006              		.loc 1 1226 11 view .LVU250
 1007 0008 4FF0FF37 		mov	r7, #-1
 1008 000c 0097     		str	r7, [sp]
 1009              	.LBE87:
 1010              	.LBE86:
 116:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_TEMP, &data, 1)) != BNO_OK) {
 1011              		.loc 1 116 8 view .LVU251
 1012 000e 8DF81630 		strb	r3, [sp, #22]
 117:Src/bno055/bno055.c ****         return err;
 1013              		.loc 1 117 5 is_stmt 1 view .LVU252
 1014              	.LVL106:
 117:Src/bno055/bno055.c ****         return err;
 1015              		.loc 1 117 5 is_stmt 0 view .LVU253
 1016 0012 3423     		movs	r3, #52
 1017 0014 8DF81730 		strb	r3, [sp, #23]
 1018              	.LVL107:
 1019              	.LBB91:
 1020              	.LBI86:
1220:Src/bno055/bno055.c ****                            uint32_t buf_size) {
ARM GAS  /tmp/cc9CDFEk.s 			page 44


 1021              		.loc 1 1220 11 is_stmt 1 view .LVU254
 1022              	.LBB88:
1222:Src/bno055/bno055.c ****     // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
 1023              		.loc 1 1222 5 view .LVU255
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1024              		.loc 1 1226 5 view .LVU256
 1025              	.LBE88:
 1026              	.LBE91:
 109:Src/bno055/bno055.c ****     error_bno err;
 1027              		.loc 1 109 54 is_stmt 0 view .LVU257
 1028 0018 0446     		mov	r4, r0
 1029 001a 0D46     		mov	r5, r1
 1030              	.LBB92:
 1031              	.LBB89:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1032              		.loc 1 1226 11 view .LVU258
 1033 001c 0123     		movs	r3, #1
 1034              	.LVL108:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1035              		.loc 1 1226 11 view .LVU259
 1036 001e 8179     		ldrb	r1, [r0, #6]	@ zero_extendqisi2
 1037              	.LVL109:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1038              		.loc 1 1226 11 view .LVU260
 1039 0020 0391     		str	r1, [sp, #12]
 1040 0022 0DF11702 		add	r2, sp, #23
 1041              	.LVL110:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1042              		.loc 1 1226 11 view .LVU261
 1043 0026 3046     		mov	r0, r6
 1044              	.LVL111:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1045              		.loc 1 1226 11 view .LVU262
 1046 0028 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 1047              	.LVL112:
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 1048              		.loc 1 1227 5 is_stmt 1 view .LVU263
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 1049              		.loc 1 1227 8 is_stmt 0 view .LVU264
 1050 002c 0399     		ldr	r1, [sp, #12]
 1051 002e 10B1     		cbz	r0, .L38
 1052              	.L40:
 1053              	.LVL113:
1228:Src/bno055/bno055.c ****     }
 1054              		.loc 1 1228 16 view .LVU265
 1055 0030 0120     		movs	r0, #1
 1056              	.LBE89:
 1057              	.LBE92:
 122:Src/bno055/bno055.c **** 
 1058              		.loc 1 122 1 view .LVU266
 1059 0032 07B0     		add	sp, sp, #28
 1060              	.LCFI37:
 1061              		.cfi_remember_state
 1062              		.cfi_def_cfa_offset 20
 1063              		@ sp needed
 1064 0034 F0BD     		pop	{r4, r5, r6, r7, pc}
 1065              	.LVL114:
ARM GAS  /tmp/cc9CDFEk.s 			page 45


 1066              	.L38:
 1067              	.LCFI38:
 1068              		.cfi_restore_state
 1069              	.LBB93:
 1070              	.LBB90:
1230:Src/bno055/bno055.c ****         HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 1071              		.loc 1 1230 5 is_stmt 1 view .LVU267
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1072              		.loc 1 1231 9 is_stmt 0 view .LVU268
 1073 0036 0097     		str	r7, [sp]
 1074 0038 0123     		movs	r3, #1
 1075 003a 3046     		mov	r0, r6
 1076              	.LVL115:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1077              		.loc 1 1231 9 view .LVU269
 1078 003c 0DF11602 		add	r2, sp, #22
 1079              	.LVL116:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1080              		.loc 1 1231 9 view .LVU270
 1081 0040 FFF7FEFF 		bl	HAL_I2C_Master_Receive
 1082              	.LVL117:
 1083              		.loc 1 1232 5 is_stmt 1 view .LVU271
 1084              		.loc 1 1232 8 is_stmt 0 view .LVU272
 1085 0044 0028     		cmp	r0, #0
 1086 0046 F3D1     		bne	.L40
 1087              	.LVL118:
 1088              		.loc 1 1232 8 view .LVU273
 1089              	.LBE90:
 1090              	.LBE93:
 120:Src/bno055/bno055.c ****     return BNO_OK;
 1091              		.loc 1 120 5 is_stmt 1 view .LVU274
 120:Src/bno055/bno055.c ****     return BNO_OK;
 1092              		.loc 1 120 10 is_stmt 0 view .LVU275
 1093 0048 E37B     		ldrb	r3, [r4, #15]	@ zero_extendqisi2
 1094 004a 33B1     		cbz	r3, .L41
 120:Src/bno055/bno055.c ****     return BNO_OK;
 1095              		.loc 1 120 10 discriminator 1 view .LVU276
 1096 004c 9DF81630 		ldrb	r3, [sp, #22]	@ zero_extendqisi2
 1097 0050 5B00     		lsls	r3, r3, #1
 1098 0052 5BB2     		sxtb	r3, r3
 1099 0054 2B70     		strb	r3, [r5]
 121:Src/bno055/bno055.c **** }
 1100              		.loc 1 121 5 is_stmt 1 discriminator 1 view .LVU277
 1101              	.L44:
 122:Src/bno055/bno055.c **** 
 1102              		.loc 1 122 1 is_stmt 0 view .LVU278
 1103 0056 07B0     		add	sp, sp, #28
 1104              	.LCFI39:
 1105              		.cfi_remember_state
 1106              		.cfi_def_cfa_offset 20
 1107              		@ sp needed
 1108 0058 F0BD     		pop	{r4, r5, r6, r7, pc}
 1109              	.LVL119:
 1110              	.L41:
 1111              	.LCFI40:
 1112              		.cfi_restore_state
 120:Src/bno055/bno055.c ****     return BNO_OK;
ARM GAS  /tmp/cc9CDFEk.s 			page 46


 1113              		.loc 1 120 10 discriminator 2 view .LVU279
 1114 005a 9DF91630 		ldrsb	r3, [sp, #22]
 1115 005e 2B70     		strb	r3, [r5]
 121:Src/bno055/bno055.c **** }
 1116              		.loc 1 121 5 is_stmt 1 discriminator 2 view .LVU280
 1117 0060 F9E7     		b	.L44
 1118              		.cfi_endproc
 1119              	.LFE134:
 1121 0062 00BF     		.section	.text.bno055_acc_x,"ax",%progbits
 1122              		.align	1
 1123              		.p2align 2,,3
 1124              		.global	bno055_acc_x
 1125              		.syntax unified
 1126              		.thumb
 1127              		.thumb_func
 1128              		.fpu fpv4-sp-d16
 1130              	bno055_acc_x:
 1131              	.LVL120:
 1132              	.LFB135:
 141:Src/bno055/bno055.c ****     error_bno err;
 1133              		.loc 1 141 49 view -0
 1134              		.cfi_startproc
 1135              		@ args = 0, pretend = 0, frame = 16
 1136              		@ frame_needed = 0, uses_anonymous_args = 0
 142:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 1137              		.loc 1 142 5 view .LVU282
 148:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 2)) != BNO_OK) {
 1138              		.loc 1 148 5 view .LVU283
 149:Src/bno055/bno055.c ****         return err;
 1139              		.loc 1 149 5 view .LVU284
 141:Src/bno055/bno055.c ****     error_bno err;
 1140              		.loc 1 141 49 is_stmt 0 view .LVU285
 1141 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1142              	.LCFI41:
 1143              		.cfi_def_cfa_offset 20
 1144              		.cfi_offset 4, -20
 1145              		.cfi_offset 5, -16
 1146              		.cfi_offset 6, -12
 1147              		.cfi_offset 7, -8
 1148              		.cfi_offset 14, -4
 1149 0002 87B0     		sub	sp, sp, #28
 1150              	.LCFI42:
 1151              		.cfi_def_cfa_offset 48
 1152 0004 0668     		ldr	r6, [r0]
 1153              	.LVL121:
 1154              	.LBB96:
 1155              	.LBB97:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1156              		.loc 1 1226 11 view .LVU286
 1157 0006 4FF0FF37 		mov	r7, #-1
 1158 000a 0823     		movs	r3, #8
 1159 000c 0097     		str	r7, [sp]
 1160              	.LVL122:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1161              		.loc 1 1226 11 view .LVU287
 1162 000e 8DF81330 		strb	r3, [sp, #19]
 1163              	.LVL123:
ARM GAS  /tmp/cc9CDFEk.s 			page 47


1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1164              		.loc 1 1226 11 view .LVU288
 1165              	.LBE97:
 1166              	.LBI96:
1220:Src/bno055/bno055.c ****                            uint32_t buf_size) {
 1167              		.loc 1 1220 11 is_stmt 1 view .LVU289
 1168              	.LBB98:
1222:Src/bno055/bno055.c ****     // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
 1169              		.loc 1 1222 5 view .LVU290
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1170              		.loc 1 1226 5 view .LVU291
 1171              	.LBE98:
 1172              	.LBE96:
 141:Src/bno055/bno055.c ****     error_bno err;
 1173              		.loc 1 141 49 is_stmt 0 view .LVU292
 1174 0012 0446     		mov	r4, r0
 1175 0014 0D46     		mov	r5, r1
 1176              	.LBB101:
 1177              	.LBB99:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1178              		.loc 1 1226 11 view .LVU293
 1179 0016 0123     		movs	r3, #1
 1180              	.LVL124:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1181              		.loc 1 1226 11 view .LVU294
 1182 0018 8179     		ldrb	r1, [r0, #6]	@ zero_extendqisi2
 1183              	.LVL125:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1184              		.loc 1 1226 11 view .LVU295
 1185 001a 0391     		str	r1, [sp, #12]
 1186 001c 0DF11302 		add	r2, sp, #19
 1187              	.LVL126:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1188              		.loc 1 1226 11 view .LVU296
 1189 0020 3046     		mov	r0, r6
 1190              	.LVL127:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1191              		.loc 1 1226 11 view .LVU297
 1192 0022 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 1193              	.LVL128:
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 1194              		.loc 1 1227 5 is_stmt 1 view .LVU298
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 1195              		.loc 1 1227 8 is_stmt 0 view .LVU299
 1196 0026 0399     		ldr	r1, [sp, #12]
 1197 0028 10B1     		cbz	r0, .L46
 1198              	.L48:
 1199              	.LVL129:
1228:Src/bno055/bno055.c ****     }
 1200              		.loc 1 1228 16 view .LVU300
 1201 002a 0120     		movs	r0, #1
 1202              	.LBE99:
 1203              	.LBE101:
 157:Src/bno055/bno055.c **** 
 1204              		.loc 1 157 1 view .LVU301
 1205 002c 07B0     		add	sp, sp, #28
 1206              	.LCFI43:
ARM GAS  /tmp/cc9CDFEk.s 			page 48


 1207              		.cfi_remember_state
 1208              		.cfi_def_cfa_offset 20
 1209              		@ sp needed
 1210 002e F0BD     		pop	{r4, r5, r6, r7, pc}
 1211              	.LVL130:
 1212              	.L46:
 1213              	.LCFI44:
 1214              		.cfi_restore_state
 1215              	.LBB102:
 1216              	.LBB100:
1230:Src/bno055/bno055.c ****         HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 1217              		.loc 1 1230 5 is_stmt 1 view .LVU302
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1218              		.loc 1 1231 9 is_stmt 0 view .LVU303
 1219 0030 0097     		str	r7, [sp]
 1220 0032 0223     		movs	r3, #2
 1221 0034 3046     		mov	r0, r6
 1222              	.LVL131:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1223              		.loc 1 1231 9 view .LVU304
 1224 0036 05AA     		add	r2, sp, #20
 1225              	.LVL132:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1226              		.loc 1 1231 9 view .LVU305
 1227 0038 FFF7FEFF 		bl	HAL_I2C_Master_Receive
 1228              	.LVL133:
 1229              		.loc 1 1232 5 is_stmt 1 view .LVU306
 1230              		.loc 1 1232 8 is_stmt 0 view .LVU307
 1231 003c 0028     		cmp	r0, #0
 1232 003e F4D1     		bne	.L48
 1233              	.LVL134:
 1234              		.loc 1 1232 8 view .LVU308
 1235              	.LBE100:
 1236              	.LBE102:
 153:Src/bno055/bno055.c ****            ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 1237              		.loc 1 153 5 is_stmt 1 view .LVU309
 153:Src/bno055/bno055.c ****            ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 1238              		.loc 1 153 44 is_stmt 0 view .LVU310
 1239 0040 BDF91430 		ldrsh	r3, [sp, #20]
 1240 0044 07EE903A 		vmov	s15, r3	@ int
 155:Src/bno055/bno055.c ****     return BNO_OK;
 1241              		.loc 1 155 54 view .LVU311
 1242 0048 A37B     		ldrb	r3, [r4, #14]	@ zero_extendqisi2
 153:Src/bno055/bno055.c ****            ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 1243              		.loc 1 153 44 view .LVU312
 1244 004a F8EEE77A 		vcvt.f32.s32	s15, s15
 155:Src/bno055/bno055.c ****     return BNO_OK;
 1245              		.loc 1 155 54 view .LVU313
 1246 004e 1BB9     		cbnz	r3, .L49
 153:Src/bno055/bno055.c ****            ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 1247              		.loc 1 153 44 view .LVU314
 1248 0050 9FED037A 		vldr.32	s14, .L51
 1249 0054 C7EE877A 		vdiv.f32	s15, s15, s14
 1250              	.L49:
 153:Src/bno055/bno055.c ****            ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 1251              		.loc 1 153 10 view .LVU315
 1252 0058 C5ED007A 		vstr.32	s15, [r5]
ARM GAS  /tmp/cc9CDFEk.s 			page 49


 156:Src/bno055/bno055.c **** };
 1253              		.loc 1 156 5 is_stmt 1 view .LVU316
 157:Src/bno055/bno055.c **** 
 1254              		.loc 1 157 1 is_stmt 0 view .LVU317
 1255 005c 07B0     		add	sp, sp, #28
 1256              	.LCFI45:
 1257              		.cfi_def_cfa_offset 20
 1258              		@ sp needed
 1259 005e F0BD     		pop	{r4, r5, r6, r7, pc}
 1260              	.LVL135:
 1261              	.L52:
 157:Src/bno055/bno055.c **** 
 1262              		.loc 1 157 1 view .LVU318
 1263              		.align	2
 1264              	.L51:
 1265 0060 0000C842 		.word	1120403456
 1266              		.cfi_endproc
 1267              	.LFE135:
 1269              		.section	.text.bno055_acc_y,"ax",%progbits
 1270              		.align	1
 1271              		.p2align 2,,3
 1272              		.global	bno055_acc_y
 1273              		.syntax unified
 1274              		.thumb
 1275              		.thumb_func
 1276              		.fpu fpv4-sp-d16
 1278              	bno055_acc_y:
 1279              	.LVL136:
 1280              	.LFB136:
 176:Src/bno055/bno055.c ****     error_bno err;
 1281              		.loc 1 176 49 is_stmt 1 view -0
 1282              		.cfi_startproc
 1283              		@ args = 0, pretend = 0, frame = 16
 1284              		@ frame_needed = 0, uses_anonymous_args = 0
 177:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 1285              		.loc 1 177 5 view .LVU320
 183:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Y_LSB, data, 2)) != BNO_OK) {
 1286              		.loc 1 183 5 view .LVU321
 184:Src/bno055/bno055.c ****         return err;
 1287              		.loc 1 184 5 view .LVU322
 176:Src/bno055/bno055.c ****     error_bno err;
 1288              		.loc 1 176 49 is_stmt 0 view .LVU323
 1289 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1290              	.LCFI46:
 1291              		.cfi_def_cfa_offset 20
 1292              		.cfi_offset 4, -20
 1293              		.cfi_offset 5, -16
 1294              		.cfi_offset 6, -12
 1295              		.cfi_offset 7, -8
 1296              		.cfi_offset 14, -4
 1297 0002 87B0     		sub	sp, sp, #28
 1298              	.LCFI47:
 1299              		.cfi_def_cfa_offset 48
 1300 0004 0668     		ldr	r6, [r0]
 1301              	.LVL137:
 1302              	.LBB105:
 1303              	.LBB106:
ARM GAS  /tmp/cc9CDFEk.s 			page 50


1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1304              		.loc 1 1226 11 view .LVU324
 1305 0006 4FF0FF37 		mov	r7, #-1
 1306 000a 0A23     		movs	r3, #10
 1307 000c 0097     		str	r7, [sp]
 1308              	.LVL138:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1309              		.loc 1 1226 11 view .LVU325
 1310 000e 8DF81330 		strb	r3, [sp, #19]
 1311              	.LVL139:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1312              		.loc 1 1226 11 view .LVU326
 1313              	.LBE106:
 1314              	.LBI105:
1220:Src/bno055/bno055.c ****                            uint32_t buf_size) {
 1315              		.loc 1 1220 11 is_stmt 1 view .LVU327
 1316              	.LBB107:
1222:Src/bno055/bno055.c ****     // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
 1317              		.loc 1 1222 5 view .LVU328
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1318              		.loc 1 1226 5 view .LVU329
 1319              	.LBE107:
 1320              	.LBE105:
 176:Src/bno055/bno055.c ****     error_bno err;
 1321              		.loc 1 176 49 is_stmt 0 view .LVU330
 1322 0012 0446     		mov	r4, r0
 1323 0014 0D46     		mov	r5, r1
 1324              	.LBB110:
 1325              	.LBB108:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1326              		.loc 1 1226 11 view .LVU331
 1327 0016 0123     		movs	r3, #1
 1328              	.LVL140:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1329              		.loc 1 1226 11 view .LVU332
 1330 0018 8179     		ldrb	r1, [r0, #6]	@ zero_extendqisi2
 1331              	.LVL141:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1332              		.loc 1 1226 11 view .LVU333
 1333 001a 0391     		str	r1, [sp, #12]
 1334 001c 0DF11302 		add	r2, sp, #19
 1335              	.LVL142:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1336              		.loc 1 1226 11 view .LVU334
 1337 0020 3046     		mov	r0, r6
 1338              	.LVL143:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1339              		.loc 1 1226 11 view .LVU335
 1340 0022 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 1341              	.LVL144:
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 1342              		.loc 1 1227 5 is_stmt 1 view .LVU336
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 1343              		.loc 1 1227 8 is_stmt 0 view .LVU337
 1344 0026 0399     		ldr	r1, [sp, #12]
 1345 0028 10B1     		cbz	r0, .L54
 1346              	.L56:
ARM GAS  /tmp/cc9CDFEk.s 			page 51


 1347              	.LVL145:
1228:Src/bno055/bno055.c ****     }
 1348              		.loc 1 1228 16 view .LVU338
 1349 002a 0120     		movs	r0, #1
 1350              	.LBE108:
 1351              	.LBE110:
 192:Src/bno055/bno055.c **** 
 1352              		.loc 1 192 1 view .LVU339
 1353 002c 07B0     		add	sp, sp, #28
 1354              	.LCFI48:
 1355              		.cfi_remember_state
 1356              		.cfi_def_cfa_offset 20
 1357              		@ sp needed
 1358 002e F0BD     		pop	{r4, r5, r6, r7, pc}
 1359              	.LVL146:
 1360              	.L54:
 1361              	.LCFI49:
 1362              		.cfi_restore_state
 1363              	.LBB111:
 1364              	.LBB109:
1230:Src/bno055/bno055.c ****         HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 1365              		.loc 1 1230 5 is_stmt 1 view .LVU340
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1366              		.loc 1 1231 9 is_stmt 0 view .LVU341
 1367 0030 0097     		str	r7, [sp]
 1368 0032 0223     		movs	r3, #2
 1369 0034 3046     		mov	r0, r6
 1370              	.LVL147:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1371              		.loc 1 1231 9 view .LVU342
 1372 0036 05AA     		add	r2, sp, #20
 1373              	.LVL148:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1374              		.loc 1 1231 9 view .LVU343
 1375 0038 FFF7FEFF 		bl	HAL_I2C_Master_Receive
 1376              	.LVL149:
 1377              		.loc 1 1232 5 is_stmt 1 view .LVU344
 1378              		.loc 1 1232 8 is_stmt 0 view .LVU345
 1379 003c 0028     		cmp	r0, #0
 1380 003e F4D1     		bne	.L56
 1381              	.LVL150:
 1382              		.loc 1 1232 8 view .LVU346
 1383              	.LBE109:
 1384              	.LBE111:
 188:Src/bno055/bno055.c ****            ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 1385              		.loc 1 188 5 is_stmt 1 view .LVU347
 188:Src/bno055/bno055.c ****            ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 1386              		.loc 1 188 44 is_stmt 0 view .LVU348
 1387 0040 BDF91430 		ldrsh	r3, [sp, #20]
 1388 0044 07EE903A 		vmov	s15, r3	@ int
 190:Src/bno055/bno055.c ****     return BNO_OK;
 1389              		.loc 1 190 54 view .LVU349
 1390 0048 A37B     		ldrb	r3, [r4, #14]	@ zero_extendqisi2
 188:Src/bno055/bno055.c ****            ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 1391              		.loc 1 188 44 view .LVU350
 1392 004a F8EEE77A 		vcvt.f32.s32	s15, s15
 190:Src/bno055/bno055.c ****     return BNO_OK;
ARM GAS  /tmp/cc9CDFEk.s 			page 52


 1393              		.loc 1 190 54 view .LVU351
 1394 004e 1BB9     		cbnz	r3, .L57
 188:Src/bno055/bno055.c ****            ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 1395              		.loc 1 188 44 view .LVU352
 1396 0050 9FED037A 		vldr.32	s14, .L59
 1397 0054 C7EE877A 		vdiv.f32	s15, s15, s14
 1398              	.L57:
 188:Src/bno055/bno055.c ****            ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 1399              		.loc 1 188 10 view .LVU353
 1400 0058 C5ED007A 		vstr.32	s15, [r5]
 191:Src/bno055/bno055.c **** };
 1401              		.loc 1 191 5 is_stmt 1 view .LVU354
 192:Src/bno055/bno055.c **** 
 1402              		.loc 1 192 1 is_stmt 0 view .LVU355
 1403 005c 07B0     		add	sp, sp, #28
 1404              	.LCFI50:
 1405              		.cfi_def_cfa_offset 20
 1406              		@ sp needed
 1407 005e F0BD     		pop	{r4, r5, r6, r7, pc}
 1408              	.LVL151:
 1409              	.L60:
 192:Src/bno055/bno055.c **** 
 1410              		.loc 1 192 1 view .LVU356
 1411              		.align	2
 1412              	.L59:
 1413 0060 0000C842 		.word	1120403456
 1414              		.cfi_endproc
 1415              	.LFE136:
 1417              		.section	.text.bno055_acc_z,"ax",%progbits
 1418              		.align	1
 1419              		.p2align 2,,3
 1420              		.global	bno055_acc_z
 1421              		.syntax unified
 1422              		.thumb
 1423              		.thumb_func
 1424              		.fpu fpv4-sp-d16
 1426              	bno055_acc_z:
 1427              	.LVL152:
 1428              	.LFB137:
 211:Src/bno055/bno055.c ****     error_bno err;
 1429              		.loc 1 211 49 is_stmt 1 view -0
 1430              		.cfi_startproc
 1431              		@ args = 0, pretend = 0, frame = 16
 1432              		@ frame_needed = 0, uses_anonymous_args = 0
 212:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 1433              		.loc 1 212 5 view .LVU358
 218:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Z_LSB, data, 2)) != BNO_OK) {
 1434              		.loc 1 218 5 view .LVU359
 219:Src/bno055/bno055.c ****         return err;
 1435              		.loc 1 219 5 view .LVU360
 211:Src/bno055/bno055.c ****     error_bno err;
 1436              		.loc 1 211 49 is_stmt 0 view .LVU361
 1437 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1438              	.LCFI51:
 1439              		.cfi_def_cfa_offset 20
 1440              		.cfi_offset 4, -20
 1441              		.cfi_offset 5, -16
ARM GAS  /tmp/cc9CDFEk.s 			page 53


 1442              		.cfi_offset 6, -12
 1443              		.cfi_offset 7, -8
 1444              		.cfi_offset 14, -4
 1445 0002 87B0     		sub	sp, sp, #28
 1446              	.LCFI52:
 1447              		.cfi_def_cfa_offset 48
 1448 0004 0668     		ldr	r6, [r0]
 1449              	.LVL153:
 1450              	.LBB114:
 1451              	.LBB115:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1452              		.loc 1 1226 11 view .LVU362
 1453 0006 4FF0FF37 		mov	r7, #-1
 1454 000a 0C23     		movs	r3, #12
 1455 000c 0097     		str	r7, [sp]
 1456              	.LVL154:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1457              		.loc 1 1226 11 view .LVU363
 1458 000e 8DF81330 		strb	r3, [sp, #19]
 1459              	.LVL155:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1460              		.loc 1 1226 11 view .LVU364
 1461              	.LBE115:
 1462              	.LBI114:
1220:Src/bno055/bno055.c ****                            uint32_t buf_size) {
 1463              		.loc 1 1220 11 is_stmt 1 view .LVU365
 1464              	.LBB116:
1222:Src/bno055/bno055.c ****     // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
 1465              		.loc 1 1222 5 view .LVU366
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1466              		.loc 1 1226 5 view .LVU367
 1467              	.LBE116:
 1468              	.LBE114:
 211:Src/bno055/bno055.c ****     error_bno err;
 1469              		.loc 1 211 49 is_stmt 0 view .LVU368
 1470 0012 0446     		mov	r4, r0
 1471 0014 0D46     		mov	r5, r1
 1472              	.LBB119:
 1473              	.LBB117:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1474              		.loc 1 1226 11 view .LVU369
 1475 0016 0123     		movs	r3, #1
 1476              	.LVL156:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1477              		.loc 1 1226 11 view .LVU370
 1478 0018 8179     		ldrb	r1, [r0, #6]	@ zero_extendqisi2
 1479              	.LVL157:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1480              		.loc 1 1226 11 view .LVU371
 1481 001a 0391     		str	r1, [sp, #12]
 1482 001c 0DF11302 		add	r2, sp, #19
 1483              	.LVL158:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1484              		.loc 1 1226 11 view .LVU372
 1485 0020 3046     		mov	r0, r6
 1486              	.LVL159:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
ARM GAS  /tmp/cc9CDFEk.s 			page 54


 1487              		.loc 1 1226 11 view .LVU373
 1488 0022 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 1489              	.LVL160:
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 1490              		.loc 1 1227 5 is_stmt 1 view .LVU374
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 1491              		.loc 1 1227 8 is_stmt 0 view .LVU375
 1492 0026 0399     		ldr	r1, [sp, #12]
 1493 0028 10B1     		cbz	r0, .L62
 1494              	.L64:
 1495              	.LVL161:
1228:Src/bno055/bno055.c ****     }
 1496              		.loc 1 1228 16 view .LVU376
 1497 002a 0120     		movs	r0, #1
 1498              	.LBE117:
 1499              	.LBE119:
 227:Src/bno055/bno055.c **** 
 1500              		.loc 1 227 1 view .LVU377
 1501 002c 07B0     		add	sp, sp, #28
 1502              	.LCFI53:
 1503              		.cfi_remember_state
 1504              		.cfi_def_cfa_offset 20
 1505              		@ sp needed
 1506 002e F0BD     		pop	{r4, r5, r6, r7, pc}
 1507              	.LVL162:
 1508              	.L62:
 1509              	.LCFI54:
 1510              		.cfi_restore_state
 1511              	.LBB120:
 1512              	.LBB118:
1230:Src/bno055/bno055.c ****         HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 1513              		.loc 1 1230 5 is_stmt 1 view .LVU378
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1514              		.loc 1 1231 9 is_stmt 0 view .LVU379
 1515 0030 0097     		str	r7, [sp]
 1516 0032 0223     		movs	r3, #2
 1517 0034 3046     		mov	r0, r6
 1518              	.LVL163:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1519              		.loc 1 1231 9 view .LVU380
 1520 0036 05AA     		add	r2, sp, #20
 1521              	.LVL164:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1522              		.loc 1 1231 9 view .LVU381
 1523 0038 FFF7FEFF 		bl	HAL_I2C_Master_Receive
 1524              	.LVL165:
 1525              		.loc 1 1232 5 is_stmt 1 view .LVU382
 1526              		.loc 1 1232 8 is_stmt 0 view .LVU383
 1527 003c 0028     		cmp	r0, #0
 1528 003e F4D1     		bne	.L64
 1529              	.LVL166:
 1530              		.loc 1 1232 8 view .LVU384
 1531              	.LBE118:
 1532              	.LBE120:
 223:Src/bno055/bno055.c ****            ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 1533              		.loc 1 223 5 is_stmt 1 view .LVU385
 223:Src/bno055/bno055.c ****            ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
ARM GAS  /tmp/cc9CDFEk.s 			page 55


 1534              		.loc 1 223 44 is_stmt 0 view .LVU386
 1535 0040 BDF91430 		ldrsh	r3, [sp, #20]
 1536 0044 07EE903A 		vmov	s15, r3	@ int
 225:Src/bno055/bno055.c ****     return BNO_OK;
 1537              		.loc 1 225 54 view .LVU387
 1538 0048 A37B     		ldrb	r3, [r4, #14]	@ zero_extendqisi2
 223:Src/bno055/bno055.c ****            ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 1539              		.loc 1 223 44 view .LVU388
 1540 004a F8EEE77A 		vcvt.f32.s32	s15, s15
 225:Src/bno055/bno055.c ****     return BNO_OK;
 1541              		.loc 1 225 54 view .LVU389
 1542 004e 1BB9     		cbnz	r3, .L65
 223:Src/bno055/bno055.c ****            ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 1543              		.loc 1 223 44 view .LVU390
 1544 0050 9FED037A 		vldr.32	s14, .L67
 1545 0054 C7EE877A 		vdiv.f32	s15, s15, s14
 1546              	.L65:
 223:Src/bno055/bno055.c ****            ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 1547              		.loc 1 223 10 view .LVU391
 1548 0058 C5ED007A 		vstr.32	s15, [r5]
 226:Src/bno055/bno055.c **** };
 1549              		.loc 1 226 5 is_stmt 1 view .LVU392
 227:Src/bno055/bno055.c **** 
 1550              		.loc 1 227 1 is_stmt 0 view .LVU393
 1551 005c 07B0     		add	sp, sp, #28
 1552              	.LCFI55:
 1553              		.cfi_def_cfa_offset 20
 1554              		@ sp needed
 1555 005e F0BD     		pop	{r4, r5, r6, r7, pc}
 1556              	.LVL167:
 1557              	.L68:
 227:Src/bno055/bno055.c **** 
 1558              		.loc 1 227 1 view .LVU394
 1559              		.align	2
 1560              	.L67:
 1561 0060 0000C842 		.word	1120403456
 1562              		.cfi_endproc
 1563              	.LFE137:
 1565              		.section	.text.bno055_linear_acc_x,"ax",%progbits
 1566              		.align	1
 1567              		.p2align 2,,3
 1568              		.global	bno055_linear_acc_x
 1569              		.syntax unified
 1570              		.thumb
 1571              		.thumb_func
 1572              		.fpu fpv4-sp-d16
 1574              	bno055_linear_acc_x:
 1575              	.LVL168:
 1576              	.LFB139:
 284:Src/bno055/bno055.c ****     error_bno err;
 1577              		.loc 1 284 56 is_stmt 1 view -0
 1578              		.cfi_startproc
 1579              		@ args = 0, pretend = 0, frame = 16
 1580              		@ frame_needed = 0, uses_anonymous_args = 0
 285:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 1581              		.loc 1 285 5 view .LVU396
 291:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 2)) != BNO_OK) {
ARM GAS  /tmp/cc9CDFEk.s 			page 56


 1582              		.loc 1 291 5 view .LVU397
 292:Src/bno055/bno055.c ****         return err;
 1583              		.loc 1 292 5 view .LVU398
 284:Src/bno055/bno055.c ****     error_bno err;
 1584              		.loc 1 284 56 is_stmt 0 view .LVU399
 1585 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1586              	.LCFI56:
 1587              		.cfi_def_cfa_offset 20
 1588              		.cfi_offset 4, -20
 1589              		.cfi_offset 5, -16
 1590              		.cfi_offset 6, -12
 1591              		.cfi_offset 7, -8
 1592              		.cfi_offset 14, -4
 1593 0002 87B0     		sub	sp, sp, #28
 1594              	.LCFI57:
 1595              		.cfi_def_cfa_offset 48
 1596 0004 0668     		ldr	r6, [r0]
 1597              	.LVL169:
 1598              	.LBB123:
 1599              	.LBB124:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1600              		.loc 1 1226 11 view .LVU400
 1601 0006 4FF0FF37 		mov	r7, #-1
 1602 000a 2823     		movs	r3, #40
 1603 000c 0097     		str	r7, [sp]
 1604              	.LVL170:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1605              		.loc 1 1226 11 view .LVU401
 1606 000e 8DF81330 		strb	r3, [sp, #19]
 1607              	.LVL171:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1608              		.loc 1 1226 11 view .LVU402
 1609              	.LBE124:
 1610              	.LBI123:
1220:Src/bno055/bno055.c ****                            uint32_t buf_size) {
 1611              		.loc 1 1220 11 is_stmt 1 view .LVU403
 1612              	.LBB125:
1222:Src/bno055/bno055.c ****     // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
 1613              		.loc 1 1222 5 view .LVU404
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1614              		.loc 1 1226 5 view .LVU405
 1615              	.LBE125:
 1616              	.LBE123:
 284:Src/bno055/bno055.c ****     error_bno err;
 1617              		.loc 1 284 56 is_stmt 0 view .LVU406
 1618 0012 0446     		mov	r4, r0
 1619 0014 0D46     		mov	r5, r1
 1620              	.LBB128:
 1621              	.LBB126:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1622              		.loc 1 1226 11 view .LVU407
 1623 0016 0123     		movs	r3, #1
 1624              	.LVL172:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1625              		.loc 1 1226 11 view .LVU408
 1626 0018 8179     		ldrb	r1, [r0, #6]	@ zero_extendqisi2
 1627              	.LVL173:
ARM GAS  /tmp/cc9CDFEk.s 			page 57


1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1628              		.loc 1 1226 11 view .LVU409
 1629 001a 0391     		str	r1, [sp, #12]
 1630 001c 0DF11302 		add	r2, sp, #19
 1631              	.LVL174:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1632              		.loc 1 1226 11 view .LVU410
 1633 0020 3046     		mov	r0, r6
 1634              	.LVL175:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1635              		.loc 1 1226 11 view .LVU411
 1636 0022 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 1637              	.LVL176:
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 1638              		.loc 1 1227 5 is_stmt 1 view .LVU412
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 1639              		.loc 1 1227 8 is_stmt 0 view .LVU413
 1640 0026 0399     		ldr	r1, [sp, #12]
 1641 0028 10B1     		cbz	r0, .L70
 1642              	.L72:
 1643              	.LVL177:
1228:Src/bno055/bno055.c ****     }
 1644              		.loc 1 1228 16 view .LVU414
 1645 002a 0120     		movs	r0, #1
 1646              	.LBE126:
 1647              	.LBE128:
 300:Src/bno055/bno055.c **** 
 1648              		.loc 1 300 1 view .LVU415
 1649 002c 07B0     		add	sp, sp, #28
 1650              	.LCFI58:
 1651              		.cfi_remember_state
 1652              		.cfi_def_cfa_offset 20
 1653              		@ sp needed
 1654 002e F0BD     		pop	{r4, r5, r6, r7, pc}
 1655              	.LVL178:
 1656              	.L70:
 1657              	.LCFI59:
 1658              		.cfi_restore_state
 1659              	.LBB129:
 1660              	.LBB127:
1230:Src/bno055/bno055.c ****         HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 1661              		.loc 1 1230 5 is_stmt 1 view .LVU416
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1662              		.loc 1 1231 9 is_stmt 0 view .LVU417
 1663 0030 0097     		str	r7, [sp]
 1664 0032 0223     		movs	r3, #2
 1665 0034 3046     		mov	r0, r6
 1666              	.LVL179:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1667              		.loc 1 1231 9 view .LVU418
 1668 0036 05AA     		add	r2, sp, #20
 1669              	.LVL180:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1670              		.loc 1 1231 9 view .LVU419
 1671 0038 FFF7FEFF 		bl	HAL_I2C_Master_Receive
 1672              	.LVL181:
 1673              		.loc 1 1232 5 is_stmt 1 view .LVU420
ARM GAS  /tmp/cc9CDFEk.s 			page 58


 1674              		.loc 1 1232 8 is_stmt 0 view .LVU421
 1675 003c 0028     		cmp	r0, #0
 1676 003e F4D1     		bne	.L72
 1677              	.LVL182:
 1678              		.loc 1 1232 8 view .LVU422
 1679              	.LBE127:
 1680              	.LBE129:
 296:Src/bno055/bno055.c ****            ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 1681              		.loc 1 296 5 is_stmt 1 view .LVU423
 296:Src/bno055/bno055.c ****            ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 1682              		.loc 1 296 44 is_stmt 0 view .LVU424
 1683 0040 BDF91430 		ldrsh	r3, [sp, #20]
 1684 0044 07EE903A 		vmov	s15, r3	@ int
 298:Src/bno055/bno055.c ****     return BNO_OK;
 1685              		.loc 1 298 54 view .LVU425
 1686 0048 A37B     		ldrb	r3, [r4, #14]	@ zero_extendqisi2
 296:Src/bno055/bno055.c ****            ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 1687              		.loc 1 296 44 view .LVU426
 1688 004a F8EEE77A 		vcvt.f32.s32	s15, s15
 298:Src/bno055/bno055.c ****     return BNO_OK;
 1689              		.loc 1 298 54 view .LVU427
 1690 004e 1BB9     		cbnz	r3, .L73
 296:Src/bno055/bno055.c ****            ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 1691              		.loc 1 296 44 view .LVU428
 1692 0050 9FED037A 		vldr.32	s14, .L75
 1693 0054 C7EE877A 		vdiv.f32	s15, s15, s14
 1694              	.L73:
 296:Src/bno055/bno055.c ****            ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 1695              		.loc 1 296 10 view .LVU429
 1696 0058 C5ED007A 		vstr.32	s15, [r5]
 299:Src/bno055/bno055.c **** };
 1697              		.loc 1 299 5 is_stmt 1 view .LVU430
 300:Src/bno055/bno055.c **** 
 1698              		.loc 1 300 1 is_stmt 0 view .LVU431
 1699 005c 07B0     		add	sp, sp, #28
 1700              	.LCFI60:
 1701              		.cfi_def_cfa_offset 20
 1702              		@ sp needed
 1703 005e F0BD     		pop	{r4, r5, r6, r7, pc}
 1704              	.LVL183:
 1705              	.L76:
 300:Src/bno055/bno055.c **** 
 1706              		.loc 1 300 1 view .LVU432
 1707              		.align	2
 1708              	.L75:
 1709 0060 0000C842 		.word	1120403456
 1710              		.cfi_endproc
 1711              	.LFE139:
 1713              		.section	.text.bno055_linear_acc_y,"ax",%progbits
 1714              		.align	1
 1715              		.p2align 2,,3
 1716              		.global	bno055_linear_acc_y
 1717              		.syntax unified
 1718              		.thumb
 1719              		.thumb_func
 1720              		.fpu fpv4-sp-d16
 1722              	bno055_linear_acc_y:
ARM GAS  /tmp/cc9CDFEk.s 			page 59


 1723              	.LVL184:
 1724              	.LFB140:
 319:Src/bno055/bno055.c ****     error_bno err;
 1725              		.loc 1 319 56 is_stmt 1 view -0
 1726              		.cfi_startproc
 1727              		@ args = 0, pretend = 0, frame = 16
 1728              		@ frame_needed = 0, uses_anonymous_args = 0
 320:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 1729              		.loc 1 320 5 view .LVU434
 326:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 1730              		.loc 1 326 5 view .LVU435
 327:Src/bno055/bno055.c ****         return err;
 1731              		.loc 1 327 5 view .LVU436
 319:Src/bno055/bno055.c ****     error_bno err;
 1732              		.loc 1 319 56 is_stmt 0 view .LVU437
 1733 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1734              	.LCFI61:
 1735              		.cfi_def_cfa_offset 20
 1736              		.cfi_offset 4, -20
 1737              		.cfi_offset 5, -16
 1738              		.cfi_offset 6, -12
 1739              		.cfi_offset 7, -8
 1740              		.cfi_offset 14, -4
 1741 0002 87B0     		sub	sp, sp, #28
 1742              	.LCFI62:
 1743              		.cfi_def_cfa_offset 48
 1744 0004 0668     		ldr	r6, [r0]
 1745              	.LVL185:
 1746              	.LBB132:
 1747              	.LBB133:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1748              		.loc 1 1226 11 view .LVU438
 1749 0006 4FF0FF37 		mov	r7, #-1
 1750 000a 2A23     		movs	r3, #42
 1751 000c 0097     		str	r7, [sp]
 1752              	.LVL186:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1753              		.loc 1 1226 11 view .LVU439
 1754 000e 8DF81330 		strb	r3, [sp, #19]
 1755              	.LVL187:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1756              		.loc 1 1226 11 view .LVU440
 1757              	.LBE133:
 1758              	.LBI132:
1220:Src/bno055/bno055.c ****                            uint32_t buf_size) {
 1759              		.loc 1 1220 11 is_stmt 1 view .LVU441
 1760              	.LBB134:
1222:Src/bno055/bno055.c ****     // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
 1761              		.loc 1 1222 5 view .LVU442
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1762              		.loc 1 1226 5 view .LVU443
 1763              	.LBE134:
 1764              	.LBE132:
 319:Src/bno055/bno055.c ****     error_bno err;
 1765              		.loc 1 319 56 is_stmt 0 view .LVU444
 1766 0012 0446     		mov	r4, r0
 1767 0014 0D46     		mov	r5, r1
ARM GAS  /tmp/cc9CDFEk.s 			page 60


 1768              	.LBB137:
 1769              	.LBB135:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1770              		.loc 1 1226 11 view .LVU445
 1771 0016 0123     		movs	r3, #1
 1772              	.LVL188:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1773              		.loc 1 1226 11 view .LVU446
 1774 0018 8179     		ldrb	r1, [r0, #6]	@ zero_extendqisi2
 1775              	.LVL189:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1776              		.loc 1 1226 11 view .LVU447
 1777 001a 0391     		str	r1, [sp, #12]
 1778 001c 0DF11302 		add	r2, sp, #19
 1779              	.LVL190:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1780              		.loc 1 1226 11 view .LVU448
 1781 0020 3046     		mov	r0, r6
 1782              	.LVL191:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1783              		.loc 1 1226 11 view .LVU449
 1784 0022 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 1785              	.LVL192:
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 1786              		.loc 1 1227 5 is_stmt 1 view .LVU450
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 1787              		.loc 1 1227 8 is_stmt 0 view .LVU451
 1788 0026 0399     		ldr	r1, [sp, #12]
 1789 0028 10B1     		cbz	r0, .L78
 1790              	.L80:
 1791              	.LVL193:
1228:Src/bno055/bno055.c ****     }
 1792              		.loc 1 1228 16 view .LVU452
 1793 002a 0120     		movs	r0, #1
 1794              	.LBE135:
 1795              	.LBE137:
 335:Src/bno055/bno055.c **** 
 1796              		.loc 1 335 1 view .LVU453
 1797 002c 07B0     		add	sp, sp, #28
 1798              	.LCFI63:
 1799              		.cfi_remember_state
 1800              		.cfi_def_cfa_offset 20
 1801              		@ sp needed
 1802 002e F0BD     		pop	{r4, r5, r6, r7, pc}
 1803              	.LVL194:
 1804              	.L78:
 1805              	.LCFI64:
 1806              		.cfi_restore_state
 1807              	.LBB138:
 1808              	.LBB136:
1230:Src/bno055/bno055.c ****         HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 1809              		.loc 1 1230 5 is_stmt 1 view .LVU454
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1810              		.loc 1 1231 9 is_stmt 0 view .LVU455
 1811 0030 0097     		str	r7, [sp]
 1812 0032 0223     		movs	r3, #2
 1813 0034 3046     		mov	r0, r6
ARM GAS  /tmp/cc9CDFEk.s 			page 61


 1814              	.LVL195:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1815              		.loc 1 1231 9 view .LVU456
 1816 0036 05AA     		add	r2, sp, #20
 1817              	.LVL196:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1818              		.loc 1 1231 9 view .LVU457
 1819 0038 FFF7FEFF 		bl	HAL_I2C_Master_Receive
 1820              	.LVL197:
 1821              		.loc 1 1232 5 is_stmt 1 view .LVU458
 1822              		.loc 1 1232 8 is_stmt 0 view .LVU459
 1823 003c 0028     		cmp	r0, #0
 1824 003e F4D1     		bne	.L80
 1825              	.LVL198:
 1826              		.loc 1 1232 8 view .LVU460
 1827              	.LBE136:
 1828              	.LBE138:
 331:Src/bno055/bno055.c ****            ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 1829              		.loc 1 331 5 is_stmt 1 view .LVU461
 331:Src/bno055/bno055.c ****            ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 1830              		.loc 1 331 44 is_stmt 0 view .LVU462
 1831 0040 BDF91430 		ldrsh	r3, [sp, #20]
 1832 0044 07EE903A 		vmov	s15, r3	@ int
 333:Src/bno055/bno055.c ****     return BNO_OK;
 1833              		.loc 1 333 54 view .LVU463
 1834 0048 A37B     		ldrb	r3, [r4, #14]	@ zero_extendqisi2
 331:Src/bno055/bno055.c ****            ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 1835              		.loc 1 331 44 view .LVU464
 1836 004a F8EEE77A 		vcvt.f32.s32	s15, s15
 333:Src/bno055/bno055.c ****     return BNO_OK;
 1837              		.loc 1 333 54 view .LVU465
 1838 004e 1BB9     		cbnz	r3, .L81
 331:Src/bno055/bno055.c ****            ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 1839              		.loc 1 331 44 view .LVU466
 1840 0050 9FED037A 		vldr.32	s14, .L83
 1841 0054 C7EE877A 		vdiv.f32	s15, s15, s14
 1842              	.L81:
 331:Src/bno055/bno055.c ****            ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 1843              		.loc 1 331 10 view .LVU467
 1844 0058 C5ED007A 		vstr.32	s15, [r5]
 334:Src/bno055/bno055.c **** };
 1845              		.loc 1 334 5 is_stmt 1 view .LVU468
 335:Src/bno055/bno055.c **** 
 1846              		.loc 1 335 1 is_stmt 0 view .LVU469
 1847 005c 07B0     		add	sp, sp, #28
 1848              	.LCFI65:
 1849              		.cfi_def_cfa_offset 20
 1850              		@ sp needed
 1851 005e F0BD     		pop	{r4, r5, r6, r7, pc}
 1852              	.LVL199:
 1853              	.L84:
 335:Src/bno055/bno055.c **** 
 1854              		.loc 1 335 1 view .LVU470
 1855              		.align	2
 1856              	.L83:
 1857 0060 0000C842 		.word	1120403456
 1858              		.cfi_endproc
ARM GAS  /tmp/cc9CDFEk.s 			page 62


 1859              	.LFE140:
 1861              		.section	.text.bno055_gravity_x,"ax",%progbits
 1862              		.align	1
 1863              		.p2align 2,,3
 1864              		.global	bno055_gravity_x
 1865              		.syntax unified
 1866              		.thumb
 1867              		.thumb_func
 1868              		.fpu fpv4-sp-d16
 1870              	bno055_gravity_x:
 1871              	.LVL200:
 1872              	.LFB151:
 710:Src/bno055/bno055.c ****     error_bno err;
 1873              		.loc 1 710 53 is_stmt 1 view -0
 1874              		.cfi_startproc
 1875              		@ args = 0, pretend = 0, frame = 16
 1876              		@ frame_needed = 0, uses_anonymous_args = 0
 711:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 1877              		.loc 1 711 5 view .LVU472
 717:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 2)) != BNO_OK) {
 1878              		.loc 1 717 5 view .LVU473
 718:Src/bno055/bno055.c ****         return err;
 1879              		.loc 1 718 5 view .LVU474
 710:Src/bno055/bno055.c ****     error_bno err;
 1880              		.loc 1 710 53 is_stmt 0 view .LVU475
 1881 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1882              	.LCFI66:
 1883              		.cfi_def_cfa_offset 20
 1884              		.cfi_offset 4, -20
 1885              		.cfi_offset 5, -16
 1886              		.cfi_offset 6, -12
 1887              		.cfi_offset 7, -8
 1888              		.cfi_offset 14, -4
 1889 0002 87B0     		sub	sp, sp, #28
 1890              	.LCFI67:
 1891              		.cfi_def_cfa_offset 48
 1892 0004 0668     		ldr	r6, [r0]
 1893              	.LVL201:
 1894              	.LBB141:
 1895              	.LBB142:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1896              		.loc 1 1226 11 view .LVU476
 1897 0006 4FF0FF37 		mov	r7, #-1
 1898 000a 2E23     		movs	r3, #46
 1899 000c 0097     		str	r7, [sp]
 1900              	.LVL202:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1901              		.loc 1 1226 11 view .LVU477
 1902 000e 8DF81330 		strb	r3, [sp, #19]
 1903              	.LVL203:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1904              		.loc 1 1226 11 view .LVU478
 1905              	.LBE142:
 1906              	.LBI141:
1220:Src/bno055/bno055.c ****                            uint32_t buf_size) {
 1907              		.loc 1 1220 11 is_stmt 1 view .LVU479
 1908              	.LBB143:
ARM GAS  /tmp/cc9CDFEk.s 			page 63


1222:Src/bno055/bno055.c ****     // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
 1909              		.loc 1 1222 5 view .LVU480
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1910              		.loc 1 1226 5 view .LVU481
 1911              	.LBE143:
 1912              	.LBE141:
 710:Src/bno055/bno055.c ****     error_bno err;
 1913              		.loc 1 710 53 is_stmt 0 view .LVU482
 1914 0012 0446     		mov	r4, r0
 1915 0014 0D46     		mov	r5, r1
 1916              	.LBB146:
 1917              	.LBB144:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1918              		.loc 1 1226 11 view .LVU483
 1919 0016 0123     		movs	r3, #1
 1920              	.LVL204:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1921              		.loc 1 1226 11 view .LVU484
 1922 0018 8179     		ldrb	r1, [r0, #6]	@ zero_extendqisi2
 1923              	.LVL205:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1924              		.loc 1 1226 11 view .LVU485
 1925 001a 0391     		str	r1, [sp, #12]
 1926 001c 0DF11302 		add	r2, sp, #19
 1927              	.LVL206:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1928              		.loc 1 1226 11 view .LVU486
 1929 0020 3046     		mov	r0, r6
 1930              	.LVL207:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1931              		.loc 1 1226 11 view .LVU487
 1932 0022 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 1933              	.LVL208:
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 1934              		.loc 1 1227 5 is_stmt 1 view .LVU488
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 1935              		.loc 1 1227 8 is_stmt 0 view .LVU489
 1936 0026 0399     		ldr	r1, [sp, #12]
 1937 0028 10B1     		cbz	r0, .L86
 1938              	.L88:
 1939              	.LVL209:
1228:Src/bno055/bno055.c ****     }
 1940              		.loc 1 1228 16 view .LVU490
 1941 002a 0120     		movs	r0, #1
 1942              	.LBE144:
 1943              	.LBE146:
 725:Src/bno055/bno055.c **** 
 1944              		.loc 1 725 1 view .LVU491
 1945 002c 07B0     		add	sp, sp, #28
 1946              	.LCFI68:
 1947              		.cfi_remember_state
 1948              		.cfi_def_cfa_offset 20
 1949              		@ sp needed
 1950 002e F0BD     		pop	{r4, r5, r6, r7, pc}
 1951              	.LVL210:
 1952              	.L86:
 1953              	.LCFI69:
ARM GAS  /tmp/cc9CDFEk.s 			page 64


 1954              		.cfi_restore_state
 1955              	.LBB147:
 1956              	.LBB145:
1230:Src/bno055/bno055.c ****         HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 1957              		.loc 1 1230 5 is_stmt 1 view .LVU492
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1958              		.loc 1 1231 9 is_stmt 0 view .LVU493
 1959 0030 0097     		str	r7, [sp]
 1960 0032 0223     		movs	r3, #2
 1961 0034 3046     		mov	r0, r6
 1962              	.LVL211:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1963              		.loc 1 1231 9 view .LVU494
 1964 0036 05AA     		add	r2, sp, #20
 1965              	.LVL212:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 1966              		.loc 1 1231 9 view .LVU495
 1967 0038 FFF7FEFF 		bl	HAL_I2C_Master_Receive
 1968              	.LVL213:
 1969              		.loc 1 1232 5 is_stmt 1 view .LVU496
 1970              		.loc 1 1232 8 is_stmt 0 view .LVU497
 1971 003c 0028     		cmp	r0, #0
 1972 003e F4D1     		bne	.L88
 1973              	.LVL214:
 1974              		.loc 1 1232 8 view .LVU498
 1975              	.LBE145:
 1976              	.LBE147:
 721:Src/bno055/bno055.c ****                                                          : BNO_ACC_SCALE_MG;
 1977              		.loc 1 721 5 is_stmt 1 view .LVU499
 723:Src/bno055/bno055.c ****     return BNO_OK;
 1978              		.loc 1 723 44 is_stmt 0 view .LVU500
 1979 0040 BDF91420 		ldrsh	r2, [sp, #20]
 722:Src/bno055/bno055.c ****     *buf = (s16)((data[1] << 8) | data[0]) / scale;
 1980              		.loc 1 722 58 view .LVU501
 1981 0044 A37B     		ldrb	r3, [r4, #14]	@ zero_extendqisi2
 1982 0046 DFED097A 		vldr.32	s15, .L92
 723:Src/bno055/bno055.c ****     return BNO_OK;
 1983              		.loc 1 723 44 view .LVU502
 1984 004a 07EE102A 		vmov	s14, r2	@ int
 722:Src/bno055/bno055.c ****     *buf = (s16)((data[1] << 8) | data[0]) / scale;
 1985              		.loc 1 722 58 view .LVU503
 1986 004e F7EE006A 		vmov.f32	s13, #1.0e+0
 723:Src/bno055/bno055.c ****     return BNO_OK;
 1987              		.loc 1 723 44 view .LVU504
 1988 0052 B8EEC77A 		vcvt.f32.s32	s14, s14
 722:Src/bno055/bno055.c ****     *buf = (s16)((data[1] << 8) | data[0]) / scale;
 1989              		.loc 1 722 58 view .LVU505
 1990 0056 002B     		cmp	r3, #0
 1991 0058 18BF     		it	ne
 1992 005a F0EE667A 		vmovne.f32	s15, s13
 1993              	.LVL215:
 723:Src/bno055/bno055.c ****     return BNO_OK;
 1994              		.loc 1 723 5 is_stmt 1 view .LVU506
 723:Src/bno055/bno055.c ****     return BNO_OK;
 1995              		.loc 1 723 44 is_stmt 0 view .LVU507
 1996 005e C7EE276A 		vdiv.f32	s13, s14, s15
 723:Src/bno055/bno055.c ****     return BNO_OK;
ARM GAS  /tmp/cc9CDFEk.s 			page 65


 1997              		.loc 1 723 10 view .LVU508
 1998 0062 C5ED006A 		vstr.32	s13, [r5]
 724:Src/bno055/bno055.c **** }
 1999              		.loc 1 724 5 is_stmt 1 view .LVU509
 725:Src/bno055/bno055.c **** 
 2000              		.loc 1 725 1 is_stmt 0 view .LVU510
 2001 0066 07B0     		add	sp, sp, #28
 2002              	.LCFI70:
 2003              		.cfi_def_cfa_offset 20
 2004              		@ sp needed
 2005 0068 F0BD     		pop	{r4, r5, r6, r7, pc}
 2006              	.LVL216:
 2007              	.L93:
 725:Src/bno055/bno055.c **** 
 2008              		.loc 1 725 1 view .LVU511
 2009 006a 00BF     		.align	2
 2010              	.L92:
 2011 006c 0000C842 		.word	1120403456
 2012              		.cfi_endproc
 2013              	.LFE151:
 2015              		.section	.text.bno055_gravity_y,"ax",%progbits
 2016              		.align	1
 2017              		.p2align 2,,3
 2018              		.global	bno055_gravity_y
 2019              		.syntax unified
 2020              		.thumb
 2021              		.thumb_func
 2022              		.fpu fpv4-sp-d16
 2024              	bno055_gravity_y:
 2025              	.LVL217:
 2026              	.LFB152:
 744:Src/bno055/bno055.c ****     error_bno err;
 2027              		.loc 1 744 53 is_stmt 1 view -0
 2028              		.cfi_startproc
 2029              		@ args = 0, pretend = 0, frame = 16
 2030              		@ frame_needed = 0, uses_anonymous_args = 0
 745:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 2031              		.loc 1 745 5 view .LVU513
 751:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Y_LSB, data, 2)) != BNO_OK) {
 2032              		.loc 1 751 5 view .LVU514
 752:Src/bno055/bno055.c ****         return err;
 2033              		.loc 1 752 5 view .LVU515
 744:Src/bno055/bno055.c ****     error_bno err;
 2034              		.loc 1 744 53 is_stmt 0 view .LVU516
 2035 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2036              	.LCFI71:
 2037              		.cfi_def_cfa_offset 20
 2038              		.cfi_offset 4, -20
 2039              		.cfi_offset 5, -16
 2040              		.cfi_offset 6, -12
 2041              		.cfi_offset 7, -8
 2042              		.cfi_offset 14, -4
 2043 0002 87B0     		sub	sp, sp, #28
 2044              	.LCFI72:
 2045              		.cfi_def_cfa_offset 48
 2046 0004 0668     		ldr	r6, [r0]
 2047              	.LVL218:
ARM GAS  /tmp/cc9CDFEk.s 			page 66


 2048              	.LBB150:
 2049              	.LBB151:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2050              		.loc 1 1226 11 view .LVU517
 2051 0006 4FF0FF37 		mov	r7, #-1
 2052 000a 3023     		movs	r3, #48
 2053 000c 0097     		str	r7, [sp]
 2054              	.LVL219:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2055              		.loc 1 1226 11 view .LVU518
 2056 000e 8DF81330 		strb	r3, [sp, #19]
 2057              	.LVL220:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2058              		.loc 1 1226 11 view .LVU519
 2059              	.LBE151:
 2060              	.LBI150:
1220:Src/bno055/bno055.c ****                            uint32_t buf_size) {
 2061              		.loc 1 1220 11 is_stmt 1 view .LVU520
 2062              	.LBB152:
1222:Src/bno055/bno055.c ****     // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
 2063              		.loc 1 1222 5 view .LVU521
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2064              		.loc 1 1226 5 view .LVU522
 2065              	.LBE152:
 2066              	.LBE150:
 744:Src/bno055/bno055.c ****     error_bno err;
 2067              		.loc 1 744 53 is_stmt 0 view .LVU523
 2068 0012 0446     		mov	r4, r0
 2069 0014 0D46     		mov	r5, r1
 2070              	.LBB155:
 2071              	.LBB153:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2072              		.loc 1 1226 11 view .LVU524
 2073 0016 0123     		movs	r3, #1
 2074              	.LVL221:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2075              		.loc 1 1226 11 view .LVU525
 2076 0018 8179     		ldrb	r1, [r0, #6]	@ zero_extendqisi2
 2077              	.LVL222:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2078              		.loc 1 1226 11 view .LVU526
 2079 001a 0391     		str	r1, [sp, #12]
 2080 001c 0DF11302 		add	r2, sp, #19
 2081              	.LVL223:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2082              		.loc 1 1226 11 view .LVU527
 2083 0020 3046     		mov	r0, r6
 2084              	.LVL224:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2085              		.loc 1 1226 11 view .LVU528
 2086 0022 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 2087              	.LVL225:
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 2088              		.loc 1 1227 5 is_stmt 1 view .LVU529
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 2089              		.loc 1 1227 8 is_stmt 0 view .LVU530
 2090 0026 0399     		ldr	r1, [sp, #12]
ARM GAS  /tmp/cc9CDFEk.s 			page 67


 2091 0028 10B1     		cbz	r0, .L95
 2092              	.L97:
 2093              	.LVL226:
1228:Src/bno055/bno055.c ****     }
 2094              		.loc 1 1228 16 view .LVU531
 2095 002a 0120     		movs	r0, #1
 2096              	.LBE153:
 2097              	.LBE155:
 759:Src/bno055/bno055.c **** 
 2098              		.loc 1 759 1 view .LVU532
 2099 002c 07B0     		add	sp, sp, #28
 2100              	.LCFI73:
 2101              		.cfi_remember_state
 2102              		.cfi_def_cfa_offset 20
 2103              		@ sp needed
 2104 002e F0BD     		pop	{r4, r5, r6, r7, pc}
 2105              	.LVL227:
 2106              	.L95:
 2107              	.LCFI74:
 2108              		.cfi_restore_state
 2109              	.LBB156:
 2110              	.LBB154:
1230:Src/bno055/bno055.c ****         HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 2111              		.loc 1 1230 5 is_stmt 1 view .LVU533
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2112              		.loc 1 1231 9 is_stmt 0 view .LVU534
 2113 0030 0097     		str	r7, [sp]
 2114 0032 0223     		movs	r3, #2
 2115 0034 3046     		mov	r0, r6
 2116              	.LVL228:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2117              		.loc 1 1231 9 view .LVU535
 2118 0036 05AA     		add	r2, sp, #20
 2119              	.LVL229:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2120              		.loc 1 1231 9 view .LVU536
 2121 0038 FFF7FEFF 		bl	HAL_I2C_Master_Receive
 2122              	.LVL230:
 2123              		.loc 1 1232 5 is_stmt 1 view .LVU537
 2124              		.loc 1 1232 8 is_stmt 0 view .LVU538
 2125 003c 0028     		cmp	r0, #0
 2126 003e F4D1     		bne	.L97
 2127              	.LVL231:
 2128              		.loc 1 1232 8 view .LVU539
 2129              	.LBE154:
 2130              	.LBE156:
 755:Src/bno055/bno055.c ****                                                          : BNO_ACC_SCALE_MG;
 2131              		.loc 1 755 5 is_stmt 1 view .LVU540
 757:Src/bno055/bno055.c ****     return BNO_OK;
 2132              		.loc 1 757 44 is_stmt 0 view .LVU541
 2133 0040 BDF91420 		ldrsh	r2, [sp, #20]
 756:Src/bno055/bno055.c ****     *buf = (s16)((data[1] << 8) | data[0]) / scale;
 2134              		.loc 1 756 58 view .LVU542
 2135 0044 A37B     		ldrb	r3, [r4, #14]	@ zero_extendqisi2
 2136 0046 DFED097A 		vldr.32	s15, .L101
 757:Src/bno055/bno055.c ****     return BNO_OK;
 2137              		.loc 1 757 44 view .LVU543
ARM GAS  /tmp/cc9CDFEk.s 			page 68


 2138 004a 07EE102A 		vmov	s14, r2	@ int
 756:Src/bno055/bno055.c ****     *buf = (s16)((data[1] << 8) | data[0]) / scale;
 2139              		.loc 1 756 58 view .LVU544
 2140 004e F7EE006A 		vmov.f32	s13, #1.0e+0
 757:Src/bno055/bno055.c ****     return BNO_OK;
 2141              		.loc 1 757 44 view .LVU545
 2142 0052 B8EEC77A 		vcvt.f32.s32	s14, s14
 756:Src/bno055/bno055.c ****     *buf = (s16)((data[1] << 8) | data[0]) / scale;
 2143              		.loc 1 756 58 view .LVU546
 2144 0056 002B     		cmp	r3, #0
 2145 0058 18BF     		it	ne
 2146 005a F0EE667A 		vmovne.f32	s15, s13
 2147              	.LVL232:
 757:Src/bno055/bno055.c ****     return BNO_OK;
 2148              		.loc 1 757 5 is_stmt 1 view .LVU547
 757:Src/bno055/bno055.c ****     return BNO_OK;
 2149              		.loc 1 757 44 is_stmt 0 view .LVU548
 2150 005e C7EE276A 		vdiv.f32	s13, s14, s15
 757:Src/bno055/bno055.c ****     return BNO_OK;
 2151              		.loc 1 757 10 view .LVU549
 2152 0062 C5ED006A 		vstr.32	s13, [r5]
 758:Src/bno055/bno055.c **** }
 2153              		.loc 1 758 5 is_stmt 1 view .LVU550
 759:Src/bno055/bno055.c **** 
 2154              		.loc 1 759 1 is_stmt 0 view .LVU551
 2155 0066 07B0     		add	sp, sp, #28
 2156              	.LCFI75:
 2157              		.cfi_def_cfa_offset 20
 2158              		@ sp needed
 2159 0068 F0BD     		pop	{r4, r5, r6, r7, pc}
 2160              	.LVL233:
 2161              	.L102:
 759:Src/bno055/bno055.c **** 
 2162              		.loc 1 759 1 view .LVU552
 2163 006a 00BF     		.align	2
 2164              	.L101:
 2165 006c 0000C842 		.word	1120403456
 2166              		.cfi_endproc
 2167              	.LFE152:
 2169              		.section	.text.bno055_gravity_z,"ax",%progbits
 2170              		.align	1
 2171              		.p2align 2,,3
 2172              		.global	bno055_gravity_z
 2173              		.syntax unified
 2174              		.thumb
 2175              		.thumb_func
 2176              		.fpu fpv4-sp-d16
 2178              	bno055_gravity_z:
 2179              	.LVL234:
 2180              	.LFB153:
 778:Src/bno055/bno055.c ****     error_bno err;
 2181              		.loc 1 778 53 is_stmt 1 view -0
 2182              		.cfi_startproc
 2183              		@ args = 0, pretend = 0, frame = 16
 2184              		@ frame_needed = 0, uses_anonymous_args = 0
 779:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 2185              		.loc 1 779 5 view .LVU554
ARM GAS  /tmp/cc9CDFEk.s 			page 69


 785:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Z_LSB, data, 2)) != BNO_OK) {
 2186              		.loc 1 785 5 view .LVU555
 786:Src/bno055/bno055.c ****         return err;
 2187              		.loc 1 786 5 view .LVU556
 778:Src/bno055/bno055.c ****     error_bno err;
 2188              		.loc 1 778 53 is_stmt 0 view .LVU557
 2189 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2190              	.LCFI76:
 2191              		.cfi_def_cfa_offset 20
 2192              		.cfi_offset 4, -20
 2193              		.cfi_offset 5, -16
 2194              		.cfi_offset 6, -12
 2195              		.cfi_offset 7, -8
 2196              		.cfi_offset 14, -4
 2197 0002 87B0     		sub	sp, sp, #28
 2198              	.LCFI77:
 2199              		.cfi_def_cfa_offset 48
 2200 0004 0668     		ldr	r6, [r0]
 2201              	.LVL235:
 2202              	.LBB159:
 2203              	.LBB160:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2204              		.loc 1 1226 11 view .LVU558
 2205 0006 4FF0FF37 		mov	r7, #-1
 2206 000a 3223     		movs	r3, #50
 2207 000c 0097     		str	r7, [sp]
 2208              	.LVL236:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2209              		.loc 1 1226 11 view .LVU559
 2210 000e 8DF81330 		strb	r3, [sp, #19]
 2211              	.LVL237:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2212              		.loc 1 1226 11 view .LVU560
 2213              	.LBE160:
 2214              	.LBI159:
1220:Src/bno055/bno055.c ****                            uint32_t buf_size) {
 2215              		.loc 1 1220 11 is_stmt 1 view .LVU561
 2216              	.LBB161:
1222:Src/bno055/bno055.c ****     // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
 2217              		.loc 1 1222 5 view .LVU562
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2218              		.loc 1 1226 5 view .LVU563
 2219              	.LBE161:
 2220              	.LBE159:
 778:Src/bno055/bno055.c ****     error_bno err;
 2221              		.loc 1 778 53 is_stmt 0 view .LVU564
 2222 0012 0446     		mov	r4, r0
 2223 0014 0D46     		mov	r5, r1
 2224              	.LBB164:
 2225              	.LBB162:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2226              		.loc 1 1226 11 view .LVU565
 2227 0016 0123     		movs	r3, #1
 2228              	.LVL238:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2229              		.loc 1 1226 11 view .LVU566
 2230 0018 8179     		ldrb	r1, [r0, #6]	@ zero_extendqisi2
ARM GAS  /tmp/cc9CDFEk.s 			page 70


 2231              	.LVL239:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2232              		.loc 1 1226 11 view .LVU567
 2233 001a 0391     		str	r1, [sp, #12]
 2234 001c 0DF11302 		add	r2, sp, #19
 2235              	.LVL240:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2236              		.loc 1 1226 11 view .LVU568
 2237 0020 3046     		mov	r0, r6
 2238              	.LVL241:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2239              		.loc 1 1226 11 view .LVU569
 2240 0022 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 2241              	.LVL242:
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 2242              		.loc 1 1227 5 is_stmt 1 view .LVU570
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 2243              		.loc 1 1227 8 is_stmt 0 view .LVU571
 2244 0026 0399     		ldr	r1, [sp, #12]
 2245 0028 10B1     		cbz	r0, .L104
 2246              	.L106:
 2247              	.LVL243:
1228:Src/bno055/bno055.c ****     }
 2248              		.loc 1 1228 16 view .LVU572
 2249 002a 0120     		movs	r0, #1
 2250              	.LBE162:
 2251              	.LBE164:
 793:Src/bno055/bno055.c **** 
 2252              		.loc 1 793 1 view .LVU573
 2253 002c 07B0     		add	sp, sp, #28
 2254              	.LCFI78:
 2255              		.cfi_remember_state
 2256              		.cfi_def_cfa_offset 20
 2257              		@ sp needed
 2258 002e F0BD     		pop	{r4, r5, r6, r7, pc}
 2259              	.LVL244:
 2260              	.L104:
 2261              	.LCFI79:
 2262              		.cfi_restore_state
 2263              	.LBB165:
 2264              	.LBB163:
1230:Src/bno055/bno055.c ****         HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 2265              		.loc 1 1230 5 is_stmt 1 view .LVU574
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2266              		.loc 1 1231 9 is_stmt 0 view .LVU575
 2267 0030 0097     		str	r7, [sp]
 2268 0032 0223     		movs	r3, #2
 2269 0034 3046     		mov	r0, r6
 2270              	.LVL245:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2271              		.loc 1 1231 9 view .LVU576
 2272 0036 05AA     		add	r2, sp, #20
 2273              	.LVL246:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2274              		.loc 1 1231 9 view .LVU577
 2275 0038 FFF7FEFF 		bl	HAL_I2C_Master_Receive
 2276              	.LVL247:
ARM GAS  /tmp/cc9CDFEk.s 			page 71


 2277              		.loc 1 1232 5 is_stmt 1 view .LVU578
 2278              		.loc 1 1232 8 is_stmt 0 view .LVU579
 2279 003c 0028     		cmp	r0, #0
 2280 003e F4D1     		bne	.L106
 2281              	.LVL248:
 2282              		.loc 1 1232 8 view .LVU580
 2283              	.LBE163:
 2284              	.LBE165:
 789:Src/bno055/bno055.c ****                                                          : BNO_ACC_SCALE_MG;
 2285              		.loc 1 789 5 is_stmt 1 view .LVU581
 791:Src/bno055/bno055.c ****     return BNO_OK;
 2286              		.loc 1 791 44 is_stmt 0 view .LVU582
 2287 0040 BDF91420 		ldrsh	r2, [sp, #20]
 790:Src/bno055/bno055.c ****     *buf = (s16)((data[1] << 8) | data[0]) / scale;
 2288              		.loc 1 790 58 view .LVU583
 2289 0044 A37B     		ldrb	r3, [r4, #14]	@ zero_extendqisi2
 2290 0046 DFED097A 		vldr.32	s15, .L110
 791:Src/bno055/bno055.c ****     return BNO_OK;
 2291              		.loc 1 791 44 view .LVU584
 2292 004a 07EE102A 		vmov	s14, r2	@ int
 790:Src/bno055/bno055.c ****     *buf = (s16)((data[1] << 8) | data[0]) / scale;
 2293              		.loc 1 790 58 view .LVU585
 2294 004e F7EE006A 		vmov.f32	s13, #1.0e+0
 791:Src/bno055/bno055.c ****     return BNO_OK;
 2295              		.loc 1 791 44 view .LVU586
 2296 0052 B8EEC77A 		vcvt.f32.s32	s14, s14
 790:Src/bno055/bno055.c ****     *buf = (s16)((data[1] << 8) | data[0]) / scale;
 2297              		.loc 1 790 58 view .LVU587
 2298 0056 002B     		cmp	r3, #0
 2299 0058 18BF     		it	ne
 2300 005a F0EE667A 		vmovne.f32	s15, s13
 2301              	.LVL249:
 791:Src/bno055/bno055.c ****     return BNO_OK;
 2302              		.loc 1 791 5 is_stmt 1 view .LVU588
 791:Src/bno055/bno055.c ****     return BNO_OK;
 2303              		.loc 1 791 44 is_stmt 0 view .LVU589
 2304 005e C7EE276A 		vdiv.f32	s13, s14, s15
 791:Src/bno055/bno055.c ****     return BNO_OK;
 2305              		.loc 1 791 10 view .LVU590
 2306 0062 C5ED006A 		vstr.32	s13, [r5]
 792:Src/bno055/bno055.c **** }
 2307              		.loc 1 792 5 is_stmt 1 view .LVU591
 793:Src/bno055/bno055.c **** 
 2308              		.loc 1 793 1 is_stmt 0 view .LVU592
 2309 0066 07B0     		add	sp, sp, #28
 2310              	.LCFI80:
 2311              		.cfi_def_cfa_offset 20
 2312              		@ sp needed
 2313 0068 F0BD     		pop	{r4, r5, r6, r7, pc}
 2314              	.LVL250:
 2315              	.L111:
 793:Src/bno055/bno055.c **** 
 2316              		.loc 1 793 1 view .LVU593
 2317 006a 00BF     		.align	2
 2318              	.L110:
 2319 006c 0000C842 		.word	1120403456
 2320              		.cfi_endproc
ARM GAS  /tmp/cc9CDFEk.s 			page 72


 2321              	.LFE153:
 2323              		.section	.text.bno055_euler_yaw,"ax",%progbits
 2324              		.align	1
 2325              		.p2align 2,,3
 2326              		.global	bno055_euler_yaw
 2327              		.syntax unified
 2328              		.thumb
 2329              		.thumb_func
 2330              		.fpu fpv4-sp-d16
 2332              	bno055_euler_yaw:
 2333              	.LVL251:
 2334              	.LFB155:
 849:Src/bno055/bno055.c ****     error_bno err;
 2335              		.loc 1 849 53 is_stmt 1 view -0
 2336              		.cfi_startproc
 2337              		@ args = 0, pretend = 0, frame = 16
 2338              		@ frame_needed = 0, uses_anonymous_args = 0
 850:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 2339              		.loc 1 850 5 view .LVU595
 856:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 2)) !=
 2340              		.loc 1 856 5 view .LVU596
 857:Src/bno055/bno055.c ****         BNO_OK) {
 2341              		.loc 1 857 5 view .LVU597
 849:Src/bno055/bno055.c ****     error_bno err;
 2342              		.loc 1 849 53 is_stmt 0 view .LVU598
 2343 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2344              	.LCFI81:
 2345              		.cfi_def_cfa_offset 20
 2346              		.cfi_offset 4, -20
 2347              		.cfi_offset 5, -16
 2348              		.cfi_offset 6, -12
 2349              		.cfi_offset 7, -8
 2350              		.cfi_offset 14, -4
 2351 0002 87B0     		sub	sp, sp, #28
 2352              	.LCFI82:
 2353              		.cfi_def_cfa_offset 48
 2354 0004 0668     		ldr	r6, [r0]
 2355              	.LVL252:
 2356              	.LBB168:
 2357              	.LBB169:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2358              		.loc 1 1226 11 view .LVU599
 2359 0006 4FF0FF37 		mov	r7, #-1
 2360 000a 1A23     		movs	r3, #26
 2361 000c 0097     		str	r7, [sp]
 2362              	.LVL253:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2363              		.loc 1 1226 11 view .LVU600
 2364 000e 8DF81330 		strb	r3, [sp, #19]
 2365              	.LVL254:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2366              		.loc 1 1226 11 view .LVU601
 2367              	.LBE169:
 2368              	.LBI168:
1220:Src/bno055/bno055.c ****                            uint32_t buf_size) {
 2369              		.loc 1 1220 11 is_stmt 1 view .LVU602
 2370              	.LBB170:
ARM GAS  /tmp/cc9CDFEk.s 			page 73


1222:Src/bno055/bno055.c ****     // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
 2371              		.loc 1 1222 5 view .LVU603
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2372              		.loc 1 1226 5 view .LVU604
 2373              	.LBE170:
 2374              	.LBE168:
 849:Src/bno055/bno055.c ****     error_bno err;
 2375              		.loc 1 849 53 is_stmt 0 view .LVU605
 2376 0012 0446     		mov	r4, r0
 2377 0014 0D46     		mov	r5, r1
 2378              	.LBB173:
 2379              	.LBB171:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2380              		.loc 1 1226 11 view .LVU606
 2381 0016 0123     		movs	r3, #1
 2382              	.LVL255:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2383              		.loc 1 1226 11 view .LVU607
 2384 0018 8179     		ldrb	r1, [r0, #6]	@ zero_extendqisi2
 2385              	.LVL256:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2386              		.loc 1 1226 11 view .LVU608
 2387 001a 0391     		str	r1, [sp, #12]
 2388 001c 0DF11302 		add	r2, sp, #19
 2389              	.LVL257:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2390              		.loc 1 1226 11 view .LVU609
 2391 0020 3046     		mov	r0, r6
 2392              	.LVL258:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2393              		.loc 1 1226 11 view .LVU610
 2394 0022 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 2395              	.LVL259:
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 2396              		.loc 1 1227 5 is_stmt 1 view .LVU611
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 2397              		.loc 1 1227 8 is_stmt 0 view .LVU612
 2398 0026 0399     		ldr	r1, [sp, #12]
 2399 0028 10B1     		cbz	r0, .L113
 2400              	.L115:
 2401              	.LVL260:
1228:Src/bno055/bno055.c ****     }
 2402              		.loc 1 1228 16 view .LVU613
 2403 002a 0120     		movs	r0, #1
 2404              	.LBE171:
 2405              	.LBE173:
 865:Src/bno055/bno055.c **** 
 2406              		.loc 1 865 1 view .LVU614
 2407 002c 07B0     		add	sp, sp, #28
 2408              	.LCFI83:
 2409              		.cfi_remember_state
 2410              		.cfi_def_cfa_offset 20
 2411              		@ sp needed
 2412 002e F0BD     		pop	{r4, r5, r6, r7, pc}
 2413              	.LVL261:
 2414              	.L113:
 2415              	.LCFI84:
ARM GAS  /tmp/cc9CDFEk.s 			page 74


 2416              		.cfi_restore_state
 2417              	.LBB174:
 2418              	.LBB172:
1230:Src/bno055/bno055.c ****         HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 2419              		.loc 1 1230 5 is_stmt 1 view .LVU615
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2420              		.loc 1 1231 9 is_stmt 0 view .LVU616
 2421 0030 0097     		str	r7, [sp]
 2422 0032 0223     		movs	r3, #2
 2423 0034 3046     		mov	r0, r6
 2424              	.LVL262:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2425              		.loc 1 1231 9 view .LVU617
 2426 0036 05AA     		add	r2, sp, #20
 2427              	.LVL263:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2428              		.loc 1 1231 9 view .LVU618
 2429 0038 FFF7FEFF 		bl	HAL_I2C_Master_Receive
 2430              	.LVL264:
 2431              		.loc 1 1232 5 is_stmt 1 view .LVU619
 2432              		.loc 1 1232 8 is_stmt 0 view .LVU620
 2433 003c 0028     		cmp	r0, #0
 2434 003e F4D1     		bne	.L115
 2435              	.LVL265:
 2436              		.loc 1 1232 8 view .LVU621
 2437              	.LBE172:
 2438              	.LBE174:
 861:Src/bno055/bno055.c ****                                                      : BNO_EUL_SCALE_RAD;
 2439              		.loc 1 861 5 is_stmt 1 view .LVU622
 863:Src/bno055/bno055.c ****     return BNO_OK;
 2440              		.loc 1 863 44 is_stmt 0 view .LVU623
 2441 0040 BDF91420 		ldrsh	r2, [sp, #20]
 862:Src/bno055/bno055.c ****     *buf = (s16)((data[1] << 8) | data[0]) / scale;
 2442              		.loc 1 862 54 view .LVU624
 2443 0044 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 2444 0046 DFED096A 		vldr.32	s13, .L119
 863:Src/bno055/bno055.c ****     return BNO_OK;
 2445              		.loc 1 863 44 view .LVU625
 2446 004a 07EE102A 		vmov	s14, r2	@ int
 862:Src/bno055/bno055.c ****     *buf = (s16)((data[1] << 8) | data[0]) / scale;
 2447              		.loc 1 862 54 view .LVU626
 2448 004e 002B     		cmp	r3, #0
 863:Src/bno055/bno055.c ****     return BNO_OK;
 2449              		.loc 1 863 44 view .LVU627
 2450 0050 B8EEC77A 		vcvt.f32.s32	s14, s14
 862:Src/bno055/bno055.c ****     *buf = (s16)((data[1] << 8) | data[0]) / scale;
 2451              		.loc 1 862 54 view .LVU628
 2452 0054 F3EE007A 		vmov.f32	s15, #1.6e+1
 2453 0058 18BF     		it	ne
 2454 005a F0EE667A 		vmovne.f32	s15, s13
 2455              	.LVL266:
 863:Src/bno055/bno055.c ****     return BNO_OK;
 2456              		.loc 1 863 5 is_stmt 1 view .LVU629
 863:Src/bno055/bno055.c ****     return BNO_OK;
 2457              		.loc 1 863 44 is_stmt 0 view .LVU630
 2458 005e C7EE276A 		vdiv.f32	s13, s14, s15
 863:Src/bno055/bno055.c ****     return BNO_OK;
ARM GAS  /tmp/cc9CDFEk.s 			page 75


 2459              		.loc 1 863 10 view .LVU631
 2460 0062 C5ED006A 		vstr.32	s13, [r5]
 864:Src/bno055/bno055.c **** }
 2461              		.loc 1 864 5 is_stmt 1 view .LVU632
 865:Src/bno055/bno055.c **** 
 2462              		.loc 1 865 1 is_stmt 0 view .LVU633
 2463 0066 07B0     		add	sp, sp, #28
 2464              	.LCFI85:
 2465              		.cfi_def_cfa_offset 20
 2466              		@ sp needed
 2467 0068 F0BD     		pop	{r4, r5, r6, r7, pc}
 2468              	.LVL267:
 2469              	.L120:
 865:Src/bno055/bno055.c **** 
 2470              		.loc 1 865 1 view .LVU634
 2471 006a 00BF     		.align	2
 2472              	.L119:
 2473 006c 00006144 		.word	1147207680
 2474              		.cfi_endproc
 2475              	.LFE155:
 2477              		.section	.text.bno055_euler_roll,"ax",%progbits
 2478              		.align	1
 2479              		.p2align 2,,3
 2480              		.global	bno055_euler_roll
 2481              		.syntax unified
 2482              		.thumb
 2483              		.thumb_func
 2484              		.fpu fpv4-sp-d16
 2486              	bno055_euler_roll:
 2487              	.LVL268:
 2488              	.LFB156:
 884:Src/bno055/bno055.c ****     error_bno err;
 2489              		.loc 1 884 54 is_stmt 1 view -0
 2490              		.cfi_startproc
 2491              		@ args = 0, pretend = 0, frame = 16
 2492              		@ frame_needed = 0, uses_anonymous_args = 0
 885:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 2493              		.loc 1 885 5 view .LVU636
 891:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_EUL_ROLL_LSB, data, 2)) != BNO_OK) {
 2494              		.loc 1 891 5 view .LVU637
 892:Src/bno055/bno055.c ****         return err;
 2495              		.loc 1 892 5 view .LVU638
 884:Src/bno055/bno055.c ****     error_bno err;
 2496              		.loc 1 884 54 is_stmt 0 view .LVU639
 2497 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2498              	.LCFI86:
 2499              		.cfi_def_cfa_offset 20
 2500              		.cfi_offset 4, -20
 2501              		.cfi_offset 5, -16
 2502              		.cfi_offset 6, -12
 2503              		.cfi_offset 7, -8
 2504              		.cfi_offset 14, -4
 2505 0002 87B0     		sub	sp, sp, #28
 2506              	.LCFI87:
 2507              		.cfi_def_cfa_offset 48
 2508 0004 0668     		ldr	r6, [r0]
 2509              	.LVL269:
ARM GAS  /tmp/cc9CDFEk.s 			page 76


 2510              	.LBB177:
 2511              	.LBB178:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2512              		.loc 1 1226 11 view .LVU640
 2513 0006 4FF0FF37 		mov	r7, #-1
 2514 000a 1C23     		movs	r3, #28
 2515 000c 0097     		str	r7, [sp]
 2516              	.LVL270:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2517              		.loc 1 1226 11 view .LVU641
 2518 000e 8DF81330 		strb	r3, [sp, #19]
 2519              	.LVL271:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2520              		.loc 1 1226 11 view .LVU642
 2521              	.LBE178:
 2522              	.LBI177:
1220:Src/bno055/bno055.c ****                            uint32_t buf_size) {
 2523              		.loc 1 1220 11 is_stmt 1 view .LVU643
 2524              	.LBB179:
1222:Src/bno055/bno055.c ****     // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
 2525              		.loc 1 1222 5 view .LVU644
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2526              		.loc 1 1226 5 view .LVU645
 2527              	.LBE179:
 2528              	.LBE177:
 884:Src/bno055/bno055.c ****     error_bno err;
 2529              		.loc 1 884 54 is_stmt 0 view .LVU646
 2530 0012 0446     		mov	r4, r0
 2531 0014 0D46     		mov	r5, r1
 2532              	.LBB182:
 2533              	.LBB180:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2534              		.loc 1 1226 11 view .LVU647
 2535 0016 0123     		movs	r3, #1
 2536              	.LVL272:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2537              		.loc 1 1226 11 view .LVU648
 2538 0018 8179     		ldrb	r1, [r0, #6]	@ zero_extendqisi2
 2539              	.LVL273:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2540              		.loc 1 1226 11 view .LVU649
 2541 001a 0391     		str	r1, [sp, #12]
 2542 001c 0DF11302 		add	r2, sp, #19
 2543              	.LVL274:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2544              		.loc 1 1226 11 view .LVU650
 2545 0020 3046     		mov	r0, r6
 2546              	.LVL275:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2547              		.loc 1 1226 11 view .LVU651
 2548 0022 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 2549              	.LVL276:
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 2550              		.loc 1 1227 5 is_stmt 1 view .LVU652
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 2551              		.loc 1 1227 8 is_stmt 0 view .LVU653
 2552 0026 0399     		ldr	r1, [sp, #12]
ARM GAS  /tmp/cc9CDFEk.s 			page 77


 2553 0028 10B1     		cbz	r0, .L122
 2554              	.L124:
 2555              	.LVL277:
1228:Src/bno055/bno055.c ****     }
 2556              		.loc 1 1228 16 view .LVU654
 2557 002a 0120     		movs	r0, #1
 2558              	.LBE180:
 2559              	.LBE182:
 899:Src/bno055/bno055.c **** 
 2560              		.loc 1 899 1 view .LVU655
 2561 002c 07B0     		add	sp, sp, #28
 2562              	.LCFI88:
 2563              		.cfi_remember_state
 2564              		.cfi_def_cfa_offset 20
 2565              		@ sp needed
 2566 002e F0BD     		pop	{r4, r5, r6, r7, pc}
 2567              	.LVL278:
 2568              	.L122:
 2569              	.LCFI89:
 2570              		.cfi_restore_state
 2571              	.LBB183:
 2572              	.LBB181:
1230:Src/bno055/bno055.c ****         HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 2573              		.loc 1 1230 5 is_stmt 1 view .LVU656
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2574              		.loc 1 1231 9 is_stmt 0 view .LVU657
 2575 0030 0097     		str	r7, [sp]
 2576 0032 0223     		movs	r3, #2
 2577 0034 3046     		mov	r0, r6
 2578              	.LVL279:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2579              		.loc 1 1231 9 view .LVU658
 2580 0036 05AA     		add	r2, sp, #20
 2581              	.LVL280:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2582              		.loc 1 1231 9 view .LVU659
 2583 0038 FFF7FEFF 		bl	HAL_I2C_Master_Receive
 2584              	.LVL281:
 2585              		.loc 1 1232 5 is_stmt 1 view .LVU660
 2586              		.loc 1 1232 8 is_stmt 0 view .LVU661
 2587 003c 0028     		cmp	r0, #0
 2588 003e F4D1     		bne	.L124
 2589              	.LVL282:
 2590              		.loc 1 1232 8 view .LVU662
 2591              	.LBE181:
 2592              	.LBE183:
 895:Src/bno055/bno055.c ****                                                      : BNO_EUL_SCALE_RAD;
 2593              		.loc 1 895 5 is_stmt 1 view .LVU663
 897:Src/bno055/bno055.c ****     return BNO_OK;
 2594              		.loc 1 897 44 is_stmt 0 view .LVU664
 2595 0040 BDF91420 		ldrsh	r2, [sp, #20]
 896:Src/bno055/bno055.c ****     *buf = (s16)((data[1] << 8) | data[0]) / scale;
 2596              		.loc 1 896 54 view .LVU665
 2597 0044 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 2598 0046 DFED096A 		vldr.32	s13, .L128
 897:Src/bno055/bno055.c ****     return BNO_OK;
 2599              		.loc 1 897 44 view .LVU666
ARM GAS  /tmp/cc9CDFEk.s 			page 78


 2600 004a 07EE102A 		vmov	s14, r2	@ int
 896:Src/bno055/bno055.c ****     *buf = (s16)((data[1] << 8) | data[0]) / scale;
 2601              		.loc 1 896 54 view .LVU667
 2602 004e 002B     		cmp	r3, #0
 897:Src/bno055/bno055.c ****     return BNO_OK;
 2603              		.loc 1 897 44 view .LVU668
 2604 0050 B8EEC77A 		vcvt.f32.s32	s14, s14
 896:Src/bno055/bno055.c ****     *buf = (s16)((data[1] << 8) | data[0]) / scale;
 2605              		.loc 1 896 54 view .LVU669
 2606 0054 F3EE007A 		vmov.f32	s15, #1.6e+1
 2607 0058 18BF     		it	ne
 2608 005a F0EE667A 		vmovne.f32	s15, s13
 2609              	.LVL283:
 897:Src/bno055/bno055.c ****     return BNO_OK;
 2610              		.loc 1 897 5 is_stmt 1 view .LVU670
 897:Src/bno055/bno055.c ****     return BNO_OK;
 2611              		.loc 1 897 44 is_stmt 0 view .LVU671
 2612 005e C7EE276A 		vdiv.f32	s13, s14, s15
 897:Src/bno055/bno055.c ****     return BNO_OK;
 2613              		.loc 1 897 10 view .LVU672
 2614 0062 C5ED006A 		vstr.32	s13, [r5]
 898:Src/bno055/bno055.c **** }
 2615              		.loc 1 898 5 is_stmt 1 view .LVU673
 899:Src/bno055/bno055.c **** 
 2616              		.loc 1 899 1 is_stmt 0 view .LVU674
 2617 0066 07B0     		add	sp, sp, #28
 2618              	.LCFI90:
 2619              		.cfi_def_cfa_offset 20
 2620              		@ sp needed
 2621 0068 F0BD     		pop	{r4, r5, r6, r7, pc}
 2622              	.LVL284:
 2623              	.L129:
 899:Src/bno055/bno055.c **** 
 2624              		.loc 1 899 1 view .LVU675
 2625 006a 00BF     		.align	2
 2626              	.L128:
 2627 006c 00006144 		.word	1147207680
 2628              		.cfi_endproc
 2629              	.LFE156:
 2631              		.section	.text.bno055_euler_pitch,"ax",%progbits
 2632              		.align	1
 2633              		.p2align 2,,3
 2634              		.global	bno055_euler_pitch
 2635              		.syntax unified
 2636              		.thumb
 2637              		.thumb_func
 2638              		.fpu fpv4-sp-d16
 2640              	bno055_euler_pitch:
 2641              	.LVL285:
 2642              	.LFB157:
 918:Src/bno055/bno055.c ****     error_bno err;
 2643              		.loc 1 918 55 is_stmt 1 view -0
 2644              		.cfi_startproc
 2645              		@ args = 0, pretend = 0, frame = 16
 2646              		@ frame_needed = 0, uses_anonymous_args = 0
 919:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 2647              		.loc 1 919 5 view .LVU677
ARM GAS  /tmp/cc9CDFEk.s 			page 79


 925:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_EUL_PITCH_LSB, data, 2)) != BNO_OK) {
 2648              		.loc 1 925 5 view .LVU678
 926:Src/bno055/bno055.c ****         return err;
 2649              		.loc 1 926 5 view .LVU679
 918:Src/bno055/bno055.c ****     error_bno err;
 2650              		.loc 1 918 55 is_stmt 0 view .LVU680
 2651 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2652              	.LCFI91:
 2653              		.cfi_def_cfa_offset 20
 2654              		.cfi_offset 4, -20
 2655              		.cfi_offset 5, -16
 2656              		.cfi_offset 6, -12
 2657              		.cfi_offset 7, -8
 2658              		.cfi_offset 14, -4
 2659 0002 87B0     		sub	sp, sp, #28
 2660              	.LCFI92:
 2661              		.cfi_def_cfa_offset 48
 2662 0004 0668     		ldr	r6, [r0]
 2663              	.LVL286:
 2664              	.LBB186:
 2665              	.LBB187:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2666              		.loc 1 1226 11 view .LVU681
 2667 0006 4FF0FF37 		mov	r7, #-1
 2668 000a 1E23     		movs	r3, #30
 2669 000c 0097     		str	r7, [sp]
 2670              	.LVL287:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2671              		.loc 1 1226 11 view .LVU682
 2672 000e 8DF81330 		strb	r3, [sp, #19]
 2673              	.LVL288:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2674              		.loc 1 1226 11 view .LVU683
 2675              	.LBE187:
 2676              	.LBI186:
1220:Src/bno055/bno055.c ****                            uint32_t buf_size) {
 2677              		.loc 1 1220 11 is_stmt 1 view .LVU684
 2678              	.LBB188:
1222:Src/bno055/bno055.c ****     // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
 2679              		.loc 1 1222 5 view .LVU685
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2680              		.loc 1 1226 5 view .LVU686
 2681              	.LBE188:
 2682              	.LBE186:
 918:Src/bno055/bno055.c ****     error_bno err;
 2683              		.loc 1 918 55 is_stmt 0 view .LVU687
 2684 0012 0446     		mov	r4, r0
 2685 0014 0D46     		mov	r5, r1
 2686              	.LBB191:
 2687              	.LBB189:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2688              		.loc 1 1226 11 view .LVU688
 2689 0016 0123     		movs	r3, #1
 2690              	.LVL289:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2691              		.loc 1 1226 11 view .LVU689
 2692 0018 8179     		ldrb	r1, [r0, #6]	@ zero_extendqisi2
ARM GAS  /tmp/cc9CDFEk.s 			page 80


 2693              	.LVL290:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2694              		.loc 1 1226 11 view .LVU690
 2695 001a 0391     		str	r1, [sp, #12]
 2696 001c 0DF11302 		add	r2, sp, #19
 2697              	.LVL291:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2698              		.loc 1 1226 11 view .LVU691
 2699 0020 3046     		mov	r0, r6
 2700              	.LVL292:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2701              		.loc 1 1226 11 view .LVU692
 2702 0022 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 2703              	.LVL293:
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 2704              		.loc 1 1227 5 is_stmt 1 view .LVU693
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 2705              		.loc 1 1227 8 is_stmt 0 view .LVU694
 2706 0026 0399     		ldr	r1, [sp, #12]
 2707 0028 10B1     		cbz	r0, .L131
 2708              	.L133:
 2709              	.LVL294:
1228:Src/bno055/bno055.c ****     }
 2710              		.loc 1 1228 16 view .LVU695
 2711 002a 0120     		movs	r0, #1
 2712              	.LBE189:
 2713              	.LBE191:
 933:Src/bno055/bno055.c **** 
 2714              		.loc 1 933 1 view .LVU696
 2715 002c 07B0     		add	sp, sp, #28
 2716              	.LCFI93:
 2717              		.cfi_remember_state
 2718              		.cfi_def_cfa_offset 20
 2719              		@ sp needed
 2720 002e F0BD     		pop	{r4, r5, r6, r7, pc}
 2721              	.LVL295:
 2722              	.L131:
 2723              	.LCFI94:
 2724              		.cfi_restore_state
 2725              	.LBB192:
 2726              	.LBB190:
1230:Src/bno055/bno055.c ****         HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 2727              		.loc 1 1230 5 is_stmt 1 view .LVU697
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2728              		.loc 1 1231 9 is_stmt 0 view .LVU698
 2729 0030 0097     		str	r7, [sp]
 2730 0032 0223     		movs	r3, #2
 2731 0034 3046     		mov	r0, r6
 2732              	.LVL296:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2733              		.loc 1 1231 9 view .LVU699
 2734 0036 05AA     		add	r2, sp, #20
 2735              	.LVL297:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2736              		.loc 1 1231 9 view .LVU700
 2737 0038 FFF7FEFF 		bl	HAL_I2C_Master_Receive
 2738              	.LVL298:
ARM GAS  /tmp/cc9CDFEk.s 			page 81


 2739              		.loc 1 1232 5 is_stmt 1 view .LVU701
 2740              		.loc 1 1232 8 is_stmt 0 view .LVU702
 2741 003c 0028     		cmp	r0, #0
 2742 003e F4D1     		bne	.L133
 2743              	.LVL299:
 2744              		.loc 1 1232 8 view .LVU703
 2745              	.LBE190:
 2746              	.LBE192:
 929:Src/bno055/bno055.c ****                                                      : BNO_EUL_SCALE_RAD;
 2747              		.loc 1 929 5 is_stmt 1 view .LVU704
 931:Src/bno055/bno055.c ****     return BNO_OK;
 2748              		.loc 1 931 44 is_stmt 0 view .LVU705
 2749 0040 BDF91420 		ldrsh	r2, [sp, #20]
 930:Src/bno055/bno055.c ****     *buf = (s16)((data[1] << 8) | data[0]) / scale;
 2750              		.loc 1 930 54 view .LVU706
 2751 0044 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 2752 0046 DFED096A 		vldr.32	s13, .L137
 931:Src/bno055/bno055.c ****     return BNO_OK;
 2753              		.loc 1 931 44 view .LVU707
 2754 004a 07EE102A 		vmov	s14, r2	@ int
 930:Src/bno055/bno055.c ****     *buf = (s16)((data[1] << 8) | data[0]) / scale;
 2755              		.loc 1 930 54 view .LVU708
 2756 004e 002B     		cmp	r3, #0
 931:Src/bno055/bno055.c ****     return BNO_OK;
 2757              		.loc 1 931 44 view .LVU709
 2758 0050 B8EEC77A 		vcvt.f32.s32	s14, s14
 930:Src/bno055/bno055.c ****     *buf = (s16)((data[1] << 8) | data[0]) / scale;
 2759              		.loc 1 930 54 view .LVU710
 2760 0054 F3EE007A 		vmov.f32	s15, #1.6e+1
 2761 0058 18BF     		it	ne
 2762 005a F0EE667A 		vmovne.f32	s15, s13
 2763              	.LVL300:
 931:Src/bno055/bno055.c ****     return BNO_OK;
 2764              		.loc 1 931 5 is_stmt 1 view .LVU711
 931:Src/bno055/bno055.c ****     return BNO_OK;
 2765              		.loc 1 931 44 is_stmt 0 view .LVU712
 2766 005e C7EE276A 		vdiv.f32	s13, s14, s15
 931:Src/bno055/bno055.c ****     return BNO_OK;
 2767              		.loc 1 931 10 view .LVU713
 2768 0062 C5ED006A 		vstr.32	s13, [r5]
 932:Src/bno055/bno055.c **** }
 2769              		.loc 1 932 5 is_stmt 1 view .LVU714
 933:Src/bno055/bno055.c **** 
 2770              		.loc 1 933 1 is_stmt 0 view .LVU715
 2771 0066 07B0     		add	sp, sp, #28
 2772              	.LCFI95:
 2773              		.cfi_def_cfa_offset 20
 2774              		@ sp needed
 2775 0068 F0BD     		pop	{r4, r5, r6, r7, pc}
 2776              	.LVL301:
 2777              	.L138:
 933:Src/bno055/bno055.c **** 
 2778              		.loc 1 933 1 view .LVU716
 2779 006a 00BF     		.align	2
 2780              	.L137:
 2781 006c 00006144 		.word	1147207680
 2782              		.cfi_endproc
ARM GAS  /tmp/cc9CDFEk.s 			page 82


 2783              	.LFE157:
 2785              		.section	.text.bno055_gyro_z,"ax",%progbits
 2786              		.align	1
 2787              		.p2align 2,,3
 2788              		.global	bno055_gyro_z
 2789              		.syntax unified
 2790              		.thumb
 2791              		.thumb_func
 2792              		.fpu fpv4-sp-d16
 2794              	bno055_gyro_z:
 2795              	.LVL302:
 2796              	.LFB145:
 497:Src/bno055/bno055.c ****     error_bno err;
 2797              		.loc 1 497 50 is_stmt 1 view -0
 2798              		.cfi_startproc
 2799              		@ args = 0, pretend = 0, frame = 16
 2800              		@ frame_needed = 0, uses_anonymous_args = 0
 498:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 2801              		.loc 1 498 5 view .LVU718
 504:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Z_LSB, data, 2)) != BNO_OK) {
 2802              		.loc 1 504 5 view .LVU719
 505:Src/bno055/bno055.c ****         return err;
 2803              		.loc 1 505 5 view .LVU720
 497:Src/bno055/bno055.c ****     error_bno err;
 2804              		.loc 1 497 50 is_stmt 0 view .LVU721
 2805 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2806              	.LCFI96:
 2807              		.cfi_def_cfa_offset 20
 2808              		.cfi_offset 4, -20
 2809              		.cfi_offset 5, -16
 2810              		.cfi_offset 6, -12
 2811              		.cfi_offset 7, -8
 2812              		.cfi_offset 14, -4
 2813 0002 87B0     		sub	sp, sp, #28
 2814              	.LCFI97:
 2815              		.cfi_def_cfa_offset 48
 2816 0004 0668     		ldr	r6, [r0]
 2817              	.LVL303:
 2818              	.LBB195:
 2819              	.LBB196:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2820              		.loc 1 1226 11 view .LVU722
 2821 0006 4FF0FF37 		mov	r7, #-1
 2822 000a 1823     		movs	r3, #24
 2823 000c 0097     		str	r7, [sp]
 2824              	.LVL304:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2825              		.loc 1 1226 11 view .LVU723
 2826 000e 8DF81330 		strb	r3, [sp, #19]
 2827              	.LVL305:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2828              		.loc 1 1226 11 view .LVU724
 2829              	.LBE196:
 2830              	.LBI195:
1220:Src/bno055/bno055.c ****                            uint32_t buf_size) {
 2831              		.loc 1 1220 11 is_stmt 1 view .LVU725
 2832              	.LBB197:
ARM GAS  /tmp/cc9CDFEk.s 			page 83


1222:Src/bno055/bno055.c ****     // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
 2833              		.loc 1 1222 5 view .LVU726
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2834              		.loc 1 1226 5 view .LVU727
 2835              	.LBE197:
 2836              	.LBE195:
 497:Src/bno055/bno055.c ****     error_bno err;
 2837              		.loc 1 497 50 is_stmt 0 view .LVU728
 2838 0012 0446     		mov	r4, r0
 2839 0014 0D46     		mov	r5, r1
 2840              	.LBB200:
 2841              	.LBB198:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2842              		.loc 1 1226 11 view .LVU729
 2843 0016 0123     		movs	r3, #1
 2844              	.LVL306:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2845              		.loc 1 1226 11 view .LVU730
 2846 0018 8179     		ldrb	r1, [r0, #6]	@ zero_extendqisi2
 2847              	.LVL307:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2848              		.loc 1 1226 11 view .LVU731
 2849 001a 0391     		str	r1, [sp, #12]
 2850 001c 0DF11302 		add	r2, sp, #19
 2851              	.LVL308:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2852              		.loc 1 1226 11 view .LVU732
 2853 0020 3046     		mov	r0, r6
 2854              	.LVL309:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2855              		.loc 1 1226 11 view .LVU733
 2856 0022 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 2857              	.LVL310:
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 2858              		.loc 1 1227 5 is_stmt 1 view .LVU734
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 2859              		.loc 1 1227 8 is_stmt 0 view .LVU735
 2860 0026 0399     		ldr	r1, [sp, #12]
 2861 0028 10B1     		cbz	r0, .L140
 2862              	.L142:
 2863              	.LVL311:
1228:Src/bno055/bno055.c ****     }
 2864              		.loc 1 1228 16 view .LVU736
 2865 002a 0120     		movs	r0, #1
 2866              	.LBE198:
 2867              	.LBE200:
 513:Src/bno055/bno055.c **** 
 2868              		.loc 1 513 1 view .LVU737
 2869 002c 07B0     		add	sp, sp, #28
 2870              	.LCFI98:
 2871              		.cfi_remember_state
 2872              		.cfi_def_cfa_offset 20
 2873              		@ sp needed
 2874 002e F0BD     		pop	{r4, r5, r6, r7, pc}
 2875              	.LVL312:
 2876              	.L140:
 2877              	.LCFI99:
ARM GAS  /tmp/cc9CDFEk.s 			page 84


 2878              		.cfi_restore_state
 2879              	.LBB201:
 2880              	.LBB199:
1230:Src/bno055/bno055.c ****         HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 2881              		.loc 1 1230 5 is_stmt 1 view .LVU738
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2882              		.loc 1 1231 9 is_stmt 0 view .LVU739
 2883 0030 0097     		str	r7, [sp]
 2884 0032 0223     		movs	r3, #2
 2885 0034 3046     		mov	r0, r6
 2886              	.LVL313:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2887              		.loc 1 1231 9 view .LVU740
 2888 0036 05AA     		add	r2, sp, #20
 2889              	.LVL314:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2890              		.loc 1 1231 9 view .LVU741
 2891 0038 FFF7FEFF 		bl	HAL_I2C_Master_Receive
 2892              	.LVL315:
 2893              		.loc 1 1232 5 is_stmt 1 view .LVU742
 2894              		.loc 1 1232 8 is_stmt 0 view .LVU743
 2895 003c 0028     		cmp	r0, #0
 2896 003e F4D1     		bne	.L142
 2897              	.LVL316:
 2898              		.loc 1 1232 8 view .LVU744
 2899              	.LBE199:
 2900              	.LBE201:
 509:Src/bno055/bno055.c ****            ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 2901              		.loc 1 509 5 is_stmt 1 view .LVU745
 509:Src/bno055/bno055.c ****            ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 2902              		.loc 1 509 44 is_stmt 0 view .LVU746
 2903 0040 BDF91420 		ldrsh	r2, [sp, #20]
 511:Src/bno055/bno055.c ****     return BNO_OK;
 2904              		.loc 1 511 50 view .LVU747
 2905 0044 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 2906 0046 DFED096A 		vldr.32	s13, .L146
 509:Src/bno055/bno055.c ****            ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 2907              		.loc 1 509 44 view .LVU748
 2908 004a 07EE102A 		vmov	s14, r2	@ int
 511:Src/bno055/bno055.c ****     return BNO_OK;
 2909              		.loc 1 511 50 view .LVU749
 2910 004e 002B     		cmp	r3, #0
 509:Src/bno055/bno055.c ****            ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 2911              		.loc 1 509 44 view .LVU750
 2912 0050 B8EEC77A 		vcvt.f32.s32	s14, s14
 511:Src/bno055/bno055.c ****     return BNO_OK;
 2913              		.loc 1 511 50 view .LVU751
 2914 0054 F3EE007A 		vmov.f32	s15, #1.6e+1
 2915 0058 18BF     		it	ne
 2916 005a F0EE667A 		vmovne.f32	s15, s13
 509:Src/bno055/bno055.c ****            ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 2917              		.loc 1 509 44 view .LVU752
 2918 005e C7EE276A 		vdiv.f32	s13, s14, s15
 509:Src/bno055/bno055.c ****            ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 2919              		.loc 1 509 10 view .LVU753
 2920 0062 C5ED006A 		vstr.32	s13, [r5]
 512:Src/bno055/bno055.c **** };
ARM GAS  /tmp/cc9CDFEk.s 			page 85


 2921              		.loc 1 512 5 is_stmt 1 view .LVU754
 513:Src/bno055/bno055.c **** 
 2922              		.loc 1 513 1 is_stmt 0 view .LVU755
 2923 0066 07B0     		add	sp, sp, #28
 2924              	.LCFI100:
 2925              		.cfi_def_cfa_offset 20
 2926              		@ sp needed
 2927 0068 F0BD     		pop	{r4, r5, r6, r7, pc}
 2928              	.LVL317:
 2929              	.L147:
 513:Src/bno055/bno055.c **** 
 2930              		.loc 1 513 1 view .LVU756
 2931 006a 00BF     		.align	2
 2932              	.L146:
 2933 006c 00006144 		.word	1147207680
 2934              		.cfi_endproc
 2935              	.LFE145:
 2937              		.section	.text.bno055_linear_acc_z,"ax",%progbits
 2938              		.align	1
 2939              		.p2align 2,,3
 2940              		.global	bno055_linear_acc_z
 2941              		.syntax unified
 2942              		.thumb
 2943              		.thumb_func
 2944              		.fpu fpv4-sp-d16
 2946              	bno055_linear_acc_z:
 2947              	.LVL318:
 2948              	.LFB141:
 354:Src/bno055/bno055.c ****     error_bno err;
 2949              		.loc 1 354 56 is_stmt 1 view -0
 2950              		.cfi_startproc
 2951              		@ args = 0, pretend = 0, frame = 16
 2952              		@ frame_needed = 0, uses_anonymous_args = 0
 355:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 2953              		.loc 1 355 5 view .LVU758
 361:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 2954              		.loc 1 361 5 view .LVU759
 362:Src/bno055/bno055.c ****         return err;
 2955              		.loc 1 362 5 view .LVU760
 354:Src/bno055/bno055.c ****     error_bno err;
 2956              		.loc 1 354 56 is_stmt 0 view .LVU761
 2957 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2958              	.LCFI101:
 2959              		.cfi_def_cfa_offset 20
 2960              		.cfi_offset 4, -20
 2961              		.cfi_offset 5, -16
 2962              		.cfi_offset 6, -12
 2963              		.cfi_offset 7, -8
 2964              		.cfi_offset 14, -4
 2965 0002 87B0     		sub	sp, sp, #28
 2966              	.LCFI102:
 2967              		.cfi_def_cfa_offset 48
 2968 0004 0668     		ldr	r6, [r0]
 2969              	.LVL319:
 2970              	.LBB204:
 2971              	.LBB205:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
ARM GAS  /tmp/cc9CDFEk.s 			page 86


 2972              		.loc 1 1226 11 view .LVU762
 2973 0006 4FF0FF37 		mov	r7, #-1
 2974 000a 2C23     		movs	r3, #44
 2975 000c 0097     		str	r7, [sp]
 2976              	.LVL320:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2977              		.loc 1 1226 11 view .LVU763
 2978 000e 8DF81330 		strb	r3, [sp, #19]
 2979              	.LVL321:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2980              		.loc 1 1226 11 view .LVU764
 2981              	.LBE205:
 2982              	.LBI204:
1220:Src/bno055/bno055.c ****                            uint32_t buf_size) {
 2983              		.loc 1 1220 11 is_stmt 1 view .LVU765
 2984              	.LBB206:
1222:Src/bno055/bno055.c ****     // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
 2985              		.loc 1 1222 5 view .LVU766
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2986              		.loc 1 1226 5 view .LVU767
 2987              	.LBE206:
 2988              	.LBE204:
 354:Src/bno055/bno055.c ****     error_bno err;
 2989              		.loc 1 354 56 is_stmt 0 view .LVU768
 2990 0012 0446     		mov	r4, r0
 2991 0014 0D46     		mov	r5, r1
 2992              	.LBB209:
 2993              	.LBB207:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2994              		.loc 1 1226 11 view .LVU769
 2995 0016 0123     		movs	r3, #1
 2996              	.LVL322:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 2997              		.loc 1 1226 11 view .LVU770
 2998 0018 8179     		ldrb	r1, [r0, #6]	@ zero_extendqisi2
 2999              	.LVL323:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3000              		.loc 1 1226 11 view .LVU771
 3001 001a 0391     		str	r1, [sp, #12]
 3002 001c 0DF11302 		add	r2, sp, #19
 3003              	.LVL324:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3004              		.loc 1 1226 11 view .LVU772
 3005 0020 3046     		mov	r0, r6
 3006              	.LVL325:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3007              		.loc 1 1226 11 view .LVU773
 3008 0022 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 3009              	.LVL326:
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 3010              		.loc 1 1227 5 is_stmt 1 view .LVU774
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 3011              		.loc 1 1227 8 is_stmt 0 view .LVU775
 3012 0026 0399     		ldr	r1, [sp, #12]
 3013 0028 10B1     		cbz	r0, .L149
 3014              	.L151:
 3015              	.LVL327:
ARM GAS  /tmp/cc9CDFEk.s 			page 87


1228:Src/bno055/bno055.c ****     }
 3016              		.loc 1 1228 16 view .LVU776
 3017 002a 0120     		movs	r0, #1
 3018              	.LBE207:
 3019              	.LBE209:
 370:Src/bno055/bno055.c **** 
 3020              		.loc 1 370 1 view .LVU777
 3021 002c 07B0     		add	sp, sp, #28
 3022              	.LCFI103:
 3023              		.cfi_remember_state
 3024              		.cfi_def_cfa_offset 20
 3025              		@ sp needed
 3026 002e F0BD     		pop	{r4, r5, r6, r7, pc}
 3027              	.LVL328:
 3028              	.L149:
 3029              	.LCFI104:
 3030              		.cfi_restore_state
 3031              	.LBB210:
 3032              	.LBB208:
1230:Src/bno055/bno055.c ****         HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 3033              		.loc 1 1230 5 is_stmt 1 view .LVU778
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3034              		.loc 1 1231 9 is_stmt 0 view .LVU779
 3035 0030 0097     		str	r7, [sp]
 3036 0032 0223     		movs	r3, #2
 3037 0034 3046     		mov	r0, r6
 3038              	.LVL329:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3039              		.loc 1 1231 9 view .LVU780
 3040 0036 05AA     		add	r2, sp, #20
 3041              	.LVL330:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3042              		.loc 1 1231 9 view .LVU781
 3043 0038 FFF7FEFF 		bl	HAL_I2C_Master_Receive
 3044              	.LVL331:
 3045              		.loc 1 1232 5 is_stmt 1 view .LVU782
 3046              		.loc 1 1232 8 is_stmt 0 view .LVU783
 3047 003c 0028     		cmp	r0, #0
 3048 003e F4D1     		bne	.L151
 3049              	.LVL332:
 3050              		.loc 1 1232 8 view .LVU784
 3051              	.LBE208:
 3052              	.LBE210:
 366:Src/bno055/bno055.c ****            ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 3053              		.loc 1 366 5 is_stmt 1 view .LVU785
 366:Src/bno055/bno055.c ****            ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 3054              		.loc 1 366 44 is_stmt 0 view .LVU786
 3055 0040 BDF91430 		ldrsh	r3, [sp, #20]
 3056 0044 07EE903A 		vmov	s15, r3	@ int
 368:Src/bno055/bno055.c ****     return BNO_OK;
 3057              		.loc 1 368 54 view .LVU787
 3058 0048 A37B     		ldrb	r3, [r4, #14]	@ zero_extendqisi2
 366:Src/bno055/bno055.c ****            ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 3059              		.loc 1 366 44 view .LVU788
 3060 004a F8EEE77A 		vcvt.f32.s32	s15, s15
 368:Src/bno055/bno055.c ****     return BNO_OK;
 3061              		.loc 1 368 54 view .LVU789
ARM GAS  /tmp/cc9CDFEk.s 			page 88


 3062 004e 1BB9     		cbnz	r3, .L152
 366:Src/bno055/bno055.c ****            ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 3063              		.loc 1 366 44 view .LVU790
 3064 0050 9FED037A 		vldr.32	s14, .L154
 3065 0054 C7EE877A 		vdiv.f32	s15, s15, s14
 3066              	.L152:
 366:Src/bno055/bno055.c ****            ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 3067              		.loc 1 366 10 view .LVU791
 3068 0058 C5ED007A 		vstr.32	s15, [r5]
 369:Src/bno055/bno055.c **** };
 3069              		.loc 1 369 5 is_stmt 1 view .LVU792
 370:Src/bno055/bno055.c **** 
 3070              		.loc 1 370 1 is_stmt 0 view .LVU793
 3071 005c 07B0     		add	sp, sp, #28
 3072              	.LCFI105:
 3073              		.cfi_def_cfa_offset 20
 3074              		@ sp needed
 3075 005e F0BD     		pop	{r4, r5, r6, r7, pc}
 3076              	.LVL333:
 3077              	.L155:
 370:Src/bno055/bno055.c **** 
 3078              		.loc 1 370 1 view .LVU794
 3079              		.align	2
 3080              	.L154:
 3081 0060 0000C842 		.word	1120403456
 3082              		.cfi_endproc
 3083              	.LFE141:
 3085              		.section	.text.bno055_gyro_x,"ax",%progbits
 3086              		.align	1
 3087              		.p2align 2,,3
 3088              		.global	bno055_gyro_x
 3089              		.syntax unified
 3090              		.thumb
 3091              		.thumb_func
 3092              		.fpu fpv4-sp-d16
 3094              	bno055_gyro_x:
 3095              	.LVL334:
 3096              	.LFB143:
 427:Src/bno055/bno055.c ****     error_bno err;
 3097              		.loc 1 427 50 is_stmt 1 view -0
 3098              		.cfi_startproc
 3099              		@ args = 0, pretend = 0, frame = 16
 3100              		@ frame_needed = 0, uses_anonymous_args = 0
 428:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 3101              		.loc 1 428 5 view .LVU796
 434:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 2)) != BNO_OK) {
 3102              		.loc 1 434 5 view .LVU797
 435:Src/bno055/bno055.c ****         return err;
 3103              		.loc 1 435 5 view .LVU798
 427:Src/bno055/bno055.c ****     error_bno err;
 3104              		.loc 1 427 50 is_stmt 0 view .LVU799
 3105 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3106              	.LCFI106:
 3107              		.cfi_def_cfa_offset 20
 3108              		.cfi_offset 4, -20
 3109              		.cfi_offset 5, -16
 3110              		.cfi_offset 6, -12
ARM GAS  /tmp/cc9CDFEk.s 			page 89


 3111              		.cfi_offset 7, -8
 3112              		.cfi_offset 14, -4
 3113 0002 87B0     		sub	sp, sp, #28
 3114              	.LCFI107:
 3115              		.cfi_def_cfa_offset 48
 3116 0004 0668     		ldr	r6, [r0]
 3117              	.LVL335:
 3118              	.LBB213:
 3119              	.LBB214:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3120              		.loc 1 1226 11 view .LVU800
 3121 0006 4FF0FF37 		mov	r7, #-1
 3122 000a 1423     		movs	r3, #20
 3123 000c 0097     		str	r7, [sp]
 3124              	.LVL336:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3125              		.loc 1 1226 11 view .LVU801
 3126 000e 8DF81330 		strb	r3, [sp, #19]
 3127              	.LVL337:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3128              		.loc 1 1226 11 view .LVU802
 3129              	.LBE214:
 3130              	.LBI213:
1220:Src/bno055/bno055.c ****                            uint32_t buf_size) {
 3131              		.loc 1 1220 11 is_stmt 1 view .LVU803
 3132              	.LBB215:
1222:Src/bno055/bno055.c ****     // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
 3133              		.loc 1 1222 5 view .LVU804
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3134              		.loc 1 1226 5 view .LVU805
 3135              	.LBE215:
 3136              	.LBE213:
 427:Src/bno055/bno055.c ****     error_bno err;
 3137              		.loc 1 427 50 is_stmt 0 view .LVU806
 3138 0012 0446     		mov	r4, r0
 3139 0014 0D46     		mov	r5, r1
 3140              	.LBB218:
 3141              	.LBB216:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3142              		.loc 1 1226 11 view .LVU807
 3143 0016 0123     		movs	r3, #1
 3144              	.LVL338:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3145              		.loc 1 1226 11 view .LVU808
 3146 0018 8179     		ldrb	r1, [r0, #6]	@ zero_extendqisi2
 3147              	.LVL339:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3148              		.loc 1 1226 11 view .LVU809
 3149 001a 0391     		str	r1, [sp, #12]
 3150 001c 0DF11302 		add	r2, sp, #19
 3151              	.LVL340:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3152              		.loc 1 1226 11 view .LVU810
 3153 0020 3046     		mov	r0, r6
 3154              	.LVL341:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3155              		.loc 1 1226 11 view .LVU811
ARM GAS  /tmp/cc9CDFEk.s 			page 90


 3156 0022 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 3157              	.LVL342:
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 3158              		.loc 1 1227 5 is_stmt 1 view .LVU812
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 3159              		.loc 1 1227 8 is_stmt 0 view .LVU813
 3160 0026 0399     		ldr	r1, [sp, #12]
 3161 0028 10B1     		cbz	r0, .L157
 3162              	.L159:
 3163              	.LVL343:
1228:Src/bno055/bno055.c ****     }
 3164              		.loc 1 1228 16 view .LVU814
 3165 002a 0120     		movs	r0, #1
 3166              	.LBE216:
 3167              	.LBE218:
 443:Src/bno055/bno055.c **** 
 3168              		.loc 1 443 1 view .LVU815
 3169 002c 07B0     		add	sp, sp, #28
 3170              	.LCFI108:
 3171              		.cfi_remember_state
 3172              		.cfi_def_cfa_offset 20
 3173              		@ sp needed
 3174 002e F0BD     		pop	{r4, r5, r6, r7, pc}
 3175              	.LVL344:
 3176              	.L157:
 3177              	.LCFI109:
 3178              		.cfi_restore_state
 3179              	.LBB219:
 3180              	.LBB217:
1230:Src/bno055/bno055.c ****         HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 3181              		.loc 1 1230 5 is_stmt 1 view .LVU816
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3182              		.loc 1 1231 9 is_stmt 0 view .LVU817
 3183 0030 0097     		str	r7, [sp]
 3184 0032 0223     		movs	r3, #2
 3185 0034 3046     		mov	r0, r6
 3186              	.LVL345:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3187              		.loc 1 1231 9 view .LVU818
 3188 0036 05AA     		add	r2, sp, #20
 3189              	.LVL346:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3190              		.loc 1 1231 9 view .LVU819
 3191 0038 FFF7FEFF 		bl	HAL_I2C_Master_Receive
 3192              	.LVL347:
 3193              		.loc 1 1232 5 is_stmt 1 view .LVU820
 3194              		.loc 1 1232 8 is_stmt 0 view .LVU821
 3195 003c 0028     		cmp	r0, #0
 3196 003e F4D1     		bne	.L159
 3197              	.LVL348:
 3198              		.loc 1 1232 8 view .LVU822
 3199              	.LBE217:
 3200              	.LBE219:
 439:Src/bno055/bno055.c ****            ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 3201              		.loc 1 439 5 is_stmt 1 view .LVU823
 439:Src/bno055/bno055.c ****            ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 3202              		.loc 1 439 44 is_stmt 0 view .LVU824
ARM GAS  /tmp/cc9CDFEk.s 			page 91


 3203 0040 BDF91420 		ldrsh	r2, [sp, #20]
 441:Src/bno055/bno055.c ****     return BNO_OK;
 3204              		.loc 1 441 50 view .LVU825
 3205 0044 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 3206 0046 DFED096A 		vldr.32	s13, .L163
 439:Src/bno055/bno055.c ****            ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 3207              		.loc 1 439 44 view .LVU826
 3208 004a 07EE102A 		vmov	s14, r2	@ int
 441:Src/bno055/bno055.c ****     return BNO_OK;
 3209              		.loc 1 441 50 view .LVU827
 3210 004e 002B     		cmp	r3, #0
 439:Src/bno055/bno055.c ****            ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 3211              		.loc 1 439 44 view .LVU828
 3212 0050 B8EEC77A 		vcvt.f32.s32	s14, s14
 441:Src/bno055/bno055.c ****     return BNO_OK;
 3213              		.loc 1 441 50 view .LVU829
 3214 0054 F3EE007A 		vmov.f32	s15, #1.6e+1
 3215 0058 18BF     		it	ne
 3216 005a F0EE667A 		vmovne.f32	s15, s13
 439:Src/bno055/bno055.c ****            ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 3217              		.loc 1 439 44 view .LVU830
 3218 005e C7EE276A 		vdiv.f32	s13, s14, s15
 439:Src/bno055/bno055.c ****            ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 3219              		.loc 1 439 10 view .LVU831
 3220 0062 C5ED006A 		vstr.32	s13, [r5]
 442:Src/bno055/bno055.c **** };
 3221              		.loc 1 442 5 is_stmt 1 view .LVU832
 443:Src/bno055/bno055.c **** 
 3222              		.loc 1 443 1 is_stmt 0 view .LVU833
 3223 0066 07B0     		add	sp, sp, #28
 3224              	.LCFI110:
 3225              		.cfi_def_cfa_offset 20
 3226              		@ sp needed
 3227 0068 F0BD     		pop	{r4, r5, r6, r7, pc}
 3228              	.LVL349:
 3229              	.L164:
 443:Src/bno055/bno055.c **** 
 3230              		.loc 1 443 1 view .LVU834
 3231 006a 00BF     		.align	2
 3232              	.L163:
 3233 006c 00006144 		.word	1147207680
 3234              		.cfi_endproc
 3235              	.LFE143:
 3237              		.section	.text.bno055_gyro_y,"ax",%progbits
 3238              		.align	1
 3239              		.p2align 2,,3
 3240              		.global	bno055_gyro_y
 3241              		.syntax unified
 3242              		.thumb
 3243              		.thumb_func
 3244              		.fpu fpv4-sp-d16
 3246              	bno055_gyro_y:
 3247              	.LVL350:
 3248              	.LFB144:
 462:Src/bno055/bno055.c ****     error_bno err;
 3249              		.loc 1 462 50 is_stmt 1 view -0
 3250              		.cfi_startproc
ARM GAS  /tmp/cc9CDFEk.s 			page 92


 3251              		@ args = 0, pretend = 0, frame = 16
 3252              		@ frame_needed = 0, uses_anonymous_args = 0
 463:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 3253              		.loc 1 463 5 view .LVU836
 469:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Y_LSB, data, 2)) != BNO_OK) {
 3254              		.loc 1 469 5 view .LVU837
 470:Src/bno055/bno055.c ****         return err;
 3255              		.loc 1 470 5 view .LVU838
 462:Src/bno055/bno055.c ****     error_bno err;
 3256              		.loc 1 462 50 is_stmt 0 view .LVU839
 3257 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3258              	.LCFI111:
 3259              		.cfi_def_cfa_offset 20
 3260              		.cfi_offset 4, -20
 3261              		.cfi_offset 5, -16
 3262              		.cfi_offset 6, -12
 3263              		.cfi_offset 7, -8
 3264              		.cfi_offset 14, -4
 3265 0002 87B0     		sub	sp, sp, #28
 3266              	.LCFI112:
 3267              		.cfi_def_cfa_offset 48
 3268 0004 0668     		ldr	r6, [r0]
 3269              	.LVL351:
 3270              	.LBB222:
 3271              	.LBB223:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3272              		.loc 1 1226 11 view .LVU840
 3273 0006 4FF0FF37 		mov	r7, #-1
 3274 000a 1623     		movs	r3, #22
 3275 000c 0097     		str	r7, [sp]
 3276              	.LVL352:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3277              		.loc 1 1226 11 view .LVU841
 3278 000e 8DF81330 		strb	r3, [sp, #19]
 3279              	.LVL353:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3280              		.loc 1 1226 11 view .LVU842
 3281              	.LBE223:
 3282              	.LBI222:
1220:Src/bno055/bno055.c ****                            uint32_t buf_size) {
 3283              		.loc 1 1220 11 is_stmt 1 view .LVU843
 3284              	.LBB224:
1222:Src/bno055/bno055.c ****     // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
 3285              		.loc 1 1222 5 view .LVU844
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3286              		.loc 1 1226 5 view .LVU845
 3287              	.LBE224:
 3288              	.LBE222:
 462:Src/bno055/bno055.c ****     error_bno err;
 3289              		.loc 1 462 50 is_stmt 0 view .LVU846
 3290 0012 0446     		mov	r4, r0
 3291 0014 0D46     		mov	r5, r1
 3292              	.LBB227:
 3293              	.LBB225:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3294              		.loc 1 1226 11 view .LVU847
 3295 0016 0123     		movs	r3, #1
ARM GAS  /tmp/cc9CDFEk.s 			page 93


 3296              	.LVL354:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3297              		.loc 1 1226 11 view .LVU848
 3298 0018 8179     		ldrb	r1, [r0, #6]	@ zero_extendqisi2
 3299              	.LVL355:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3300              		.loc 1 1226 11 view .LVU849
 3301 001a 0391     		str	r1, [sp, #12]
 3302 001c 0DF11302 		add	r2, sp, #19
 3303              	.LVL356:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3304              		.loc 1 1226 11 view .LVU850
 3305 0020 3046     		mov	r0, r6
 3306              	.LVL357:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3307              		.loc 1 1226 11 view .LVU851
 3308 0022 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 3309              	.LVL358:
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 3310              		.loc 1 1227 5 is_stmt 1 view .LVU852
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 3311              		.loc 1 1227 8 is_stmt 0 view .LVU853
 3312 0026 0399     		ldr	r1, [sp, #12]
 3313 0028 10B1     		cbz	r0, .L166
 3314              	.L168:
 3315              	.LVL359:
1228:Src/bno055/bno055.c ****     }
 3316              		.loc 1 1228 16 view .LVU854
 3317 002a 0120     		movs	r0, #1
 3318              	.LBE225:
 3319              	.LBE227:
 478:Src/bno055/bno055.c **** 
 3320              		.loc 1 478 1 view .LVU855
 3321 002c 07B0     		add	sp, sp, #28
 3322              	.LCFI113:
 3323              		.cfi_remember_state
 3324              		.cfi_def_cfa_offset 20
 3325              		@ sp needed
 3326 002e F0BD     		pop	{r4, r5, r6, r7, pc}
 3327              	.LVL360:
 3328              	.L166:
 3329              	.LCFI114:
 3330              		.cfi_restore_state
 3331              	.LBB228:
 3332              	.LBB226:
1230:Src/bno055/bno055.c ****         HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 3333              		.loc 1 1230 5 is_stmt 1 view .LVU856
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3334              		.loc 1 1231 9 is_stmt 0 view .LVU857
 3335 0030 0097     		str	r7, [sp]
 3336 0032 0223     		movs	r3, #2
 3337 0034 3046     		mov	r0, r6
 3338              	.LVL361:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3339              		.loc 1 1231 9 view .LVU858
 3340 0036 05AA     		add	r2, sp, #20
 3341              	.LVL362:
ARM GAS  /tmp/cc9CDFEk.s 			page 94


1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3342              		.loc 1 1231 9 view .LVU859
 3343 0038 FFF7FEFF 		bl	HAL_I2C_Master_Receive
 3344              	.LVL363:
 3345              		.loc 1 1232 5 is_stmt 1 view .LVU860
 3346              		.loc 1 1232 8 is_stmt 0 view .LVU861
 3347 003c 0028     		cmp	r0, #0
 3348 003e F4D1     		bne	.L168
 3349              	.LVL364:
 3350              		.loc 1 1232 8 view .LVU862
 3351              	.LBE226:
 3352              	.LBE228:
 474:Src/bno055/bno055.c ****            ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 3353              		.loc 1 474 5 is_stmt 1 view .LVU863
 474:Src/bno055/bno055.c ****            ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 3354              		.loc 1 474 44 is_stmt 0 view .LVU864
 3355 0040 BDF91420 		ldrsh	r2, [sp, #20]
 476:Src/bno055/bno055.c ****     return BNO_OK;
 3356              		.loc 1 476 50 view .LVU865
 3357 0044 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 3358 0046 DFED096A 		vldr.32	s13, .L172
 474:Src/bno055/bno055.c ****            ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 3359              		.loc 1 474 44 view .LVU866
 3360 004a 07EE102A 		vmov	s14, r2	@ int
 476:Src/bno055/bno055.c ****     return BNO_OK;
 3361              		.loc 1 476 50 view .LVU867
 3362 004e 002B     		cmp	r3, #0
 474:Src/bno055/bno055.c ****            ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 3363              		.loc 1 474 44 view .LVU868
 3364 0050 B8EEC77A 		vcvt.f32.s32	s14, s14
 476:Src/bno055/bno055.c ****     return BNO_OK;
 3365              		.loc 1 476 50 view .LVU869
 3366 0054 F3EE007A 		vmov.f32	s15, #1.6e+1
 3367 0058 18BF     		it	ne
 3368 005a F0EE667A 		vmovne.f32	s15, s13
 474:Src/bno055/bno055.c ****            ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 3369              		.loc 1 474 44 view .LVU870
 3370 005e C7EE276A 		vdiv.f32	s13, s14, s15
 474:Src/bno055/bno055.c ****            ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 3371              		.loc 1 474 10 view .LVU871
 3372 0062 C5ED006A 		vstr.32	s13, [r5]
 477:Src/bno055/bno055.c **** };
 3373              		.loc 1 477 5 is_stmt 1 view .LVU872
 478:Src/bno055/bno055.c **** 
 3374              		.loc 1 478 1 is_stmt 0 view .LVU873
 3375 0066 07B0     		add	sp, sp, #28
 3376              	.LCFI115:
 3377              		.cfi_def_cfa_offset 20
 3378              		@ sp needed
 3379 0068 F0BD     		pop	{r4, r5, r6, r7, pc}
 3380              	.LVL365:
 3381              	.L173:
 478:Src/bno055/bno055.c **** 
 3382              		.loc 1 478 1 view .LVU874
 3383 006a 00BF     		.align	2
 3384              	.L172:
 3385 006c 00006144 		.word	1147207680
ARM GAS  /tmp/cc9CDFEk.s 			page 95


 3386              		.cfi_endproc
 3387              	.LFE144:
 3389              		.section	.text.bno055_gravity,"ax",%progbits
 3390              		.align	1
 3391              		.p2align 2,,3
 3392              		.global	bno055_gravity
 3393              		.syntax unified
 3394              		.thumb
 3395              		.thumb_func
 3396              		.fpu fpv4-sp-d16
 3398              	bno055_gravity:
 3399              	.LVL366:
 3400              	.LFB154:
 813:Src/bno055/bno055.c ****     error_bno err;
 3401              		.loc 1 813 61 is_stmt 1 view -0
 3402              		.cfi_startproc
 3403              		@ args = 0, pretend = 0, frame = 24
 3404              		@ frame_needed = 0, uses_anonymous_args = 0
 814:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 3405              		.loc 1 814 5 view .LVU876
 820:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 6)) != BNO_OK) {
 3406              		.loc 1 820 5 view .LVU877
 821:Src/bno055/bno055.c ****         return err;
 3407              		.loc 1 821 5 view .LVU878
 813:Src/bno055/bno055.c ****     error_bno err;
 3408              		.loc 1 813 61 is_stmt 0 view .LVU879
 3409 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3410              	.LCFI116:
 3411              		.cfi_def_cfa_offset 20
 3412              		.cfi_offset 4, -20
 3413              		.cfi_offset 5, -16
 3414              		.cfi_offset 6, -12
 3415              		.cfi_offset 7, -8
 3416              		.cfi_offset 14, -4
 3417 0002 89B0     		sub	sp, sp, #36
 3418              	.LCFI117:
 3419              		.cfi_def_cfa_offset 56
 3420 0004 0668     		ldr	r6, [r0]
 3421              	.LVL367:
 3422              	.LBB231:
 3423              	.LBB232:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3424              		.loc 1 1226 11 view .LVU880
 3425 0006 4FF0FF37 		mov	r7, #-1
 3426 000a 2E23     		movs	r3, #46
 3427 000c 0097     		str	r7, [sp]
 3428              	.LVL368:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3429              		.loc 1 1226 11 view .LVU881
 3430 000e 8DF81730 		strb	r3, [sp, #23]
 3431              	.LVL369:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3432              		.loc 1 1226 11 view .LVU882
 3433              	.LBE232:
 3434              	.LBI231:
1220:Src/bno055/bno055.c ****                            uint32_t buf_size) {
 3435              		.loc 1 1220 11 is_stmt 1 view .LVU883
ARM GAS  /tmp/cc9CDFEk.s 			page 96


 3436              	.LBB233:
1222:Src/bno055/bno055.c ****     // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
 3437              		.loc 1 1222 5 view .LVU884
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3438              		.loc 1 1226 5 view .LVU885
 3439              	.LBE233:
 3440              	.LBE231:
 813:Src/bno055/bno055.c ****     error_bno err;
 3441              		.loc 1 813 61 is_stmt 0 view .LVU886
 3442 0012 0446     		mov	r4, r0
 3443 0014 0D46     		mov	r5, r1
 3444              	.LBB236:
 3445              	.LBB234:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3446              		.loc 1 1226 11 view .LVU887
 3447 0016 0123     		movs	r3, #1
 3448              	.LVL370:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3449              		.loc 1 1226 11 view .LVU888
 3450 0018 8179     		ldrb	r1, [r0, #6]	@ zero_extendqisi2
 3451              	.LVL371:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3452              		.loc 1 1226 11 view .LVU889
 3453 001a 0391     		str	r1, [sp, #12]
 3454 001c 0DF11702 		add	r2, sp, #23
 3455              	.LVL372:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3456              		.loc 1 1226 11 view .LVU890
 3457 0020 3046     		mov	r0, r6
 3458              	.LVL373:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3459              		.loc 1 1226 11 view .LVU891
 3460 0022 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 3461              	.LVL374:
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 3462              		.loc 1 1227 5 is_stmt 1 view .LVU892
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 3463              		.loc 1 1227 8 is_stmt 0 view .LVU893
 3464 0026 0399     		ldr	r1, [sp, #12]
 3465 0028 10B1     		cbz	r0, .L175
 3466              	.L177:
 3467              	.LVL375:
1228:Src/bno055/bno055.c ****     }
 3468              		.loc 1 1228 16 view .LVU894
 3469 002a 0120     		movs	r0, #1
 3470              	.LBE234:
 3471              	.LBE236:
 830:Src/bno055/bno055.c **** 
 3472              		.loc 1 830 1 view .LVU895
 3473 002c 09B0     		add	sp, sp, #36
 3474              	.LCFI118:
 3475              		.cfi_remember_state
 3476              		.cfi_def_cfa_offset 20
 3477              		@ sp needed
 3478 002e F0BD     		pop	{r4, r5, r6, r7, pc}
 3479              	.LVL376:
 3480              	.L175:
ARM GAS  /tmp/cc9CDFEk.s 			page 97


 3481              	.LCFI119:
 3482              		.cfi_restore_state
 3483              	.LBB237:
 3484              	.LBB235:
1230:Src/bno055/bno055.c ****         HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 3485              		.loc 1 1230 5 is_stmt 1 view .LVU896
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3486              		.loc 1 1231 9 is_stmt 0 view .LVU897
 3487 0030 0097     		str	r7, [sp]
 3488 0032 0623     		movs	r3, #6
 3489 0034 3046     		mov	r0, r6
 3490              	.LVL377:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3491              		.loc 1 1231 9 view .LVU898
 3492 0036 06AA     		add	r2, sp, #24
 3493              	.LVL378:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3494              		.loc 1 1231 9 view .LVU899
 3495 0038 FFF7FEFF 		bl	HAL_I2C_Master_Receive
 3496              	.LVL379:
 3497              		.loc 1 1232 5 is_stmt 1 view .LVU900
 3498              		.loc 1 1232 8 is_stmt 0 view .LVU901
 3499 003c 0028     		cmp	r0, #0
 3500 003e F4D1     		bne	.L177
 3501              	.LVL380:
 3502              		.loc 1 1232 8 view .LVU902
 3503              	.LBE235:
 3504              	.LBE237:
 824:Src/bno055/bno055.c ****                                                          : BNO_ACC_SCALE_MG;
 3505              		.loc 1 824 5 is_stmt 1 view .LVU903
 827:Src/bno055/bno055.c ****     buf->x = (s16)((data[5] << 8) | data[4]) / scale;
 3506              		.loc 1 827 46 is_stmt 0 view .LVU904
 3507 0040 BDF91A20 		ldrsh	r2, [sp, #26]
 825:Src/bno055/bno055.c ****     buf->x = (s16)((data[1] << 8) | data[0]) / scale;
 3508              		.loc 1 825 58 view .LVU905
 3509 0044 A37B     		ldrb	r3, [r4, #14]	@ zero_extendqisi2
 3510 0046 DFED0E7A 		vldr.32	s15, .L181
 827:Src/bno055/bno055.c ****     buf->x = (s16)((data[5] << 8) | data[4]) / scale;
 3511              		.loc 1 827 46 view .LVU906
 3512 004a 06EE902A 		vmov	s13, r2	@ int
 828:Src/bno055/bno055.c ****     return BNO_OK;
 3513              		.loc 1 828 46 view .LVU907
 3514 004e BDF91C20 		ldrsh	r2, [sp, #28]
 3515 0052 07EE102A 		vmov	s14, r2	@ int
 827:Src/bno055/bno055.c ****     buf->x = (s16)((data[5] << 8) | data[4]) / scale;
 3516              		.loc 1 827 46 view .LVU908
 3517 0056 F8EEE66A 		vcvt.f32.s32	s13, s13
 828:Src/bno055/bno055.c ****     return BNO_OK;
 3518              		.loc 1 828 46 view .LVU909
 3519 005a B8EEC77A 		vcvt.f32.s32	s14, s14
 825:Src/bno055/bno055.c ****     buf->x = (s16)((data[1] << 8) | data[0]) / scale;
 3520              		.loc 1 825 58 view .LVU910
 3521 005e B7EE006A 		vmov.f32	s12, #1.0e+0
 3522 0062 002B     		cmp	r3, #0
 3523 0064 18BF     		it	ne
 3524 0066 F0EE467A 		vmovne.f32	s15, s12
 3525              	.LVL381:
ARM GAS  /tmp/cc9CDFEk.s 			page 98


 826:Src/bno055/bno055.c ****     buf->y = (s16)((data[3] << 8) | data[2]) / scale;
 3526              		.loc 1 826 5 is_stmt 1 view .LVU911
 827:Src/bno055/bno055.c ****     buf->x = (s16)((data[5] << 8) | data[4]) / scale;
 3527              		.loc 1 827 5 view .LVU912
 827:Src/bno055/bno055.c ****     buf->x = (s16)((data[5] << 8) | data[4]) / scale;
 3528              		.loc 1 827 46 is_stmt 0 view .LVU913
 3529 006a 86EEA76A 		vdiv.f32	s12, s13, s15
 828:Src/bno055/bno055.c ****     return BNO_OK;
 3530              		.loc 1 828 46 view .LVU914
 3531 006e C7EE276A 		vdiv.f32	s13, s14, s15
 827:Src/bno055/bno055.c ****     buf->x = (s16)((data[5] << 8) | data[4]) / scale;
 3532              		.loc 1 827 12 view .LVU915
 3533 0072 85ED016A 		vstr.32	s12, [r5, #4]
 828:Src/bno055/bno055.c ****     return BNO_OK;
 3534              		.loc 1 828 5 is_stmt 1 view .LVU916
 828:Src/bno055/bno055.c ****     return BNO_OK;
 3535              		.loc 1 828 12 is_stmt 0 view .LVU917
 3536 0076 C5ED006A 		vstr.32	s13, [r5]
 829:Src/bno055/bno055.c **** }
 3537              		.loc 1 829 5 is_stmt 1 view .LVU918
 830:Src/bno055/bno055.c **** 
 3538              		.loc 1 830 1 is_stmt 0 view .LVU919
 3539 007a 09B0     		add	sp, sp, #36
 3540              	.LCFI120:
 3541              		.cfi_def_cfa_offset 20
 3542              		@ sp needed
 3543 007c F0BD     		pop	{r4, r5, r6, r7, pc}
 3544              	.LVL382:
 3545              	.L182:
 830:Src/bno055/bno055.c **** 
 3546              		.loc 1 830 1 view .LVU920
 3547 007e 00BF     		.align	2
 3548              	.L181:
 3549 0080 0000C842 		.word	1120403456
 3550              		.cfi_endproc
 3551              	.LFE154:
 3553              		.section	.text.bno055_mag,"ax",%progbits
 3554              		.align	1
 3555              		.p2align 2,,3
 3556              		.global	bno055_mag
 3557              		.syntax unified
 3558              		.thumb
 3559              		.thumb_func
 3560              		.fpu fpv4-sp-d16
 3562              	bno055_mag:
 3563              	.LVL383:
 3564              	.LFB150:
 674:Src/bno055/bno055.c ****     error_bno err;
 3565              		.loc 1 674 57 is_stmt 1 view -0
 3566              		.cfi_startproc
 3567              		@ args = 0, pretend = 0, frame = 16
 3568              		@ frame_needed = 0, uses_anonymous_args = 0
 675:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 3569              		.loc 1 675 5 view .LVU922
 681:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 6)) != BNO_OK) {
 3570              		.loc 1 681 5 view .LVU923
 682:Src/bno055/bno055.c ****         return err;
ARM GAS  /tmp/cc9CDFEk.s 			page 99


 3571              		.loc 1 682 5 view .LVU924
 674:Src/bno055/bno055.c ****     error_bno err;
 3572              		.loc 1 674 57 is_stmt 0 view .LVU925
 3573 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3574              	.LCFI121:
 3575              		.cfi_def_cfa_offset 20
 3576              		.cfi_offset 4, -20
 3577              		.cfi_offset 5, -16
 3578              		.cfi_offset 6, -12
 3579              		.cfi_offset 7, -8
 3580              		.cfi_offset 14, -4
 3581 0002 0568     		ldr	r5, [r0]
 3582              	.LVL384:
 3583              	.LBB240:
 3584              	.LBB241:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3585              		.loc 1 1226 11 view .LVU926
 3586 0004 8679     		ldrb	r6, [r0, #6]	@ zero_extendqisi2
 3587              	.LBE241:
 3588              	.LBE240:
 674:Src/bno055/bno055.c ****     error_bno err;
 3589              		.loc 1 674 57 view .LVU927
 3590 0006 87B0     		sub	sp, sp, #28
 3591              	.LCFI122:
 3592              		.cfi_def_cfa_offset 48
 3593 0008 0E23     		movs	r3, #14
 3594              	.LBB245:
 3595              	.LBB242:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3596              		.loc 1 1226 11 view .LVU928
 3597 000a 4FF0FF37 		mov	r7, #-1
 3598              	.LBE242:
 3599              	.LBE245:
 674:Src/bno055/bno055.c ****     error_bno err;
 3600              		.loc 1 674 57 view .LVU929
 3601 000e 0C46     		mov	r4, r1
 3602 0010 8DF80F30 		strb	r3, [sp, #15]
 3603              	.LVL385:
 3604              	.LBB246:
 3605              	.LBI240:
1220:Src/bno055/bno055.c ****                            uint32_t buf_size) {
 3606              		.loc 1 1220 11 is_stmt 1 view .LVU930
 3607              	.LBB243:
1222:Src/bno055/bno055.c ****     // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
 3608              		.loc 1 1222 5 view .LVU931
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3609              		.loc 1 1226 5 view .LVU932
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3610              		.loc 1 1226 11 is_stmt 0 view .LVU933
 3611 0014 0097     		str	r7, [sp]
 3612              	.LVL386:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3613              		.loc 1 1226 11 view .LVU934
 3614 0016 0123     		movs	r3, #1
 3615              	.LVL387:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3616              		.loc 1 1226 11 view .LVU935
ARM GAS  /tmp/cc9CDFEk.s 			page 100


 3617 0018 0DF10F02 		add	r2, sp, #15
 3618              	.LVL388:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3619              		.loc 1 1226 11 view .LVU936
 3620 001c 3146     		mov	r1, r6
 3621              	.LVL389:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3622              		.loc 1 1226 11 view .LVU937
 3623 001e 2846     		mov	r0, r5
 3624              	.LVL390:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3625              		.loc 1 1226 11 view .LVU938
 3626 0020 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 3627              	.LVL391:
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 3628              		.loc 1 1227 5 is_stmt 1 view .LVU939
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 3629              		.loc 1 1227 8 is_stmt 0 view .LVU940
 3630 0024 10B1     		cbz	r0, .L184
 3631              	.L186:
 3632              	.LVL392:
1228:Src/bno055/bno055.c ****     }
 3633              		.loc 1 1228 16 view .LVU941
 3634 0026 0120     		movs	r0, #1
 3635              	.LBE243:
 3636              	.LBE246:
 691:Src/bno055/bno055.c **** 
 3637              		.loc 1 691 1 view .LVU942
 3638 0028 07B0     		add	sp, sp, #28
 3639              	.LCFI123:
 3640              		.cfi_remember_state
 3641              		.cfi_def_cfa_offset 20
 3642              		@ sp needed
 3643 002a F0BD     		pop	{r4, r5, r6, r7, pc}
 3644              	.LVL393:
 3645              	.L184:
 3646              	.LCFI124:
 3647              		.cfi_restore_state
 3648              	.LBB247:
 3649              	.LBB244:
1230:Src/bno055/bno055.c ****         HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 3650              		.loc 1 1230 5 is_stmt 1 view .LVU943
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3651              		.loc 1 1231 9 is_stmt 0 view .LVU944
 3652 002c 0097     		str	r7, [sp]
 3653 002e 0623     		movs	r3, #6
 3654 0030 04AA     		add	r2, sp, #16
 3655              	.LVL394:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3656              		.loc 1 1231 9 view .LVU945
 3657 0032 3146     		mov	r1, r6
 3658 0034 2846     		mov	r0, r5
 3659              	.LVL395:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3660              		.loc 1 1231 9 view .LVU946
 3661 0036 FFF7FEFF 		bl	HAL_I2C_Master_Receive
 3662              	.LVL396:
ARM GAS  /tmp/cc9CDFEk.s 			page 101


 3663              		.loc 1 1232 5 is_stmt 1 view .LVU947
 3664              		.loc 1 1232 8 is_stmt 0 view .LVU948
 3665 003a 0028     		cmp	r0, #0
 3666 003c F3D1     		bne	.L186
 3667              	.LVL397:
 3668              		.loc 1 1232 8 view .LVU949
 3669              	.LBE244:
 3670              	.LBE247:
 686:Src/bno055/bno055.c ****     xyz->y = (s16)((data[3] << 8) | data[2]) / BNO_MAG_SCALE;
 3671              		.loc 1 686 5 is_stmt 1 view .LVU950
 686:Src/bno055/bno055.c ****     xyz->y = (s16)((data[3] << 8) | data[2]) / BNO_MAG_SCALE;
 3672              		.loc 1 686 46 is_stmt 0 view .LVU951
 3673 003e BDF91030 		ldrsh	r3, [sp, #16]
 3674 0042 9FED106A 		vldr.32	s12, .L188
 3675 0046 06EE903A 		vmov	s13, r3	@ int
 687:Src/bno055/bno055.c ****     xyz->z = (s16)((data[5] << 8) | data[4]) / BNO_MAG_SCALE;
 3676              		.loc 1 687 46 view .LVU952
 3677 004a BDF91230 		ldrsh	r3, [sp, #18]
 3678 004e 07EE103A 		vmov	s14, r3	@ int
 688:Src/bno055/bno055.c **** 
 3679              		.loc 1 688 46 view .LVU953
 3680 0052 BDF91430 		ldrsh	r3, [sp, #20]
 3681 0056 07EE903A 		vmov	s15, r3	@ int
 686:Src/bno055/bno055.c ****     xyz->y = (s16)((data[3] << 8) | data[2]) / BNO_MAG_SCALE;
 3682              		.loc 1 686 46 view .LVU954
 3683 005a F8EEE66A 		vcvt.f32.s32	s13, s13
 687:Src/bno055/bno055.c ****     xyz->z = (s16)((data[5] << 8) | data[4]) / BNO_MAG_SCALE;
 3684              		.loc 1 687 46 view .LVU955
 3685 005e B8EEC77A 		vcvt.f32.s32	s14, s14
 688:Src/bno055/bno055.c **** 
 3686              		.loc 1 688 46 view .LVU956
 3687 0062 F8EEE77A 		vcvt.f32.s32	s15, s15
 686:Src/bno055/bno055.c ****     xyz->y = (s16)((data[3] << 8) | data[2]) / BNO_MAG_SCALE;
 3688              		.loc 1 686 46 view .LVU957
 3689 0066 66EE866A 		vmul.f32	s13, s13, s12
 687:Src/bno055/bno055.c ****     xyz->z = (s16)((data[5] << 8) | data[4]) / BNO_MAG_SCALE;
 3690              		.loc 1 687 46 view .LVU958
 3691 006a 27EE067A 		vmul.f32	s14, s14, s12
 688:Src/bno055/bno055.c **** 
 3692              		.loc 1 688 46 view .LVU959
 3693 006e 67EE867A 		vmul.f32	s15, s15, s12
 686:Src/bno055/bno055.c ****     xyz->y = (s16)((data[3] << 8) | data[2]) / BNO_MAG_SCALE;
 3694              		.loc 1 686 12 view .LVU960
 3695 0072 C4ED006A 		vstr.32	s13, [r4]
 687:Src/bno055/bno055.c ****     xyz->z = (s16)((data[5] << 8) | data[4]) / BNO_MAG_SCALE;
 3696              		.loc 1 687 5 is_stmt 1 view .LVU961
 687:Src/bno055/bno055.c ****     xyz->z = (s16)((data[5] << 8) | data[4]) / BNO_MAG_SCALE;
 3697              		.loc 1 687 12 is_stmt 0 view .LVU962
 3698 0076 84ED017A 		vstr.32	s14, [r4, #4]
 688:Src/bno055/bno055.c **** 
 3699              		.loc 1 688 5 is_stmt 1 view .LVU963
 688:Src/bno055/bno055.c **** 
 3700              		.loc 1 688 12 is_stmt 0 view .LVU964
 3701 007a C4ED027A 		vstr.32	s15, [r4, #8]
 690:Src/bno055/bno055.c **** };
 3702              		.loc 1 690 5 is_stmt 1 view .LVU965
 691:Src/bno055/bno055.c **** 
ARM GAS  /tmp/cc9CDFEk.s 			page 102


 3703              		.loc 1 691 1 is_stmt 0 view .LVU966
 3704 007e 07B0     		add	sp, sp, #28
 3705              	.LCFI125:
 3706              		.cfi_def_cfa_offset 20
 3707              		@ sp needed
 3708 0080 F0BD     		pop	{r4, r5, r6, r7, pc}
 3709              	.LVL398:
 3710              	.L189:
 691:Src/bno055/bno055.c **** 
 3711              		.loc 1 691 1 view .LVU967
 3712 0082 00BF     		.align	2
 3713              	.L188:
 3714 0084 0000803D 		.word	1031798784
 3715              		.cfi_endproc
 3716              	.LFE150:
 3718              		.section	.text.bno055_linear_acc,"ax",%progbits
 3719              		.align	1
 3720              		.p2align 2,,3
 3721              		.global	bno055_linear_acc
 3722              		.syntax unified
 3723              		.thumb
 3724              		.thumb_func
 3725              		.fpu fpv4-sp-d16
 3727              	bno055_linear_acc:
 3728              	.LVL399:
 3729              	.LFB142:
 390:Src/bno055/bno055.c ****     error_bno err;
 3730              		.loc 1 390 64 is_stmt 1 view -0
 3731              		.cfi_startproc
 3732              		@ args = 0, pretend = 0, frame = 24
 3733              		@ frame_needed = 0, uses_anonymous_args = 0
 391:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 3734              		.loc 1 391 5 view .LVU969
 397:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 6)) != BNO_OK) {
 3735              		.loc 1 397 5 view .LVU970
 398:Src/bno055/bno055.c ****         return err;
 3736              		.loc 1 398 5 view .LVU971
 390:Src/bno055/bno055.c ****     error_bno err;
 3737              		.loc 1 390 64 is_stmt 0 view .LVU972
 3738 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3739              	.LCFI126:
 3740              		.cfi_def_cfa_offset 20
 3741              		.cfi_offset 4, -20
 3742              		.cfi_offset 5, -16
 3743              		.cfi_offset 6, -12
 3744              		.cfi_offset 7, -8
 3745              		.cfi_offset 14, -4
 3746 0002 89B0     		sub	sp, sp, #36
 3747              	.LCFI127:
 3748              		.cfi_def_cfa_offset 56
 3749 0004 0668     		ldr	r6, [r0]
 3750              	.LVL400:
 3751              	.LBB250:
 3752              	.LBB251:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3753              		.loc 1 1226 11 view .LVU973
 3754 0006 4FF0FF37 		mov	r7, #-1
ARM GAS  /tmp/cc9CDFEk.s 			page 103


 3755 000a 2823     		movs	r3, #40
 3756 000c 0097     		str	r7, [sp]
 3757              	.LVL401:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3758              		.loc 1 1226 11 view .LVU974
 3759 000e 8DF81730 		strb	r3, [sp, #23]
 3760              	.LVL402:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3761              		.loc 1 1226 11 view .LVU975
 3762              	.LBE251:
 3763              	.LBI250:
1220:Src/bno055/bno055.c ****                            uint32_t buf_size) {
 3764              		.loc 1 1220 11 is_stmt 1 view .LVU976
 3765              	.LBB252:
1222:Src/bno055/bno055.c ****     // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
 3766              		.loc 1 1222 5 view .LVU977
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3767              		.loc 1 1226 5 view .LVU978
 3768              	.LBE252:
 3769              	.LBE250:
 390:Src/bno055/bno055.c ****     error_bno err;
 3770              		.loc 1 390 64 is_stmt 0 view .LVU979
 3771 0012 0446     		mov	r4, r0
 3772 0014 0D46     		mov	r5, r1
 3773              	.LBB255:
 3774              	.LBB253:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3775              		.loc 1 1226 11 view .LVU980
 3776 0016 0123     		movs	r3, #1
 3777              	.LVL403:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3778              		.loc 1 1226 11 view .LVU981
 3779 0018 8179     		ldrb	r1, [r0, #6]	@ zero_extendqisi2
 3780              	.LVL404:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3781              		.loc 1 1226 11 view .LVU982
 3782 001a 0391     		str	r1, [sp, #12]
 3783 001c 0DF11702 		add	r2, sp, #23
 3784              	.LVL405:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3785              		.loc 1 1226 11 view .LVU983
 3786 0020 3046     		mov	r0, r6
 3787              	.LVL406:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3788              		.loc 1 1226 11 view .LVU984
 3789 0022 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 3790              	.LVL407:
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 3791              		.loc 1 1227 5 is_stmt 1 view .LVU985
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 3792              		.loc 1 1227 8 is_stmt 0 view .LVU986
 3793 0026 0399     		ldr	r1, [sp, #12]
 3794 0028 10B1     		cbz	r0, .L191
 3795              	.L193:
 3796              	.LVL408:
1228:Src/bno055/bno055.c ****     }
 3797              		.loc 1 1228 16 view .LVU987
ARM GAS  /tmp/cc9CDFEk.s 			page 104


 3798 002a 0120     		movs	r0, #1
 3799              	.LBE253:
 3800              	.LBE255:
 408:Src/bno055/bno055.c **** 
 3801              		.loc 1 408 1 view .LVU988
 3802 002c 09B0     		add	sp, sp, #36
 3803              	.LCFI128:
 3804              		.cfi_remember_state
 3805              		.cfi_def_cfa_offset 20
 3806              		@ sp needed
 3807 002e F0BD     		pop	{r4, r5, r6, r7, pc}
 3808              	.LVL409:
 3809              	.L191:
 3810              	.LCFI129:
 3811              		.cfi_restore_state
 3812              	.LBB256:
 3813              	.LBB254:
1230:Src/bno055/bno055.c ****         HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 3814              		.loc 1 1230 5 is_stmt 1 view .LVU989
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3815              		.loc 1 1231 9 is_stmt 0 view .LVU990
 3816 0030 0097     		str	r7, [sp]
 3817 0032 0623     		movs	r3, #6
 3818 0034 3046     		mov	r0, r6
 3819              	.LVL410:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3820              		.loc 1 1231 9 view .LVU991
 3821 0036 06AA     		add	r2, sp, #24
 3822              	.LVL411:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3823              		.loc 1 1231 9 view .LVU992
 3824 0038 FFF7FEFF 		bl	HAL_I2C_Master_Receive
 3825              	.LVL412:
 3826              		.loc 1 1232 5 is_stmt 1 view .LVU993
 3827              		.loc 1 1232 8 is_stmt 0 view .LVU994
 3828 003c 0028     		cmp	r0, #0
 3829 003e F4D1     		bne	.L193
 3830              	.LVL413:
 3831              		.loc 1 1232 8 view .LVU995
 3832              	.LBE254:
 3833              	.LBE256:
 401:Src/bno055/bno055.c ****                                                            : BNO_ACC_SCALE_MG;
 3834              		.loc 1 401 5 is_stmt 1 view .LVU996
 403:Src/bno055/bno055.c ****     xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 3835              		.loc 1 403 46 is_stmt 0 view .LVU997
 3836 0040 BDF91820 		ldrsh	r2, [sp, #24]
 402:Src/bno055/bno055.c ****     xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 3837              		.loc 1 402 60 view .LVU998
 3838 0044 A37B     		ldrb	r3, [r4, #14]	@ zero_extendqisi2
 3839 0046 DFED137A 		vldr.32	s15, .L197
 403:Src/bno055/bno055.c ****     xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 3840              		.loc 1 403 46 view .LVU999
 3841 004a 06EE102A 		vmov	s12, r2	@ int
 404:Src/bno055/bno055.c ****     xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 3842              		.loc 1 404 46 view .LVU1000
 3843 004e BDF91A20 		ldrsh	r2, [sp, #26]
 3844 0052 06EE902A 		vmov	s13, r2	@ int
ARM GAS  /tmp/cc9CDFEk.s 			page 105


 405:Src/bno055/bno055.c **** 
 3845              		.loc 1 405 46 view .LVU1001
 3846 0056 BDF91C20 		ldrsh	r2, [sp, #28]
 3847 005a 07EE102A 		vmov	s14, r2	@ int
 403:Src/bno055/bno055.c ****     xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 3848              		.loc 1 403 46 view .LVU1002
 3849 005e B8EEC66A 		vcvt.f32.s32	s12, s12
 404:Src/bno055/bno055.c ****     xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 3850              		.loc 1 404 46 view .LVU1003
 3851 0062 F8EEE66A 		vcvt.f32.s32	s13, s13
 405:Src/bno055/bno055.c **** 
 3852              		.loc 1 405 46 view .LVU1004
 3853 0066 B8EEC77A 		vcvt.f32.s32	s14, s14
 402:Src/bno055/bno055.c ****     xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 3854              		.loc 1 402 60 view .LVU1005
 3855 006a F7EE005A 		vmov.f32	s11, #1.0e+0
 3856 006e 002B     		cmp	r3, #0
 3857 0070 18BF     		it	ne
 3858 0072 F0EE657A 		vmovne.f32	s15, s11
 3859              	.LVL414:
 403:Src/bno055/bno055.c ****     xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 3860              		.loc 1 403 5 is_stmt 1 view .LVU1006
 403:Src/bno055/bno055.c ****     xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 3861              		.loc 1 403 46 is_stmt 0 view .LVU1007
 3862 0076 C6EE275A 		vdiv.f32	s11, s12, s15
 404:Src/bno055/bno055.c ****     xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 3863              		.loc 1 404 46 view .LVU1008
 3864 007a 86EEA76A 		vdiv.f32	s12, s13, s15
 405:Src/bno055/bno055.c **** 
 3865              		.loc 1 405 46 view .LVU1009
 3866 007e C7EE276A 		vdiv.f32	s13, s14, s15
 403:Src/bno055/bno055.c ****     xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 3867              		.loc 1 403 12 view .LVU1010
 3868 0082 C5ED005A 		vstr.32	s11, [r5]
 404:Src/bno055/bno055.c ****     xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 3869              		.loc 1 404 5 is_stmt 1 view .LVU1011
 404:Src/bno055/bno055.c ****     xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 3870              		.loc 1 404 12 is_stmt 0 view .LVU1012
 3871 0086 85ED016A 		vstr.32	s12, [r5, #4]
 405:Src/bno055/bno055.c **** 
 3872              		.loc 1 405 5 is_stmt 1 view .LVU1013
 405:Src/bno055/bno055.c **** 
 3873              		.loc 1 405 12 is_stmt 0 view .LVU1014
 3874 008a C5ED026A 		vstr.32	s13, [r5, #8]
 407:Src/bno055/bno055.c **** };
 3875              		.loc 1 407 5 is_stmt 1 view .LVU1015
 408:Src/bno055/bno055.c **** 
 3876              		.loc 1 408 1 is_stmt 0 view .LVU1016
 3877 008e 09B0     		add	sp, sp, #36
 3878              	.LCFI130:
 3879              		.cfi_def_cfa_offset 20
 3880              		@ sp needed
 3881 0090 F0BD     		pop	{r4, r5, r6, r7, pc}
 3882              	.LVL415:
 3883              	.L198:
 408:Src/bno055/bno055.c **** 
 3884              		.loc 1 408 1 view .LVU1017
ARM GAS  /tmp/cc9CDFEk.s 			page 106


 3885 0092 00BF     		.align	2
 3886              	.L197:
 3887 0094 0000C842 		.word	1120403456
 3888              		.cfi_endproc
 3889              	.LFE142:
 3891              		.section	.text.bno055_acc,"ax",%progbits
 3892              		.align	1
 3893              		.p2align 2,,3
 3894              		.global	bno055_acc
 3895              		.syntax unified
 3896              		.thumb
 3897              		.thumb_func
 3898              		.fpu fpv4-sp-d16
 3900              	bno055_acc:
 3901              	.LVL416:
 3902              	.LFB138:
 247:Src/bno055/bno055.c ****     error_bno err;
 3903              		.loc 1 247 57 is_stmt 1 view -0
 3904              		.cfi_startproc
 3905              		@ args = 0, pretend = 0, frame = 24
 3906              		@ frame_needed = 0, uses_anonymous_args = 0
 248:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 3907              		.loc 1 248 5 view .LVU1019
 254:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 6)) != BNO_OK) {
 3908              		.loc 1 254 5 view .LVU1020
 255:Src/bno055/bno055.c ****         return err;
 3909              		.loc 1 255 5 view .LVU1021
 247:Src/bno055/bno055.c ****     error_bno err;
 3910              		.loc 1 247 57 is_stmt 0 view .LVU1022
 3911 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3912              	.LCFI131:
 3913              		.cfi_def_cfa_offset 20
 3914              		.cfi_offset 4, -20
 3915              		.cfi_offset 5, -16
 3916              		.cfi_offset 6, -12
 3917              		.cfi_offset 7, -8
 3918              		.cfi_offset 14, -4
 3919 0002 89B0     		sub	sp, sp, #36
 3920              	.LCFI132:
 3921              		.cfi_def_cfa_offset 56
 3922 0004 0668     		ldr	r6, [r0]
 3923              	.LVL417:
 3924              	.LBB259:
 3925              	.LBB260:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3926              		.loc 1 1226 11 view .LVU1023
 3927 0006 4FF0FF37 		mov	r7, #-1
 3928 000a 0823     		movs	r3, #8
 3929 000c 0097     		str	r7, [sp]
 3930              	.LVL418:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3931              		.loc 1 1226 11 view .LVU1024
 3932 000e 8DF81730 		strb	r3, [sp, #23]
 3933              	.LVL419:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3934              		.loc 1 1226 11 view .LVU1025
 3935              	.LBE260:
ARM GAS  /tmp/cc9CDFEk.s 			page 107


 3936              	.LBI259:
1220:Src/bno055/bno055.c ****                            uint32_t buf_size) {
 3937              		.loc 1 1220 11 is_stmt 1 view .LVU1026
 3938              	.LBB261:
1222:Src/bno055/bno055.c ****     // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
 3939              		.loc 1 1222 5 view .LVU1027
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3940              		.loc 1 1226 5 view .LVU1028
 3941              	.LBE261:
 3942              	.LBE259:
 247:Src/bno055/bno055.c ****     error_bno err;
 3943              		.loc 1 247 57 is_stmt 0 view .LVU1029
 3944 0012 0446     		mov	r4, r0
 3945 0014 0D46     		mov	r5, r1
 3946              	.LBB264:
 3947              	.LBB262:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3948              		.loc 1 1226 11 view .LVU1030
 3949 0016 0123     		movs	r3, #1
 3950              	.LVL420:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3951              		.loc 1 1226 11 view .LVU1031
 3952 0018 8179     		ldrb	r1, [r0, #6]	@ zero_extendqisi2
 3953              	.LVL421:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3954              		.loc 1 1226 11 view .LVU1032
 3955 001a 0391     		str	r1, [sp, #12]
 3956 001c 0DF11702 		add	r2, sp, #23
 3957              	.LVL422:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3958              		.loc 1 1226 11 view .LVU1033
 3959 0020 3046     		mov	r0, r6
 3960              	.LVL423:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3961              		.loc 1 1226 11 view .LVU1034
 3962 0022 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 3963              	.LVL424:
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 3964              		.loc 1 1227 5 is_stmt 1 view .LVU1035
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 3965              		.loc 1 1227 8 is_stmt 0 view .LVU1036
 3966 0026 0399     		ldr	r1, [sp, #12]
 3967 0028 10B1     		cbz	r0, .L200
 3968              	.L202:
 3969              	.LVL425:
1228:Src/bno055/bno055.c ****     }
 3970              		.loc 1 1228 16 view .LVU1037
 3971 002a 0120     		movs	r0, #1
 3972              	.LBE262:
 3973              	.LBE264:
 265:Src/bno055/bno055.c **** 
 3974              		.loc 1 265 1 view .LVU1038
 3975 002c 09B0     		add	sp, sp, #36
 3976              	.LCFI133:
 3977              		.cfi_remember_state
 3978              		.cfi_def_cfa_offset 20
 3979              		@ sp needed
ARM GAS  /tmp/cc9CDFEk.s 			page 108


 3980 002e F0BD     		pop	{r4, r5, r6, r7, pc}
 3981              	.LVL426:
 3982              	.L200:
 3983              	.LCFI134:
 3984              		.cfi_restore_state
 3985              	.LBB265:
 3986              	.LBB263:
1230:Src/bno055/bno055.c ****         HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 3987              		.loc 1 1230 5 is_stmt 1 view .LVU1039
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3988              		.loc 1 1231 9 is_stmt 0 view .LVU1040
 3989 0030 0097     		str	r7, [sp]
 3990 0032 0623     		movs	r3, #6
 3991 0034 3046     		mov	r0, r6
 3992              	.LVL427:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3993              		.loc 1 1231 9 view .LVU1041
 3994 0036 06AA     		add	r2, sp, #24
 3995              	.LVL428:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 3996              		.loc 1 1231 9 view .LVU1042
 3997 0038 FFF7FEFF 		bl	HAL_I2C_Master_Receive
 3998              	.LVL429:
 3999              		.loc 1 1232 5 is_stmt 1 view .LVU1043
 4000              		.loc 1 1232 8 is_stmt 0 view .LVU1044
 4001 003c 0028     		cmp	r0, #0
 4002 003e F4D1     		bne	.L202
 4003              	.LVL430:
 4004              		.loc 1 1232 8 view .LVU1045
 4005              	.LBE263:
 4006              	.LBE265:
 258:Src/bno055/bno055.c ****                                                            : BNO_ACC_SCALE_MG;
 4007              		.loc 1 258 5 is_stmt 1 view .LVU1046
 260:Src/bno055/bno055.c ****     xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 4008              		.loc 1 260 46 is_stmt 0 view .LVU1047
 4009 0040 BDF91820 		ldrsh	r2, [sp, #24]
 259:Src/bno055/bno055.c ****     xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 4010              		.loc 1 259 60 view .LVU1048
 4011 0044 A37B     		ldrb	r3, [r4, #14]	@ zero_extendqisi2
 4012 0046 DFED137A 		vldr.32	s15, .L206
 260:Src/bno055/bno055.c ****     xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 4013              		.loc 1 260 46 view .LVU1049
 4014 004a 06EE102A 		vmov	s12, r2	@ int
 261:Src/bno055/bno055.c ****     xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 4015              		.loc 1 261 46 view .LVU1050
 4016 004e BDF91A20 		ldrsh	r2, [sp, #26]
 4017 0052 06EE902A 		vmov	s13, r2	@ int
 262:Src/bno055/bno055.c **** 
 4018              		.loc 1 262 46 view .LVU1051
 4019 0056 BDF91C20 		ldrsh	r2, [sp, #28]
 4020 005a 07EE102A 		vmov	s14, r2	@ int
 260:Src/bno055/bno055.c ****     xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 4021              		.loc 1 260 46 view .LVU1052
 4022 005e B8EEC66A 		vcvt.f32.s32	s12, s12
 261:Src/bno055/bno055.c ****     xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 4023              		.loc 1 261 46 view .LVU1053
 4024 0062 F8EEE66A 		vcvt.f32.s32	s13, s13
ARM GAS  /tmp/cc9CDFEk.s 			page 109


 262:Src/bno055/bno055.c **** 
 4025              		.loc 1 262 46 view .LVU1054
 4026 0066 B8EEC77A 		vcvt.f32.s32	s14, s14
 259:Src/bno055/bno055.c ****     xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 4027              		.loc 1 259 60 view .LVU1055
 4028 006a F7EE005A 		vmov.f32	s11, #1.0e+0
 4029 006e 002B     		cmp	r3, #0
 4030 0070 18BF     		it	ne
 4031 0072 F0EE657A 		vmovne.f32	s15, s11
 4032              	.LVL431:
 260:Src/bno055/bno055.c ****     xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 4033              		.loc 1 260 5 is_stmt 1 view .LVU1056
 260:Src/bno055/bno055.c ****     xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 4034              		.loc 1 260 46 is_stmt 0 view .LVU1057
 4035 0076 C6EE275A 		vdiv.f32	s11, s12, s15
 261:Src/bno055/bno055.c ****     xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 4036              		.loc 1 261 46 view .LVU1058
 4037 007a 86EEA76A 		vdiv.f32	s12, s13, s15
 262:Src/bno055/bno055.c **** 
 4038              		.loc 1 262 46 view .LVU1059
 4039 007e C7EE276A 		vdiv.f32	s13, s14, s15
 260:Src/bno055/bno055.c ****     xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 4040              		.loc 1 260 12 view .LVU1060
 4041 0082 C5ED005A 		vstr.32	s11, [r5]
 261:Src/bno055/bno055.c ****     xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 4042              		.loc 1 261 5 is_stmt 1 view .LVU1061
 261:Src/bno055/bno055.c ****     xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 4043              		.loc 1 261 12 is_stmt 0 view .LVU1062
 4044 0086 85ED016A 		vstr.32	s12, [r5, #4]
 262:Src/bno055/bno055.c **** 
 4045              		.loc 1 262 5 is_stmt 1 view .LVU1063
 262:Src/bno055/bno055.c **** 
 4046              		.loc 1 262 12 is_stmt 0 view .LVU1064
 4047 008a C5ED026A 		vstr.32	s13, [r5, #8]
 264:Src/bno055/bno055.c **** };
 4048              		.loc 1 264 5 is_stmt 1 view .LVU1065
 265:Src/bno055/bno055.c **** 
 4049              		.loc 1 265 1 is_stmt 0 view .LVU1066
 4050 008e 09B0     		add	sp, sp, #36
 4051              	.LCFI135:
 4052              		.cfi_def_cfa_offset 20
 4053              		@ sp needed
 4054 0090 F0BD     		pop	{r4, r5, r6, r7, pc}
 4055              	.LVL432:
 4056              	.L207:
 265:Src/bno055/bno055.c **** 
 4057              		.loc 1 265 1 view .LVU1067
 4058 0092 00BF     		.align	2
 4059              	.L206:
 4060 0094 0000C842 		.word	1120403456
 4061              		.cfi_endproc
 4062              	.LFE138:
 4064              		.section	.text.bno055_euler,"ax",%progbits
 4065              		.align	1
 4066              		.p2align 2,,3
 4067              		.global	bno055_euler
 4068              		.syntax unified
ARM GAS  /tmp/cc9CDFEk.s 			page 110


 4069              		.thumb
 4070              		.thumb_func
 4071              		.fpu fpv4-sp-d16
 4073              	bno055_euler:
 4074              	.LVL433:
 4075              	.LFB158:
 953:Src/bno055/bno055.c ****     error_bno err;
 4076              		.loc 1 953 60 is_stmt 1 view -0
 4077              		.cfi_startproc
 4078              		@ args = 0, pretend = 0, frame = 24
 4079              		@ frame_needed = 0, uses_anonymous_args = 0
 954:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 4080              		.loc 1 954 5 view .LVU1069
 960:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 6)) !=
 4081              		.loc 1 960 5 view .LVU1070
 961:Src/bno055/bno055.c ****         BNO_OK) {
 4082              		.loc 1 961 5 view .LVU1071
 953:Src/bno055/bno055.c ****     error_bno err;
 4083              		.loc 1 953 60 is_stmt 0 view .LVU1072
 4084 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 4085              	.LCFI136:
 4086              		.cfi_def_cfa_offset 20
 4087              		.cfi_offset 4, -20
 4088              		.cfi_offset 5, -16
 4089              		.cfi_offset 6, -12
 4090              		.cfi_offset 7, -8
 4091              		.cfi_offset 14, -4
 4092 0002 89B0     		sub	sp, sp, #36
 4093              	.LCFI137:
 4094              		.cfi_def_cfa_offset 56
 4095 0004 0668     		ldr	r6, [r0]
 4096              	.LVL434:
 4097              	.LBB268:
 4098              	.LBB269:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 4099              		.loc 1 1226 11 view .LVU1073
 4100 0006 4FF0FF37 		mov	r7, #-1
 4101 000a 1A23     		movs	r3, #26
 4102 000c 0097     		str	r7, [sp]
 4103              	.LVL435:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 4104              		.loc 1 1226 11 view .LVU1074
 4105 000e 8DF81730 		strb	r3, [sp, #23]
 4106              	.LVL436:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 4107              		.loc 1 1226 11 view .LVU1075
 4108              	.LBE269:
 4109              	.LBI268:
1220:Src/bno055/bno055.c ****                            uint32_t buf_size) {
 4110              		.loc 1 1220 11 is_stmt 1 view .LVU1076
 4111              	.LBB270:
1222:Src/bno055/bno055.c ****     // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
 4112              		.loc 1 1222 5 view .LVU1077
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 4113              		.loc 1 1226 5 view .LVU1078
 4114              	.LBE270:
 4115              	.LBE268:
ARM GAS  /tmp/cc9CDFEk.s 			page 111


 953:Src/bno055/bno055.c ****     error_bno err;
 4116              		.loc 1 953 60 is_stmt 0 view .LVU1079
 4117 0012 0446     		mov	r4, r0
 4118 0014 0D46     		mov	r5, r1
 4119              	.LBB273:
 4120              	.LBB271:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 4121              		.loc 1 1226 11 view .LVU1080
 4122 0016 0123     		movs	r3, #1
 4123              	.LVL437:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 4124              		.loc 1 1226 11 view .LVU1081
 4125 0018 8179     		ldrb	r1, [r0, #6]	@ zero_extendqisi2
 4126              	.LVL438:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 4127              		.loc 1 1226 11 view .LVU1082
 4128 001a 0391     		str	r1, [sp, #12]
 4129 001c 0DF11702 		add	r2, sp, #23
 4130              	.LVL439:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 4131              		.loc 1 1226 11 view .LVU1083
 4132 0020 3046     		mov	r0, r6
 4133              	.LVL440:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 4134              		.loc 1 1226 11 view .LVU1084
 4135 0022 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 4136              	.LVL441:
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 4137              		.loc 1 1227 5 is_stmt 1 view .LVU1085
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 4138              		.loc 1 1227 8 is_stmt 0 view .LVU1086
 4139 0026 0399     		ldr	r1, [sp, #12]
 4140 0028 10B1     		cbz	r0, .L209
 4141              	.L211:
 4142              	.LVL442:
1228:Src/bno055/bno055.c ****     }
 4143              		.loc 1 1228 16 view .LVU1087
 4144 002a 0120     		movs	r0, #1
 4145              	.LBE271:
 4146              	.LBE273:
 971:Src/bno055/bno055.c **** 
 4147              		.loc 1 971 1 view .LVU1088
 4148 002c 09B0     		add	sp, sp, #36
 4149              	.LCFI138:
 4150              		.cfi_remember_state
 4151              		.cfi_def_cfa_offset 20
 4152              		@ sp needed
 4153 002e F0BD     		pop	{r4, r5, r6, r7, pc}
 4154              	.LVL443:
 4155              	.L209:
 4156              	.LCFI139:
 4157              		.cfi_restore_state
 4158              	.LBB274:
 4159              	.LBB272:
1230:Src/bno055/bno055.c ****         HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 4160              		.loc 1 1230 5 is_stmt 1 view .LVU1089
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
ARM GAS  /tmp/cc9CDFEk.s 			page 112


 4161              		.loc 1 1231 9 is_stmt 0 view .LVU1090
 4162 0030 0097     		str	r7, [sp]
 4163 0032 0623     		movs	r3, #6
 4164 0034 3046     		mov	r0, r6
 4165              	.LVL444:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 4166              		.loc 1 1231 9 view .LVU1091
 4167 0036 06AA     		add	r2, sp, #24
 4168              	.LVL445:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 4169              		.loc 1 1231 9 view .LVU1092
 4170 0038 FFF7FEFF 		bl	HAL_I2C_Master_Receive
 4171              	.LVL446:
 4172              		.loc 1 1232 5 is_stmt 1 view .LVU1093
 4173              		.loc 1 1232 8 is_stmt 0 view .LVU1094
 4174 003c 0028     		cmp	r0, #0
 4175 003e F4D1     		bne	.L211
 4176              	.LVL447:
 4177              		.loc 1 1232 8 view .LVU1095
 4178              	.LBE272:
 4179              	.LBE274:
 965:Src/bno055/bno055.c ****                                                      : BNO_EUL_SCALE_RAD;
 4180              		.loc 1 965 5 is_stmt 1 view .LVU1096
 967:Src/bno055/bno055.c ****     buf->roll = (s16)((data[3] << 8) | data[2]) / scale;
 4181              		.loc 1 967 48 is_stmt 0 view .LVU1097
 4182 0040 BDF91820 		ldrsh	r2, [sp, #24]
 966:Src/bno055/bno055.c ****     buf->yaw = (s16)((data[1] << 8) | data[0]) / scale;
 4183              		.loc 1 966 54 view .LVU1098
 4184 0044 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 4185 0046 DFED135A 		vldr.32	s11, .L215
 967:Src/bno055/bno055.c ****     buf->roll = (s16)((data[3] << 8) | data[2]) / scale;
 4186              		.loc 1 967 48 view .LVU1099
 4187 004a 06EE102A 		vmov	s12, r2	@ int
 968:Src/bno055/bno055.c ****     buf->pitch = (s16)((data[5] << 8) | data[4]) / scale;
 4188              		.loc 1 968 49 view .LVU1100
 4189 004e BDF91A20 		ldrsh	r2, [sp, #26]
 4190 0052 06EE902A 		vmov	s13, r2	@ int
 969:Src/bno055/bno055.c ****     return BNO_OK;
 4191              		.loc 1 969 50 view .LVU1101
 4192 0056 BDF91C20 		ldrsh	r2, [sp, #28]
 4193 005a 07EE102A 		vmov	s14, r2	@ int
 967:Src/bno055/bno055.c ****     buf->roll = (s16)((data[3] << 8) | data[2]) / scale;
 4194              		.loc 1 967 48 view .LVU1102
 4195 005e B8EEC66A 		vcvt.f32.s32	s12, s12
 968:Src/bno055/bno055.c ****     buf->pitch = (s16)((data[5] << 8) | data[4]) / scale;
 4196              		.loc 1 968 49 view .LVU1103
 4197 0062 F8EEE66A 		vcvt.f32.s32	s13, s13
 969:Src/bno055/bno055.c ****     return BNO_OK;
 4198              		.loc 1 969 50 view .LVU1104
 4199 0066 B8EEC77A 		vcvt.f32.s32	s14, s14
 966:Src/bno055/bno055.c ****     buf->yaw = (s16)((data[1] << 8) | data[0]) / scale;
 4200              		.loc 1 966 54 view .LVU1105
 4201 006a 002B     		cmp	r3, #0
 4202 006c F3EE007A 		vmov.f32	s15, #1.6e+1
 4203 0070 18BF     		it	ne
 4204 0072 F0EE657A 		vmovne.f32	s15, s11
 4205              	.LVL448:
ARM GAS  /tmp/cc9CDFEk.s 			page 113


 967:Src/bno055/bno055.c ****     buf->roll = (s16)((data[3] << 8) | data[2]) / scale;
 4206              		.loc 1 967 5 is_stmt 1 view .LVU1106
 967:Src/bno055/bno055.c ****     buf->roll = (s16)((data[3] << 8) | data[2]) / scale;
 4207              		.loc 1 967 48 is_stmt 0 view .LVU1107
 4208 0076 C6EE275A 		vdiv.f32	s11, s12, s15
 968:Src/bno055/bno055.c ****     buf->pitch = (s16)((data[5] << 8) | data[4]) / scale;
 4209              		.loc 1 968 49 view .LVU1108
 4210 007a 86EEA76A 		vdiv.f32	s12, s13, s15
 969:Src/bno055/bno055.c ****     return BNO_OK;
 4211              		.loc 1 969 50 view .LVU1109
 4212 007e C7EE276A 		vdiv.f32	s13, s14, s15
 967:Src/bno055/bno055.c ****     buf->roll = (s16)((data[3] << 8) | data[2]) / scale;
 4213              		.loc 1 967 14 view .LVU1110
 4214 0082 C5ED025A 		vstr.32	s11, [r5, #8]
 968:Src/bno055/bno055.c ****     buf->pitch = (s16)((data[5] << 8) | data[4]) / scale;
 4215              		.loc 1 968 5 is_stmt 1 view .LVU1111
 968:Src/bno055/bno055.c ****     buf->pitch = (s16)((data[5] << 8) | data[4]) / scale;
 4216              		.loc 1 968 15 is_stmt 0 view .LVU1112
 4217 0086 85ED006A 		vstr.32	s12, [r5]
 969:Src/bno055/bno055.c ****     return BNO_OK;
 4218              		.loc 1 969 5 is_stmt 1 view .LVU1113
 969:Src/bno055/bno055.c ****     return BNO_OK;
 4219              		.loc 1 969 16 is_stmt 0 view .LVU1114
 4220 008a C5ED016A 		vstr.32	s13, [r5, #4]
 970:Src/bno055/bno055.c **** }
 4221              		.loc 1 970 5 is_stmt 1 view .LVU1115
 971:Src/bno055/bno055.c **** 
 4222              		.loc 1 971 1 is_stmt 0 view .LVU1116
 4223 008e 09B0     		add	sp, sp, #36
 4224              	.LCFI140:
 4225              		.cfi_def_cfa_offset 20
 4226              		@ sp needed
 4227 0090 F0BD     		pop	{r4, r5, r6, r7, pc}
 4228              	.LVL449:
 4229              	.L216:
 971:Src/bno055/bno055.c **** 
 4230              		.loc 1 971 1 view .LVU1117
 4231 0092 00BF     		.align	2
 4232              	.L215:
 4233 0094 00006144 		.word	1147207680
 4234              		.cfi_endproc
 4235              	.LFE158:
 4237              		.section	.text.bno055_gyro,"ax",%progbits
 4238              		.align	1
 4239              		.p2align 2,,3
 4240              		.global	bno055_gyro
 4241              		.syntax unified
 4242              		.thumb
 4243              		.thumb_func
 4244              		.fpu fpv4-sp-d16
 4246              	bno055_gyro:
 4247              	.LVL450:
 4248              	.LFB146:
 535:Src/bno055/bno055.c ****     error_bno err;
 4249              		.loc 1 535 58 is_stmt 1 view -0
 4250              		.cfi_startproc
 4251              		@ args = 0, pretend = 0, frame = 24
ARM GAS  /tmp/cc9CDFEk.s 			page 114


 4252              		@ frame_needed = 0, uses_anonymous_args = 0
 536:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 4253              		.loc 1 536 5 view .LVU1119
 542:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 6)) != BNO_OK) {
 4254              		.loc 1 542 5 view .LVU1120
 543:Src/bno055/bno055.c ****         return err;
 4255              		.loc 1 543 5 view .LVU1121
 535:Src/bno055/bno055.c ****     error_bno err;
 4256              		.loc 1 535 58 is_stmt 0 view .LVU1122
 4257 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 4258              	.LCFI141:
 4259              		.cfi_def_cfa_offset 20
 4260              		.cfi_offset 4, -20
 4261              		.cfi_offset 5, -16
 4262              		.cfi_offset 6, -12
 4263              		.cfi_offset 7, -8
 4264              		.cfi_offset 14, -4
 4265 0002 89B0     		sub	sp, sp, #36
 4266              	.LCFI142:
 4267              		.cfi_def_cfa_offset 56
 4268 0004 0668     		ldr	r6, [r0]
 4269              	.LVL451:
 4270              	.LBB277:
 4271              	.LBB278:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 4272              		.loc 1 1226 11 view .LVU1123
 4273 0006 4FF0FF37 		mov	r7, #-1
 4274 000a 1423     		movs	r3, #20
 4275 000c 0097     		str	r7, [sp]
 4276              	.LVL452:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 4277              		.loc 1 1226 11 view .LVU1124
 4278 000e 8DF81730 		strb	r3, [sp, #23]
 4279              	.LVL453:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 4280              		.loc 1 1226 11 view .LVU1125
 4281              	.LBE278:
 4282              	.LBI277:
1220:Src/bno055/bno055.c ****                            uint32_t buf_size) {
 4283              		.loc 1 1220 11 is_stmt 1 view .LVU1126
 4284              	.LBB279:
1222:Src/bno055/bno055.c ****     // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
 4285              		.loc 1 1222 5 view .LVU1127
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 4286              		.loc 1 1226 5 view .LVU1128
 4287              	.LBE279:
 4288              	.LBE277:
 535:Src/bno055/bno055.c ****     error_bno err;
 4289              		.loc 1 535 58 is_stmt 0 view .LVU1129
 4290 0012 0446     		mov	r4, r0
 4291 0014 0D46     		mov	r5, r1
 4292              	.LBB282:
 4293              	.LBB280:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 4294              		.loc 1 1226 11 view .LVU1130
 4295 0016 0123     		movs	r3, #1
 4296              	.LVL454:
ARM GAS  /tmp/cc9CDFEk.s 			page 115


1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 4297              		.loc 1 1226 11 view .LVU1131
 4298 0018 8179     		ldrb	r1, [r0, #6]	@ zero_extendqisi2
 4299              	.LVL455:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 4300              		.loc 1 1226 11 view .LVU1132
 4301 001a 0391     		str	r1, [sp, #12]
 4302 001c 0DF11702 		add	r2, sp, #23
 4303              	.LVL456:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 4304              		.loc 1 1226 11 view .LVU1133
 4305 0020 3046     		mov	r0, r6
 4306              	.LVL457:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 4307              		.loc 1 1226 11 view .LVU1134
 4308 0022 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 4309              	.LVL458:
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 4310              		.loc 1 1227 5 is_stmt 1 view .LVU1135
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 4311              		.loc 1 1227 8 is_stmt 0 view .LVU1136
 4312 0026 0399     		ldr	r1, [sp, #12]
 4313 0028 10B1     		cbz	r0, .L218
 4314              	.L220:
 4315              	.LVL459:
1228:Src/bno055/bno055.c ****     }
 4316              		.loc 1 1228 16 view .LVU1137
 4317 002a 0120     		movs	r0, #1
 4318              	.LBE280:
 4319              	.LBE282:
 554:Src/bno055/bno055.c **** 
 4320              		.loc 1 554 1 view .LVU1138
 4321 002c 09B0     		add	sp, sp, #36
 4322              	.LCFI143:
 4323              		.cfi_remember_state
 4324              		.cfi_def_cfa_offset 20
 4325              		@ sp needed
 4326 002e F0BD     		pop	{r4, r5, r6, r7, pc}
 4327              	.LVL460:
 4328              	.L218:
 4329              	.LCFI144:
 4330              		.cfi_restore_state
 4331              	.LBB283:
 4332              	.LBB281:
1230:Src/bno055/bno055.c ****         HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 4333              		.loc 1 1230 5 is_stmt 1 view .LVU1139
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 4334              		.loc 1 1231 9 is_stmt 0 view .LVU1140
 4335 0030 0097     		str	r7, [sp]
 4336 0032 0623     		movs	r3, #6
 4337 0034 3046     		mov	r0, r6
 4338              	.LVL461:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 4339              		.loc 1 1231 9 view .LVU1141
 4340 0036 06AA     		add	r2, sp, #24
 4341              	.LVL462:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
ARM GAS  /tmp/cc9CDFEk.s 			page 116


 4342              		.loc 1 1231 9 view .LVU1142
 4343 0038 FFF7FEFF 		bl	HAL_I2C_Master_Receive
 4344              	.LVL463:
 4345              		.loc 1 1232 5 is_stmt 1 view .LVU1143
 4346              		.loc 1 1232 8 is_stmt 0 view .LVU1144
 4347 003c 0028     		cmp	r0, #0
 4348 003e F4D1     		bne	.L220
 4349              	.LVL464:
 4350              		.loc 1 1232 8 view .LVU1145
 4351              	.LBE281:
 4352              	.LBE283:
 547:Src/bno055/bno055.c ****                                                      : BNO_GYR_SCALE_RPS;
 4353              		.loc 1 547 5 is_stmt 1 view .LVU1146
 549:Src/bno055/bno055.c ****     xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 4354              		.loc 1 549 46 is_stmt 0 view .LVU1147
 4355 0040 BDF91820 		ldrsh	r2, [sp, #24]
 548:Src/bno055/bno055.c ****     xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 4356              		.loc 1 548 54 view .LVU1148
 4357 0044 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 4358 0046 DFED135A 		vldr.32	s11, .L224
 549:Src/bno055/bno055.c ****     xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 4359              		.loc 1 549 46 view .LVU1149
 4360 004a 06EE102A 		vmov	s12, r2	@ int
 550:Src/bno055/bno055.c ****     xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 4361              		.loc 1 550 46 view .LVU1150
 4362 004e BDF91A20 		ldrsh	r2, [sp, #26]
 4363 0052 06EE902A 		vmov	s13, r2	@ int
 551:Src/bno055/bno055.c **** 
 4364              		.loc 1 551 46 view .LVU1151
 4365 0056 BDF91C20 		ldrsh	r2, [sp, #28]
 4366 005a 07EE102A 		vmov	s14, r2	@ int
 549:Src/bno055/bno055.c ****     xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 4367              		.loc 1 549 46 view .LVU1152
 4368 005e B8EEC66A 		vcvt.f32.s32	s12, s12
 550:Src/bno055/bno055.c ****     xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 4369              		.loc 1 550 46 view .LVU1153
 4370 0062 F8EEE66A 		vcvt.f32.s32	s13, s13
 551:Src/bno055/bno055.c **** 
 4371              		.loc 1 551 46 view .LVU1154
 4372 0066 B8EEC77A 		vcvt.f32.s32	s14, s14
 548:Src/bno055/bno055.c ****     xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 4373              		.loc 1 548 54 view .LVU1155
 4374 006a 002B     		cmp	r3, #0
 4375 006c F3EE007A 		vmov.f32	s15, #1.6e+1
 4376 0070 18BF     		it	ne
 4377 0072 F0EE657A 		vmovne.f32	s15, s11
 4378              	.LVL465:
 549:Src/bno055/bno055.c ****     xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 4379              		.loc 1 549 5 is_stmt 1 view .LVU1156
 549:Src/bno055/bno055.c ****     xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 4380              		.loc 1 549 46 is_stmt 0 view .LVU1157
 4381 0076 C6EE275A 		vdiv.f32	s11, s12, s15
 550:Src/bno055/bno055.c ****     xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 4382              		.loc 1 550 46 view .LVU1158
 4383 007a 86EEA76A 		vdiv.f32	s12, s13, s15
 551:Src/bno055/bno055.c **** 
 4384              		.loc 1 551 46 view .LVU1159
ARM GAS  /tmp/cc9CDFEk.s 			page 117


 4385 007e C7EE276A 		vdiv.f32	s13, s14, s15
 549:Src/bno055/bno055.c ****     xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 4386              		.loc 1 549 12 view .LVU1160
 4387 0082 C5ED005A 		vstr.32	s11, [r5]
 550:Src/bno055/bno055.c ****     xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 4388              		.loc 1 550 5 is_stmt 1 view .LVU1161
 550:Src/bno055/bno055.c ****     xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 4389              		.loc 1 550 12 is_stmt 0 view .LVU1162
 4390 0086 85ED016A 		vstr.32	s12, [r5, #4]
 551:Src/bno055/bno055.c **** 
 4391              		.loc 1 551 5 is_stmt 1 view .LVU1163
 551:Src/bno055/bno055.c **** 
 4392              		.loc 1 551 12 is_stmt 0 view .LVU1164
 4393 008a C5ED026A 		vstr.32	s13, [r5, #8]
 553:Src/bno055/bno055.c **** }
 4394              		.loc 1 553 5 is_stmt 1 view .LVU1165
 554:Src/bno055/bno055.c **** 
 4395              		.loc 1 554 1 is_stmt 0 view .LVU1166
 4396 008e 09B0     		add	sp, sp, #36
 4397              	.LCFI145:
 4398              		.cfi_def_cfa_offset 20
 4399              		@ sp needed
 4400 0090 F0BD     		pop	{r4, r5, r6, r7, pc}
 4401              	.LVL466:
 4402              	.L225:
 554:Src/bno055/bno055.c **** 
 4403              		.loc 1 554 1 view .LVU1167
 4404 0092 00BF     		.align	2
 4405              	.L224:
 4406 0094 00006144 		.word	1147207680
 4407              		.cfi_endproc
 4408              	.LFE146:
 4410              		.section	.text.bno055_quaternion,"ax",%progbits
 4411              		.align	1
 4412              		.p2align 2,,3
 4413              		.global	bno055_quaternion
 4414              		.syntax unified
 4415              		.thumb
 4416              		.thumb_func
 4417              		.fpu fpv4-sp-d16
 4419              	bno055_quaternion:
 4420              	.LVL467:
 4421              	.LFB163:
1119:Src/bno055/bno055.c ****     error_bno err;
 4422              		.loc 1 1119 64 is_stmt 1 view -0
 4423              		.cfi_startproc
 4424              		@ args = 0, pretend = 0, frame = 16
 4425              		@ frame_needed = 0, uses_anonymous_args = 0
1120:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 4426              		.loc 1 1120 5 view .LVU1169
1126:Src/bno055/bno055.c ****     if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 8)) != BNO_OK) {
 4427              		.loc 1 1126 5 view .LVU1170
1127:Src/bno055/bno055.c ****         return err;
 4428              		.loc 1 1127 5 view .LVU1171
1119:Src/bno055/bno055.c ****     error_bno err;
 4429              		.loc 1 1119 64 is_stmt 0 view .LVU1172
 4430 0000 F0B5     		push	{r4, r5, r6, r7, lr}
ARM GAS  /tmp/cc9CDFEk.s 			page 118


 4431              	.LCFI146:
 4432              		.cfi_def_cfa_offset 20
 4433              		.cfi_offset 4, -20
 4434              		.cfi_offset 5, -16
 4435              		.cfi_offset 6, -12
 4436              		.cfi_offset 7, -8
 4437              		.cfi_offset 14, -4
 4438 0002 0568     		ldr	r5, [r0]
 4439              	.LVL468:
 4440              	.LBB286:
 4441              	.LBB287:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 4442              		.loc 1 1226 11 view .LVU1173
 4443 0004 8679     		ldrb	r6, [r0, #6]	@ zero_extendqisi2
 4444              	.LBE287:
 4445              	.LBE286:
1119:Src/bno055/bno055.c ****     error_bno err;
 4446              		.loc 1 1119 64 view .LVU1174
 4447 0006 87B0     		sub	sp, sp, #28
 4448              	.LCFI147:
 4449              		.cfi_def_cfa_offset 48
 4450 0008 2023     		movs	r3, #32
 4451              	.LBB291:
 4452              	.LBB288:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 4453              		.loc 1 1226 11 view .LVU1175
 4454 000a 4FF0FF37 		mov	r7, #-1
 4455              	.LBE288:
 4456              	.LBE291:
1119:Src/bno055/bno055.c ****     error_bno err;
 4457              		.loc 1 1119 64 view .LVU1176
 4458 000e 0C46     		mov	r4, r1
 4459 0010 8DF80F30 		strb	r3, [sp, #15]
 4460              	.LVL469:
 4461              	.LBB292:
 4462              	.LBI286:
1220:Src/bno055/bno055.c ****                            uint32_t buf_size) {
 4463              		.loc 1 1220 11 is_stmt 1 view .LVU1177
 4464              	.LBB289:
1222:Src/bno055/bno055.c ****     // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
 4465              		.loc 1 1222 5 view .LVU1178
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 4466              		.loc 1 1226 5 view .LVU1179
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 4467              		.loc 1 1226 11 is_stmt 0 view .LVU1180
 4468 0014 0097     		str	r7, [sp]
 4469              	.LVL470:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 4470              		.loc 1 1226 11 view .LVU1181
 4471 0016 0123     		movs	r3, #1
 4472              	.LVL471:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 4473              		.loc 1 1226 11 view .LVU1182
 4474 0018 0DF10F02 		add	r2, sp, #15
 4475              	.LVL472:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 4476              		.loc 1 1226 11 view .LVU1183
ARM GAS  /tmp/cc9CDFEk.s 			page 119


 4477 001c 3146     		mov	r1, r6
 4478              	.LVL473:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 4479              		.loc 1 1226 11 view .LVU1184
 4480 001e 2846     		mov	r0, r5
 4481              	.LVL474:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 4482              		.loc 1 1226 11 view .LVU1185
 4483 0020 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 4484              	.LVL475:
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 4485              		.loc 1 1227 5 is_stmt 1 view .LVU1186
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 4486              		.loc 1 1227 8 is_stmt 0 view .LVU1187
 4487 0024 10B1     		cbz	r0, .L227
 4488              	.L229:
 4489              	.LVL476:
1228:Src/bno055/bno055.c ****     }
 4490              		.loc 1 1228 16 view .LVU1188
 4491 0026 0120     		movs	r0, #1
 4492              	.LBE289:
 4493              	.LBE292:
1135:Src/bno055/bno055.c **** 
 4494              		.loc 1 1135 1 view .LVU1189
 4495 0028 07B0     		add	sp, sp, #28
 4496              	.LCFI148:
 4497              		.cfi_remember_state
 4498              		.cfi_def_cfa_offset 20
 4499              		@ sp needed
 4500 002a F0BD     		pop	{r4, r5, r6, r7, pc}
 4501              	.LVL477:
 4502              	.L227:
 4503              	.LCFI149:
 4504              		.cfi_restore_state
 4505              	.LBB293:
 4506              	.LBB290:
1230:Src/bno055/bno055.c ****         HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 4507              		.loc 1 1230 5 is_stmt 1 view .LVU1190
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 4508              		.loc 1 1231 9 is_stmt 0 view .LVU1191
 4509 002c 0097     		str	r7, [sp]
 4510 002e 0823     		movs	r3, #8
 4511 0030 04AA     		add	r2, sp, #16
 4512              	.LVL478:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 4513              		.loc 1 1231 9 view .LVU1192
 4514 0032 3146     		mov	r1, r6
 4515 0034 2846     		mov	r0, r5
 4516              	.LVL479:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 4517              		.loc 1 1231 9 view .LVU1193
 4518 0036 FFF7FEFF 		bl	HAL_I2C_Master_Receive
 4519              	.LVL480:
 4520              		.loc 1 1232 5 is_stmt 1 view .LVU1194
 4521              		.loc 1 1232 8 is_stmt 0 view .LVU1195
 4522 003a 0028     		cmp	r0, #0
 4523 003c F3D1     		bne	.L229
ARM GAS  /tmp/cc9CDFEk.s 			page 120


 4524              	.LVL481:
 4525              		.loc 1 1232 8 view .LVU1196
 4526              	.LBE290:
 4527              	.LBE293:
1130:Src/bno055/bno055.c ****     buf->x = (s16)((data[3] << 8) | data[2]) / (f32)BNO_QUA_SCALE;
 4528              		.loc 1 1130 5 is_stmt 1 view .LVU1197
1130:Src/bno055/bno055.c ****     buf->x = (s16)((data[3] << 8) | data[2]) / (f32)BNO_QUA_SCALE;
 4529              		.loc 1 1130 46 is_stmt 0 view .LVU1198
 4530 003e BDF91030 		ldrsh	r3, [sp, #16]
 4531 0042 DFED155A 		vldr.32	s11, .L231
 4532 0046 06EE103A 		vmov	s12, r3	@ int
1131:Src/bno055/bno055.c ****     buf->y = (s16)((data[5] << 8) | data[4]) / (f32)BNO_QUA_SCALE;
 4533              		.loc 1 1131 46 view .LVU1199
 4534 004a BDF91230 		ldrsh	r3, [sp, #18]
 4535 004e 06EE903A 		vmov	s13, r3	@ int
1132:Src/bno055/bno055.c ****     buf->z = (s16)((data[7] << 8) | data[6]) / (f32)BNO_QUA_SCALE;
 4536              		.loc 1 1132 46 view .LVU1200
 4537 0052 BDF91430 		ldrsh	r3, [sp, #20]
 4538 0056 07EE103A 		vmov	s14, r3	@ int
1133:Src/bno055/bno055.c ****     return BNO_OK;
 4539              		.loc 1 1133 46 view .LVU1201
 4540 005a BDF91630 		ldrsh	r3, [sp, #22]
 4541 005e 07EE903A 		vmov	s15, r3	@ int
1130:Src/bno055/bno055.c ****     buf->x = (s16)((data[3] << 8) | data[2]) / (f32)BNO_QUA_SCALE;
 4542              		.loc 1 1130 46 view .LVU1202
 4543 0062 B8EEC66A 		vcvt.f32.s32	s12, s12
1131:Src/bno055/bno055.c ****     buf->y = (s16)((data[5] << 8) | data[4]) / (f32)BNO_QUA_SCALE;
 4544              		.loc 1 1131 46 view .LVU1203
 4545 0066 F8EEE66A 		vcvt.f32.s32	s13, s13
1132:Src/bno055/bno055.c ****     buf->z = (s16)((data[7] << 8) | data[6]) / (f32)BNO_QUA_SCALE;
 4546              		.loc 1 1132 46 view .LVU1204
 4547 006a B8EEC77A 		vcvt.f32.s32	s14, s14
1133:Src/bno055/bno055.c ****     return BNO_OK;
 4548              		.loc 1 1133 46 view .LVU1205
 4549 006e F8EEE77A 		vcvt.f32.s32	s15, s15
1130:Src/bno055/bno055.c ****     buf->x = (s16)((data[3] << 8) | data[2]) / (f32)BNO_QUA_SCALE;
 4550              		.loc 1 1130 46 view .LVU1206
 4551 0072 26EE256A 		vmul.f32	s12, s12, s11
1131:Src/bno055/bno055.c ****     buf->y = (s16)((data[5] << 8) | data[4]) / (f32)BNO_QUA_SCALE;
 4552              		.loc 1 1131 46 view .LVU1207
 4553 0076 66EEA56A 		vmul.f32	s13, s13, s11
1132:Src/bno055/bno055.c ****     buf->z = (s16)((data[7] << 8) | data[6]) / (f32)BNO_QUA_SCALE;
 4554              		.loc 1 1132 46 view .LVU1208
 4555 007a 27EE257A 		vmul.f32	s14, s14, s11
1133:Src/bno055/bno055.c ****     return BNO_OK;
 4556              		.loc 1 1133 46 view .LVU1209
 4557 007e 67EEA57A 		vmul.f32	s15, s15, s11
1130:Src/bno055/bno055.c ****     buf->x = (s16)((data[3] << 8) | data[2]) / (f32)BNO_QUA_SCALE;
 4558              		.loc 1 1130 12 view .LVU1210
 4559 0082 84ED036A 		vstr.32	s12, [r4, #12]
1131:Src/bno055/bno055.c ****     buf->y = (s16)((data[5] << 8) | data[4]) / (f32)BNO_QUA_SCALE;
 4560              		.loc 1 1131 5 is_stmt 1 view .LVU1211
1131:Src/bno055/bno055.c ****     buf->y = (s16)((data[5] << 8) | data[4]) / (f32)BNO_QUA_SCALE;
 4561              		.loc 1 1131 12 is_stmt 0 view .LVU1212
 4562 0086 C4ED006A 		vstr.32	s13, [r4]
1132:Src/bno055/bno055.c ****     buf->z = (s16)((data[7] << 8) | data[6]) / (f32)BNO_QUA_SCALE;
 4563              		.loc 1 1132 5 is_stmt 1 view .LVU1213
ARM GAS  /tmp/cc9CDFEk.s 			page 121


1132:Src/bno055/bno055.c ****     buf->z = (s16)((data[7] << 8) | data[6]) / (f32)BNO_QUA_SCALE;
 4564              		.loc 1 1132 12 is_stmt 0 view .LVU1214
 4565 008a 84ED017A 		vstr.32	s14, [r4, #4]
1133:Src/bno055/bno055.c ****     return BNO_OK;
 4566              		.loc 1 1133 5 is_stmt 1 view .LVU1215
1133:Src/bno055/bno055.c ****     return BNO_OK;
 4567              		.loc 1 1133 12 is_stmt 0 view .LVU1216
 4568 008e C4ED027A 		vstr.32	s15, [r4, #8]
1134:Src/bno055/bno055.c **** }
 4569              		.loc 1 1134 5 is_stmt 1 view .LVU1217
1135:Src/bno055/bno055.c **** 
 4570              		.loc 1 1135 1 is_stmt 0 view .LVU1218
 4571 0092 07B0     		add	sp, sp, #28
 4572              	.LCFI150:
 4573              		.cfi_def_cfa_offset 20
 4574              		@ sp needed
 4575 0094 F0BD     		pop	{r4, r5, r6, r7, pc}
 4576              	.LVL482:
 4577              	.L232:
1135:Src/bno055/bno055.c **** 
 4578              		.loc 1 1135 1 view .LVU1219
 4579 0096 00BF     		.align	2
 4580              	.L231:
 4581 0098 00008038 		.word	947912704
 4582              		.cfi_endproc
 4583              	.LFE163:
 4585              		.section	.text.bno055_set_opmode,"ax",%progbits
 4586              		.align	1
 4587              		.p2align 2,,3
 4588              		.global	bno055_set_opmode
 4589              		.syntax unified
 4590              		.thumb
 4591              		.thumb_func
 4592              		.fpu fpv4-sp-d16
 4594              	bno055_set_opmode:
 4595              	.LVL483:
 4596              	.LFB164:
1137:Src/bno055/bno055.c ****     error_bno err;
 4597              		.loc 1 1137 74 is_stmt 1 view -0
 4598              		.cfi_startproc
 4599              		@ args = 0, pretend = 0, frame = 8
 4600              		@ frame_needed = 0, uses_anonymous_args = 0
1138:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 4601              		.loc 1 1138 5 view .LVU1221
1144:Src/bno055/bno055.c ****         BNO_OK) {
 4602              		.loc 1 1144 5 view .LVU1222
1137:Src/bno055/bno055.c ****     error_bno err;
 4603              		.loc 1 1137 74 is_stmt 0 view .LVU1223
 4604 0000 30B5     		push	{r4, r5, lr}
 4605              	.LCFI151:
 4606              		.cfi_def_cfa_offset 12
 4607              		.cfi_offset 4, -12
 4608              		.cfi_offset 5, -8
 4609              		.cfi_offset 14, -4
 4610              	.LBB296:
 4611              	.LBB297:
1233:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
ARM GAS  /tmp/cc9CDFEk.s 			page 122


1234:Src/bno055/bno055.c ****     }
1235:Src/bno055/bno055.c ****     return BNO_OK;
1236:Src/bno055/bno055.c **** }
1237:Src/bno055/bno055.c **** 
1238:Src/bno055/bno055.c **** error_bno bno055_write_regs(bno055_t imu, uint32_t addr, uint8_t* buf,
1239:Src/bno055/bno055.c ****                             uint32_t buf_size) {
1240:Src/bno055/bno055.c ****     HAL_StatusTypeDef err;
1241:Src/bno055/bno055.c ****     err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
 4612              		.loc 1 1241 11 view .LVU1224
 4613 0002 4FF0FF32 		mov	r2, #-1
 4614              	.LBE297:
 4615              	.LBE296:
1137:Src/bno055/bno055.c ****     error_bno err;
 4616              		.loc 1 1137 74 view .LVU1225
 4617 0006 87B0     		sub	sp, sp, #28
 4618              	.LCFI152:
 4619              		.cfi_def_cfa_offset 40
 4620              	.LVL484:
 4621              	.LBB301:
 4622              	.LBI296:
1238:Src/bno055/bno055.c ****                             uint32_t buf_size) {
 4623              		.loc 1 1238 11 is_stmt 1 view .LVU1226
 4624              	.LBB298:
1240:Src/bno055/bno055.c ****     err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
 4625              		.loc 1 1240 5 view .LVU1227
 4626              		.loc 1 1241 5 view .LVU1228
 4627              		.loc 1 1241 11 is_stmt 0 view .LVU1229
 4628 0008 0125     		movs	r5, #1
 4629 000a CDE90152 		strd	r5, r2, [sp, #4]
 4630              	.LVL485:
 4631              		.loc 1 1241 11 view .LVU1230
 4632 000e 0DF11703 		add	r3, sp, #23
 4633              	.LVL486:
 4634              		.loc 1 1241 11 view .LVU1231
 4635 0012 0093     		str	r3, [sp]
 4636              	.LBE298:
 4637              	.LBE301:
1137:Src/bno055/bno055.c ****     error_bno err;
 4638              		.loc 1 1137 74 view .LVU1232
 4639 0014 8DF81710 		strb	r1, [sp, #23]
 4640              	.LBB302:
 4641              	.LBB299:
 4642              		.loc 1 1241 11 view .LVU1233
 4643 0018 2B46     		mov	r3, r5
 4644              	.LVL487:
 4645              		.loc 1 1241 11 view .LVU1234
 4646 001a 8179     		ldrb	r1, [r0, #6]	@ zero_extendqisi2
 4647              	.LVL488:
 4648              		.loc 1 1241 11 view .LVU1235
 4649 001c 0068     		ldr	r0, [r0]
 4650              	.LVL489:
 4651              		.loc 1 1241 11 view .LVU1236
 4652 001e 3D22     		movs	r2, #61
 4653 0020 FFF7FEFF 		bl	HAL_I2C_Mem_Write
 4654              	.LVL490:
1242:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
1243:Src/bno055/bno055.c ****     if (err != HAL_OK) {
ARM GAS  /tmp/cc9CDFEk.s 			page 123


 4655              		.loc 1 1243 5 is_stmt 1 view .LVU1237
 4656              		.loc 1 1243 8 is_stmt 0 view .LVU1238
 4657 0024 30B9     		cbnz	r0, .L235
 4658 0026 0446     		mov	r4, r0
 4659              	.LVL491:
 4660              		.loc 1 1243 8 view .LVU1239
 4661              	.LBE299:
 4662              	.LBE302:
1148:Src/bno055/bno055.c ****     return BNO_OK;
 4663              		.loc 1 1148 5 is_stmt 1 view .LVU1240
 4664 0028 1820     		movs	r0, #24
 4665 002a FFF7FEFF 		bl	HAL_Delay
 4666              	.LVL492:
1149:Src/bno055/bno055.c **** }
 4667              		.loc 1 1149 5 view .LVU1241
1150:Src/bno055/bno055.c **** 
 4668              		.loc 1 1150 1 is_stmt 0 view .LVU1242
 4669 002e 2046     		mov	r0, r4
 4670 0030 07B0     		add	sp, sp, #28
 4671              	.LCFI153:
 4672              		.cfi_remember_state
 4673              		.cfi_def_cfa_offset 12
 4674              		@ sp needed
 4675 0032 30BD     		pop	{r4, r5, pc}
 4676              	.LVL493:
 4677              	.L235:
 4678              	.LCFI154:
 4679              		.cfi_restore_state
 4680              	.LBB303:
 4681              	.LBB300:
1244:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 4682              		.loc 1 1244 16 view .LVU1243
 4683 0034 2C46     		mov	r4, r5
 4684              	.LVL494:
 4685              		.loc 1 1244 16 view .LVU1244
 4686              	.LBE300:
 4687              	.LBE303:
1150:Src/bno055/bno055.c **** 
 4688              		.loc 1 1150 1 view .LVU1245
 4689 0036 2046     		mov	r0, r4
 4690 0038 07B0     		add	sp, sp, #28
 4691              	.LCFI155:
 4692              		.cfi_def_cfa_offset 12
 4693              		@ sp needed
 4694 003a 30BD     		pop	{r4, r5, pc}
 4695              		.cfi_endproc
 4696              	.LFE164:
 4698              		.section	.text.bno055_set_unit,"ax",%progbits
 4699              		.align	1
 4700              		.p2align 2,,3
 4701              		.global	bno055_set_unit
 4702              		.syntax unified
 4703              		.thumb
 4704              		.thumb_func
 4705              		.fpu fpv4-sp-d16
 4707              	bno055_set_unit:
 4708              	.LVL495:
ARM GAS  /tmp/cc9CDFEk.s 			page 124


 4709              	.LFB165:
1155:Src/bno055/bno055.c ****     error_bno err;
 4710              		.loc 1 1155 62 is_stmt 1 view -0
 4711              		.cfi_startproc
 4712              		@ args = 4, pretend = 0, frame = 8
 4713              		@ frame_needed = 0, uses_anonymous_args = 0
1156:Src/bno055/bno055.c ****     if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 4714              		.loc 1 1156 5 view .LVU1247
1157:Src/bno055/bno055.c ****         return err;
 4715              		.loc 1 1157 5 view .LVU1248
1155:Src/bno055/bno055.c ****     error_bno err;
 4716              		.loc 1 1155 62 is_stmt 0 view .LVU1249
 4717 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4718              	.LCFI156:
 4719              		.cfi_def_cfa_offset 36
 4720              		.cfi_offset 4, -36
 4721              		.cfi_offset 5, -32
 4722              		.cfi_offset 6, -28
 4723              		.cfi_offset 7, -24
 4724              		.cfi_offset 8, -20
 4725              		.cfi_offset 9, -16
 4726              		.cfi_offset 10, -12
 4727              		.cfi_offset 11, -8
 4728              		.cfi_offset 14, -4
 4729              	.LBB318:
 4730              	.LBB319:
 4731              	.LBB320:
 4732              	.LBB321:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 4733              		.loc 1 1241 11 view .LVU1250
 4734 0004 0125     		movs	r5, #1
 4735              	.LBE321:
 4736              	.LBE320:
 4737              	.LBE319:
 4738              	.LBE318:
1155:Src/bno055/bno055.c ****     error_bno err;
 4739              		.loc 1 1155 62 view .LVU1251
 4740 0006 87B0     		sub	sp, sp, #28
 4741              	.LCFI157:
 4742              		.cfi_def_cfa_offset 64
 4743              	.LBB337:
 4744              	.LBB332:
 4745              	.LBB327:
 4746              	.LBB322:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 4747              		.loc 1 1241 11 view .LVU1252
 4748 0008 4FF0FF3A 		mov	r10, #-1
 4749 000c CDE9015A 		strd	r5, r10, [sp, #4]
 4750              	.LBE322:
 4751              	.LBE327:
 4752              	.LBE332:
 4753              	.LBE337:
1155:Src/bno055/bno055.c ****     error_bno err;
 4754              		.loc 1 1155 62 view .LVU1253
 4755 0010 9846     		mov	r8, r3
 4756              	.LBB338:
 4757              	.LBB333:
ARM GAS  /tmp/cc9CDFEk.s 			page 125


 4758              	.LBB328:
 4759              	.LBB323:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 4760              		.loc 1 1241 11 view .LVU1254
 4761 0012 0DF11703 		add	r3, sp, #23
 4762              	.LVL496:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 4763              		.loc 1 1241 11 view .LVU1255
 4764 0016 0093     		str	r3, [sp]
 4765 0018 0023     		movs	r3, #0
 4766              	.LBE323:
 4767              	.LBE328:
 4768              	.LBE333:
 4769              	.LBE338:
1155:Src/bno055/bno055.c ****     error_bno err;
 4770              		.loc 1 1155 62 view .LVU1256
 4771 001a 0446     		mov	r4, r0
 4772              	.LVL497:
1155:Src/bno055/bno055.c ****     error_bno err;
 4773              		.loc 1 1155 62 view .LVU1257
 4774 001c 0F46     		mov	r7, r1
 4775 001e 9146     		mov	r9, r2
 4776              	.LBB339:
 4777              	.LBB334:
 4778              	.LBB329:
 4779              	.LBB324:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 4780              		.loc 1 1241 11 view .LVU1258
 4781 0020 8179     		ldrb	r1, [r0, #6]	@ zero_extendqisi2
 4782              	.LVL498:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 4783              		.loc 1 1241 11 view .LVU1259
 4784 0022 8DF81730 		strb	r3, [sp, #23]
 4785              	.LVL499:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 4786              		.loc 1 1241 11 view .LVU1260
 4787              	.LBE324:
 4788              	.LBE329:
 4789              	.LBE334:
 4790              	.LBI318:
1137:Src/bno055/bno055.c ****     error_bno err;
 4791              		.loc 1 1137 11 is_stmt 1 view .LVU1261
 4792              	.LBB335:
1138:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 4793              		.loc 1 1138 5 view .LVU1262
1144:Src/bno055/bno055.c ****         BNO_OK) {
 4794              		.loc 1 1144 5 view .LVU1263
 4795              	.LBB330:
 4796              	.LBI320:
1238:Src/bno055/bno055.c ****                             uint32_t buf_size) {
 4797              		.loc 1 1238 11 view .LVU1264
 4798              	.LBB325:
1240:Src/bno055/bno055.c ****     err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
 4799              		.loc 1 1240 5 view .LVU1265
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 4800              		.loc 1 1241 5 view .LVU1266
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
ARM GAS  /tmp/cc9CDFEk.s 			page 126


 4801              		.loc 1 1241 11 is_stmt 0 view .LVU1267
 4802 0026 0068     		ldr	r0, [r0]
 4803              	.LVL500:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 4804              		.loc 1 1241 11 view .LVU1268
 4805              	.LBE325:
 4806              	.LBE330:
 4807              	.LBE335:
 4808              	.LBE339:
1155:Src/bno055/bno055.c ****     error_bno err;
 4809              		.loc 1 1155 62 view .LVU1269
 4810 0028 9DF840B0 		ldrb	fp, [sp, #64]	@ zero_extendqisi2
 4811              	.LBB340:
 4812              	.LBB336:
 4813              	.LBB331:
 4814              	.LBB326:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 4815              		.loc 1 1241 11 view .LVU1270
 4816 002c 2B46     		mov	r3, r5
 4817              	.LVL501:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 4818              		.loc 1 1241 11 view .LVU1271
 4819 002e 3D22     		movs	r2, #61
 4820              	.LVL502:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 4821              		.loc 1 1241 11 view .LVU1272
 4822 0030 FFF7FEFF 		bl	HAL_I2C_Mem_Write
 4823              	.LVL503:
1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 4824              		.loc 1 1243 5 is_stmt 1 view .LVU1273
1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 4825              		.loc 1 1243 8 is_stmt 0 view .LVU1274
 4826 0034 0028     		cmp	r0, #0
 4827 0036 49D1     		bne	.L241
 4828              	.LVL504:
1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 4829              		.loc 1 1243 8 view .LVU1275
 4830              	.LBE326:
 4831              	.LBE331:
1148:Src/bno055/bno055.c ****     return BNO_OK;
 4832              		.loc 1 1148 5 is_stmt 1 view .LVU1276
 4833 0038 0646     		mov	r6, r0
 4834 003a 1820     		movs	r0, #24
 4835 003c FFF7FEFF 		bl	HAL_Delay
 4836              	.LVL505:
1149:Src/bno055/bno055.c **** }
 4837              		.loc 1 1149 5 view .LVU1277
1149:Src/bno055/bno055.c **** }
 4838              		.loc 1 1149 5 is_stmt 0 view .LVU1278
 4839              	.LBE336:
 4840              	.LBE340:
1160:Src/bno055/bno055.c ****         return err;
 4841              		.loc 1 1160 5 is_stmt 1 view .LVU1279
 4842              	.LBB341:
 4843              	.LBB342:
1245:Src/bno055/bno055.c ****     }
1246:Src/bno055/bno055.c ****     return BNO_OK;
ARM GAS  /tmp/cc9CDFEk.s 			page 127


1247:Src/bno055/bno055.c **** }
1248:Src/bno055/bno055.c **** 
1249:Src/bno055/bno055.c **** error_bno bno055_set_page(bno055_t* imu, const bno055_page_t page) {
1250:Src/bno055/bno055.c ****     if (imu->_page != page) {
 4844              		.loc 1 1250 8 is_stmt 0 view .LVU1280
 4845 0040 637B     		ldrb	r3, [r4, #13]	@ zero_extendqisi2
 4846 0042 8DF81760 		strb	r6, [sp, #23]
 4847              	.LVL506:
 4848              		.loc 1 1250 8 view .LVU1281
 4849              	.LBE342:
 4850              	.LBI341:
1249:Src/bno055/bno055.c ****     if (imu->_page != page) {
 4851              		.loc 1 1249 11 is_stmt 1 view .LVU1282
 4852              	.LBB345:
 4853              		.loc 1 1250 5 view .LVU1283
 4854              		.loc 1 1250 8 is_stmt 0 view .LVU1284
 4855 0046 8BB9     		cbnz	r3, .L243
1251:Src/bno055/bno055.c ****         return BNO_OK;
1252:Src/bno055/bno055.c ****     }
1253:Src/bno055/bno055.c ****     if (page > 0x01) {
 4856              		.loc 1 1253 5 is_stmt 1 view .LVU1285
1254:Src/bno055/bno055.c ****         return BNO_ERR_PAGE_TOO_HIGH;
1255:Src/bno055/bno055.c ****     }
1256:Src/bno055/bno055.c ****     error_bno err;
 4857              		.loc 1 1256 5 view .LVU1286
1257:Src/bno055/bno055.c ****     err = bno055_write_regs(*imu, BNO_PAGE_ID, (u8*)&page, 1);
 4858              		.loc 1 1257 5 view .LVU1287
 4859              	.LVL507:
 4860              	.LBB343:
 4861              	.LBI343:
1238:Src/bno055/bno055.c ****                             uint32_t buf_size) {
 4862              		.loc 1 1238 11 view .LVU1288
 4863              	.LBB344:
1240:Src/bno055/bno055.c ****     err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
 4864              		.loc 1 1240 5 view .LVU1289
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 4865              		.loc 1 1241 5 view .LVU1290
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 4866              		.loc 1 1241 11 is_stmt 0 view .LVU1291
 4867 0048 CDE9015A 		strd	r5, r10, [sp, #4]
 4868              	.LVL508:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 4869              		.loc 1 1241 11 view .LVU1292
 4870 004c 0DF11703 		add	r3, sp, #23
 4871              	.LVL509:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 4872              		.loc 1 1241 11 view .LVU1293
 4873 0050 0093     		str	r3, [sp]
 4874 0052 A179     		ldrb	r1, [r4, #6]	@ zero_extendqisi2
 4875 0054 2068     		ldr	r0, [r4]
 4876 0056 2B46     		mov	r3, r5
 4877              	.LVL510:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 4878              		.loc 1 1241 11 view .LVU1294
 4879 0058 0722     		movs	r2, #7
 4880 005a FFF7FEFF 		bl	HAL_I2C_Mem_Write
 4881              	.LVL511:
ARM GAS  /tmp/cc9CDFEk.s 			page 128


1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 4882              		.loc 1 1243 5 is_stmt 1 view .LVU1295
1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 4883              		.loc 1 1243 8 is_stmt 0 view .LVU1296
 4884 005e A8BB     		cbnz	r0, .L241
 4885              	.LVL512:
1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 4886              		.loc 1 1243 8 view .LVU1297
 4887              	.LBE344:
 4888              	.LBE343:
1258:Src/bno055/bno055.c ****     if (err != BNO_OK) {
 4889              		.loc 1 1258 5 is_stmt 1 view .LVU1298
1259:Src/bno055/bno055.c ****         return err;
1260:Src/bno055/bno055.c ****     }
1261:Src/bno055/bno055.c ****     imu->_page = page;
 4890              		.loc 1 1261 5 view .LVU1299
 4891              		.loc 1 1261 16 is_stmt 0 view .LVU1300
 4892 0060 9DF81730 		ldrb	r3, [sp, #23]	@ zero_extendqisi2
 4893 0064 6373     		strb	r3, [r4, #13]
1262:Src/bno055/bno055.c ****     HAL_Delay(2);
 4894              		.loc 1 1262 5 is_stmt 1 view .LVU1301
 4895 0066 0220     		movs	r0, #2
 4896 0068 FFF7FEFF 		bl	HAL_Delay
 4897              	.LVL513:
1263:Src/bno055/bno055.c ****     return BNO_OK;
 4898              		.loc 1 1263 5 view .LVU1302
 4899              	.L243:
 4900              		.loc 1 1263 5 is_stmt 0 view .LVU1303
 4901              	.LBE345:
 4902              	.LBE341:
1163:Src/bno055/bno055.c ****     if ((err = bno055_write_regs(*bno, BNO_UNIT_SEL, &data, 1)) != BNO_OK) {
 4903              		.loc 1 1163 5 is_stmt 1 view .LVU1304
1163:Src/bno055/bno055.c ****     if ((err = bno055_write_regs(*bno, BNO_UNIT_SEL, &data, 1)) != BNO_OK) {
 4904              		.loc 1 1163 13 is_stmt 0 view .LVU1305
 4905 006c 48EA0B03 		orr	r3, r8, fp
 4906              	.LBB346:
 4907              	.LBB347:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 4908              		.loc 1 1241 11 view .LVU1306
 4909 0070 0126     		movs	r6, #1
 4910              	.LBE347:
 4911              	.LBE346:
1163:Src/bno055/bno055.c ****     if ((err = bno055_write_regs(*bno, BNO_UNIT_SEL, &data, 1)) != BNO_OK) {
 4912              		.loc 1 1163 13 view .LVU1307
 4913 0072 49EA0303 		orr	r3, r9, r3
 4914              	.LBB351:
 4915              	.LBB348:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 4916              		.loc 1 1241 11 view .LVU1308
 4917 0076 4FF0FF35 		mov	r5, #-1
 4918 007a CDE90165 		strd	r6, r5, [sp, #4]
 4919              	.LBE348:
 4920              	.LBE351:
1163:Src/bno055/bno055.c ****     if ((err = bno055_write_regs(*bno, BNO_UNIT_SEL, &data, 1)) != BNO_OK) {
 4921              		.loc 1 1163 13 view .LVU1309
 4922 007e 3B43     		orrs	r3, r3, r7
 4923 0080 8DF81630 		strb	r3, [sp, #22]
ARM GAS  /tmp/cc9CDFEk.s 			page 129


1164:Src/bno055/bno055.c ****         return err;
 4924              		.loc 1 1164 5 is_stmt 1 view .LVU1310
 4925              	.LVL514:
 4926              	.LBB352:
 4927              	.LBI346:
1238:Src/bno055/bno055.c ****                             uint32_t buf_size) {
 4928              		.loc 1 1238 11 view .LVU1311
 4929              	.LBB349:
1240:Src/bno055/bno055.c ****     err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
 4930              		.loc 1 1240 5 view .LVU1312
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 4931              		.loc 1 1241 5 view .LVU1313
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 4932              		.loc 1 1241 11 is_stmt 0 view .LVU1314
 4933 0084 0DF11603 		add	r3, sp, #22
 4934              	.LVL515:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 4935              		.loc 1 1241 11 view .LVU1315
 4936 0088 0093     		str	r3, [sp]
 4937 008a A179     		ldrb	r1, [r4, #6]	@ zero_extendqisi2
 4938 008c 2068     		ldr	r0, [r4]
 4939 008e 3346     		mov	r3, r6
 4940              	.LVL516:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 4941              		.loc 1 1241 11 view .LVU1316
 4942 0090 3B22     		movs	r2, #59
 4943 0092 FFF7FEFF 		bl	HAL_I2C_Mem_Write
 4944              	.LVL517:
1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 4945              		.loc 1 1243 5 is_stmt 1 view .LVU1317
1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 4946              		.loc 1 1243 8 is_stmt 0 view .LVU1318
 4947 0096 E8B9     		cbnz	r0, .L245
 4948              	.LVL518:
1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 4949              		.loc 1 1243 8 view .LVU1319
 4950              	.LBE349:
 4951              	.LBE352:
1167:Src/bno055/bno055.c ****     bno->_acc_unit = a_unit;
 4952              		.loc 1 1167 5 is_stmt 1 view .LVU1320
 4953 0098 2179     		ldrb	r1, [r4, #4]	@ zero_extendqisi2
1167:Src/bno055/bno055.c ****     bno->_acc_unit = a_unit;
 4954              		.loc 1 1167 20 is_stmt 0 view .LVU1321
 4955 009a 84F81090 		strb	r9, [r4, #16]
1168:Src/bno055/bno055.c ****     bno->_eul_unit = e_unit;
 4956              		.loc 1 1168 5 is_stmt 1 view .LVU1322
1168:Src/bno055/bno055.c ****     bno->_eul_unit = e_unit;
 4957              		.loc 1 1168 20 is_stmt 0 view .LVU1323
 4958 009e 84F80E80 		strb	r8, [r4, #14]
1169:Src/bno055/bno055.c ****     bno->_temp_unit = t_unit;
 4959              		.loc 1 1169 5 is_stmt 1 view .LVU1324
1169:Src/bno055/bno055.c ****     bno->_temp_unit = t_unit;
 4960              		.loc 1 1169 20 is_stmt 0 view .LVU1325
 4961 00a2 84F811B0 		strb	fp, [r4, #17]
1170:Src/bno055/bno055.c **** 
 4962              		.loc 1 1170 5 is_stmt 1 view .LVU1326
1170:Src/bno055/bno055.c **** 
ARM GAS  /tmp/cc9CDFEk.s 			page 130


 4963              		.loc 1 1170 21 is_stmt 0 view .LVU1327
 4964 00a6 E773     		strb	r7, [r4, #15]
1172:Src/bno055/bno055.c ****         return err;
 4965              		.loc 1 1172 5 is_stmt 1 view .LVU1328
 4966              	.LVL519:
 4967              	.LBB353:
 4968              	.LBB354:
 4969              	.LBB355:
 4970              	.LBB356:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 4971              		.loc 1 1241 11 is_stmt 0 view .LVU1329
 4972 00a8 CDE90165 		strd	r6, r5, [sp, #4]
 4973 00ac 0DF11703 		add	r3, sp, #23
 4974 00b0 0093     		str	r3, [sp]
 4975 00b2 8DF81710 		strb	r1, [sp, #23]
 4976              	.LVL520:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 4977              		.loc 1 1241 11 view .LVU1330
 4978              	.LBE356:
 4979              	.LBE355:
 4980              	.LBE354:
 4981              	.LBI353:
1137:Src/bno055/bno055.c ****     error_bno err;
 4982              		.loc 1 1137 11 is_stmt 1 view .LVU1331
 4983              	.LBB359:
1138:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 4984              		.loc 1 1138 5 view .LVU1332
1144:Src/bno055/bno055.c ****         BNO_OK) {
 4985              		.loc 1 1144 5 view .LVU1333
 4986              	.LBB358:
 4987              	.LBI355:
1238:Src/bno055/bno055.c ****                             uint32_t buf_size) {
 4988              		.loc 1 1238 11 view .LVU1334
 4989              	.LBB357:
1240:Src/bno055/bno055.c ****     err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
 4990              		.loc 1 1240 5 view .LVU1335
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 4991              		.loc 1 1241 5 view .LVU1336
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 4992              		.loc 1 1241 11 is_stmt 0 view .LVU1337
 4993 00b6 2068     		ldr	r0, [r4]
 4994 00b8 A179     		ldrb	r1, [r4, #6]	@ zero_extendqisi2
 4995              	.LVL521:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 4996              		.loc 1 1241 11 view .LVU1338
 4997 00ba 3346     		mov	r3, r6
 4998              	.LVL522:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 4999              		.loc 1 1241 11 view .LVU1339
 5000 00bc 3D22     		movs	r2, #61
 5001 00be FFF7FEFF 		bl	HAL_I2C_Mem_Write
 5002              	.LVL523:
1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 5003              		.loc 1 1243 5 is_stmt 1 view .LVU1340
1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 5004              		.loc 1 1243 8 is_stmt 0 view .LVU1341
 5005 00c2 0546     		mov	r5, r0
ARM GAS  /tmp/cc9CDFEk.s 			page 131


 5006 00c4 30B9     		cbnz	r0, .L245
 5007              	.LVL524:
1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 5008              		.loc 1 1243 8 view .LVU1342
 5009              	.LBE357:
 5010              	.LBE358:
1148:Src/bno055/bno055.c ****     return BNO_OK;
 5011              		.loc 1 1148 5 is_stmt 1 view .LVU1343
 5012 00c6 1820     		movs	r0, #24
 5013 00c8 FFF7FEFF 		bl	HAL_Delay
 5014              	.LVL525:
1149:Src/bno055/bno055.c **** }
 5015              		.loc 1 1149 5 view .LVU1344
 5016              	.L241:
1149:Src/bno055/bno055.c **** }
 5017              		.loc 1 1149 5 is_stmt 0 view .LVU1345
 5018              	.LBE359:
 5019              	.LBE353:
1176:Src/bno055/bno055.c **** 
 5020              		.loc 1 1176 1 view .LVU1346
 5021 00cc 2846     		mov	r0, r5
 5022 00ce 07B0     		add	sp, sp, #28
 5023              	.LCFI158:
 5024              		.cfi_remember_state
 5025              		.cfi_def_cfa_offset 36
 5026              		@ sp needed
 5027 00d0 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 5028              	.LVL526:
 5029              	.L245:
 5030              	.LCFI159:
 5031              		.cfi_restore_state
 5032              	.LBB360:
 5033              	.LBB350:
1244:Src/bno055/bno055.c ****     }
 5034              		.loc 1 1244 16 view .LVU1347
 5035 00d4 3546     		mov	r5, r6
 5036              	.LVL527:
1244:Src/bno055/bno055.c ****     }
 5037              		.loc 1 1244 16 view .LVU1348
 5038              	.LBE350:
 5039              	.LBE360:
1176:Src/bno055/bno055.c **** 
 5040              		.loc 1 1176 1 view .LVU1349
 5041 00d6 2846     		mov	r0, r5
 5042 00d8 07B0     		add	sp, sp, #28
 5043              	.LCFI160:
 5044              		.cfi_def_cfa_offset 36
 5045              		@ sp needed
 5046 00da BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
1176:Src/bno055/bno055.c **** 
 5047              		.loc 1 1176 1 view .LVU1350
 5048              		.cfi_endproc
 5049              	.LFE165:
 5051 00de 00BF     		.section	.text.bno055_set_pwr_mode,"ax",%progbits
 5052              		.align	1
 5053              		.p2align 2,,3
 5054              		.global	bno055_set_pwr_mode
ARM GAS  /tmp/cc9CDFEk.s 			page 132


 5055              		.syntax unified
 5056              		.thumb
 5057              		.thumb_func
 5058              		.fpu fpv4-sp-d16
 5060              	bno055_set_pwr_mode:
 5061              	.LVL528:
 5062              	.LFB166:
1178:Src/bno055/bno055.c ****     if (imu == NULL) {
 5063              		.loc 1 1178 69 is_stmt 1 view -0
 5064              		.cfi_startproc
 5065              		@ args = 0, pretend = 0, frame = 16
 5066              		@ frame_needed = 0, uses_anonymous_args = 0
1179:Src/bno055/bno055.c ****         return BNO_ERR_NULL_PTR;
 5067              		.loc 1 1179 5 view .LVU1352
1178:Src/bno055/bno055.c ****     if (imu == NULL) {
 5068              		.loc 1 1178 69 is_stmt 0 view .LVU1353
 5069 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 5070              	.LCFI161:
 5071              		.cfi_def_cfa_offset 20
 5072              		.cfi_offset 4, -20
 5073              		.cfi_offset 5, -16
 5074              		.cfi_offset 6, -12
 5075              		.cfi_offset 7, -8
 5076              		.cfi_offset 14, -4
 5077 0002 89B0     		sub	sp, sp, #36
 5078              	.LCFI162:
 5079              		.cfi_def_cfa_offset 56
1178:Src/bno055/bno055.c ****     if (imu == NULL) {
 5080              		.loc 1 1178 69 view .LVU1354
 5081 0004 8DF81710 		strb	r1, [sp, #23]
1179:Src/bno055/bno055.c ****         return BNO_ERR_NULL_PTR;
 5082              		.loc 1 1179 8 view .LVU1355
 5083 0008 0028     		cmp	r0, #0
 5084 000a 74D0     		beq	.L260
1182:Src/bno055/bno055.c ****     if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 5085              		.loc 1 1182 5 is_stmt 1 view .LVU1356
1183:Src/bno055/bno055.c ****         return err;
 5086              		.loc 1 1183 5 view .LVU1357
 5087              	.LVL529:
 5088              	.LBB379:
 5089              	.LBB380:
 5090              	.LBB381:
 5091              	.LBB382:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5092              		.loc 1 1241 11 is_stmt 0 view .LVU1358
 5093 000c 0125     		movs	r5, #1
 5094 000e 4FF0FF37 		mov	r7, #-1
 5095 0012 CDE90157 		strd	r5, r7, [sp, #4]
 5096 0016 0DF11F02 		add	r2, sp, #31
 5097 001a 0092     		str	r2, [sp]
 5098 001c 0023     		movs	r3, #0
 5099 001e 8179     		ldrb	r1, [r0, #6]	@ zero_extendqisi2
 5100              	.LVL530:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5101              		.loc 1 1241 11 view .LVU1359
 5102 0020 8DF81F30 		strb	r3, [sp, #31]
 5103              	.LVL531:
ARM GAS  /tmp/cc9CDFEk.s 			page 133


1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5104              		.loc 1 1241 11 view .LVU1360
 5105              	.LBE382:
 5106              	.LBE381:
 5107              	.LBE380:
 5108              	.LBI379:
1137:Src/bno055/bno055.c ****     error_bno err;
 5109              		.loc 1 1137 11 is_stmt 1 view .LVU1361
 5110              	.LBB385:
1138:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 5111              		.loc 1 1138 5 view .LVU1362
1144:Src/bno055/bno055.c ****         BNO_OK) {
 5112              		.loc 1 1144 5 view .LVU1363
 5113              	.LBB384:
 5114              	.LBI381:
1238:Src/bno055/bno055.c ****                             uint32_t buf_size) {
 5115              		.loc 1 1238 11 view .LVU1364
 5116              	.LBB383:
1240:Src/bno055/bno055.c ****     err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
 5117              		.loc 1 1240 5 view .LVU1365
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5118              		.loc 1 1241 5 view .LVU1366
 5119 0024 0446     		mov	r4, r0
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5120              		.loc 1 1241 11 is_stmt 0 view .LVU1367
 5121 0026 2B46     		mov	r3, r5
 5122              	.LVL532:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5123              		.loc 1 1241 11 view .LVU1368
 5124 0028 0068     		ldr	r0, [r0]
 5125              	.LVL533:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5126              		.loc 1 1241 11 view .LVU1369
 5127 002a 3D22     		movs	r2, #61
 5128              	.LVL534:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5129              		.loc 1 1241 11 view .LVU1370
 5130 002c FFF7FEFF 		bl	HAL_I2C_Mem_Write
 5131              	.LVL535:
1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 5132              		.loc 1 1243 5 is_stmt 1 view .LVU1371
1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 5133              		.loc 1 1243 8 is_stmt 0 view .LVU1372
 5134 0030 0646     		mov	r6, r0
 5135 0032 0028     		cmp	r0, #0
 5136 0034 48D1     		bne	.L250
 5137              	.LVL536:
1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 5138              		.loc 1 1243 8 view .LVU1373
 5139              	.LBE383:
 5140              	.LBE384:
1148:Src/bno055/bno055.c ****     return BNO_OK;
 5141              		.loc 1 1148 5 is_stmt 1 view .LVU1374
 5142 0036 1820     		movs	r0, #24
 5143 0038 FFF7FEFF 		bl	HAL_Delay
 5144              	.LVL537:
1149:Src/bno055/bno055.c **** }
ARM GAS  /tmp/cc9CDFEk.s 			page 134


 5145              		.loc 1 1149 5 view .LVU1375
1149:Src/bno055/bno055.c **** }
 5146              		.loc 1 1149 5 is_stmt 0 view .LVU1376
 5147              	.LBE385:
 5148              	.LBE379:
1186:Src/bno055/bno055.c ****         return err;
 5149              		.loc 1 1186 5 is_stmt 1 view .LVU1377
 5150              	.LBB386:
 5151              	.LBB387:
1250:Src/bno055/bno055.c ****         return BNO_OK;
 5152              		.loc 1 1250 8 is_stmt 0 view .LVU1378
 5153 003c 637B     		ldrb	r3, [r4, #13]	@ zero_extendqisi2
 5154 003e 8DF81F60 		strb	r6, [sp, #31]
 5155              	.LVL538:
1250:Src/bno055/bno055.c ****         return BNO_OK;
 5156              		.loc 1 1250 8 view .LVU1379
 5157              	.LBE387:
 5158              	.LBI386:
1249:Src/bno055/bno055.c ****     if (imu->_page != page) {
 5159              		.loc 1 1249 11 is_stmt 1 view .LVU1380
 5160              	.LBB390:
1250:Src/bno055/bno055.c ****         return BNO_OK;
 5161              		.loc 1 1250 5 view .LVU1381
1250:Src/bno055/bno055.c ****         return BNO_OK;
 5162              		.loc 1 1250 8 is_stmt 0 view .LVU1382
 5163 0042 002B     		cmp	r3, #0
 5164 0044 43D0     		beq	.L264
 5165              	.LVL539:
 5166              	.L255:
1250:Src/bno055/bno055.c ****         return BNO_OK;
 5167              		.loc 1 1250 8 view .LVU1383
 5168              	.LBE390:
 5169              	.LBE386:
1189:Src/bno055/bno055.c ****         BNO_OK) {
 5170              		.loc 1 1189 5 is_stmt 1 view .LVU1384
 5171              	.LBB392:
 5172              	.LBI392:
1238:Src/bno055/bno055.c ****                             uint32_t buf_size) {
 5173              		.loc 1 1238 11 view .LVU1385
 5174              	.LBB393:
1240:Src/bno055/bno055.c ****     err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
 5175              		.loc 1 1240 5 view .LVU1386
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5176              		.loc 1 1241 5 view .LVU1387
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5177              		.loc 1 1241 11 is_stmt 0 view .LVU1388
 5178 0046 0125     		movs	r5, #1
 5179 0048 4FF0FF36 		mov	r6, #-1
 5180 004c CDE90156 		strd	r5, r6, [sp, #4]
 5181              	.LVL540:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5182              		.loc 1 1241 11 view .LVU1389
 5183 0050 0DF11703 		add	r3, sp, #23
 5184              	.LVL541:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5185              		.loc 1 1241 11 view .LVU1390
 5186 0054 0093     		str	r3, [sp]
ARM GAS  /tmp/cc9CDFEk.s 			page 135


 5187 0056 A179     		ldrb	r1, [r4, #6]	@ zero_extendqisi2
 5188 0058 2068     		ldr	r0, [r4]
 5189 005a 2B46     		mov	r3, r5
 5190              	.LVL542:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5191              		.loc 1 1241 11 view .LVU1391
 5192 005c 3E22     		movs	r2, #62
 5193 005e FFF7FEFF 		bl	HAL_I2C_Mem_Write
 5194              	.LVL543:
1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 5195              		.loc 1 1243 5 is_stmt 1 view .LVU1392
1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 5196              		.loc 1 1243 8 is_stmt 0 view .LVU1393
 5197 0062 88BB     		cbnz	r0, .L250
 5198              	.LVL544:
1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 5199              		.loc 1 1243 8 view .LVU1394
 5200              	.LBE393:
 5201              	.LBE392:
1193:Src/bno055/bno055.c ****     if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 5202              		.loc 1 1193 5 is_stmt 1 view .LVU1395
 5203              	.LBB394:
 5204              	.LBB395:
1250:Src/bno055/bno055.c ****         return BNO_OK;
 5205              		.loc 1 1250 8 is_stmt 0 view .LVU1396
 5206 0064 637B     		ldrb	r3, [r4, #13]	@ zero_extendqisi2
 5207              	.LBE395:
 5208              	.LBE394:
1193:Src/bno055/bno055.c ****     if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 5209              		.loc 1 1193 20 view .LVU1397
 5210 0066 9DF81720 		ldrb	r2, [sp, #23]	@ zero_extendqisi2
 5211 006a 8DF81F00 		strb	r0, [sp, #31]
 5212 006e 2273     		strb	r2, [r4, #12]
1194:Src/bno055/bno055.c ****         return err;
 5213              		.loc 1 1194 5 is_stmt 1 view .LVU1398
 5214              	.LVL545:
 5215              	.LBB399:
 5216              	.LBI394:
1249:Src/bno055/bno055.c ****     if (imu->_page != page) {
 5217              		.loc 1 1249 11 view .LVU1399
 5218              	.LBB398:
1250:Src/bno055/bno055.c ****         return BNO_OK;
 5219              		.loc 1 1250 5 view .LVU1400
1250:Src/bno055/bno055.c ****         return BNO_OK;
 5220              		.loc 1 1250 8 is_stmt 0 view .LVU1401
 5221 0070 8BB9     		cbnz	r3, .L258
1253:Src/bno055/bno055.c ****         return BNO_ERR_PAGE_TOO_HIGH;
 5222              		.loc 1 1253 5 is_stmt 1 view .LVU1402
1256:Src/bno055/bno055.c ****     err = bno055_write_regs(*imu, BNO_PAGE_ID, (u8*)&page, 1);
 5223              		.loc 1 1256 5 view .LVU1403
1257:Src/bno055/bno055.c ****     if (err != BNO_OK) {
 5224              		.loc 1 1257 5 view .LVU1404
 5225              	.LVL546:
 5226              	.LBB396:
 5227              	.LBI396:
1238:Src/bno055/bno055.c ****                             uint32_t buf_size) {
 5228              		.loc 1 1238 11 view .LVU1405
ARM GAS  /tmp/cc9CDFEk.s 			page 136


 5229              	.LBB397:
1240:Src/bno055/bno055.c ****     err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
 5230              		.loc 1 1240 5 view .LVU1406
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5231              		.loc 1 1241 5 view .LVU1407
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5232              		.loc 1 1241 11 is_stmt 0 view .LVU1408
 5233 0072 CDE90156 		strd	r5, r6, [sp, #4]
 5234              	.LVL547:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5235              		.loc 1 1241 11 view .LVU1409
 5236 0076 0DF11F03 		add	r3, sp, #31
 5237              	.LVL548:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5238              		.loc 1 1241 11 view .LVU1410
 5239 007a 0093     		str	r3, [sp]
 5240 007c A179     		ldrb	r1, [r4, #6]	@ zero_extendqisi2
 5241 007e 2068     		ldr	r0, [r4]
 5242              	.LVL549:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5243              		.loc 1 1241 11 view .LVU1411
 5244 0080 2B46     		mov	r3, r5
 5245              	.LVL550:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5246              		.loc 1 1241 11 view .LVU1412
 5247 0082 0722     		movs	r2, #7
 5248 0084 FFF7FEFF 		bl	HAL_I2C_Mem_Write
 5249              	.LVL551:
1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 5250              		.loc 1 1243 5 is_stmt 1 view .LVU1413
1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 5251              		.loc 1 1243 8 is_stmt 0 view .LVU1414
 5252 0088 F0B9     		cbnz	r0, .L250
 5253              	.LVL552:
1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 5254              		.loc 1 1243 8 view .LVU1415
 5255              	.LBE397:
 5256              	.LBE396:
1258:Src/bno055/bno055.c ****         return err;
 5257              		.loc 1 1258 5 is_stmt 1 view .LVU1416
1261:Src/bno055/bno055.c ****     HAL_Delay(2);
 5258              		.loc 1 1261 5 view .LVU1417
1261:Src/bno055/bno055.c ****     HAL_Delay(2);
 5259              		.loc 1 1261 16 is_stmt 0 view .LVU1418
 5260 008a 9DF81F30 		ldrb	r3, [sp, #31]	@ zero_extendqisi2
 5261 008e 6373     		strb	r3, [r4, #13]
1262:Src/bno055/bno055.c ****     return BNO_OK;
 5262              		.loc 1 1262 5 is_stmt 1 view .LVU1419
 5263 0090 0220     		movs	r0, #2
 5264 0092 FFF7FEFF 		bl	HAL_Delay
 5265              	.LVL553:
 5266              		.loc 1 1263 5 view .LVU1420
 5267              	.L258:
 5268              		.loc 1 1263 5 is_stmt 0 view .LVU1421
 5269              	.LBE398:
 5270              	.LBE399:
1197:Src/bno055/bno055.c ****         return err;
ARM GAS  /tmp/cc9CDFEk.s 			page 137


 5271              		.loc 1 1197 5 is_stmt 1 view .LVU1422
 5272              	.LBB400:
 5273              	.LBB401:
 5274              	.LBB402:
 5275              	.LBB403:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5276              		.loc 1 1241 11 is_stmt 0 view .LVU1423
 5277 0096 0126     		movs	r6, #1
 5278 0098 4FF0FF33 		mov	r3, #-1
 5279 009c 2179     		ldrb	r1, [r4, #4]	@ zero_extendqisi2
 5280 009e 8DF81F10 		strb	r1, [sp, #31]
 5281              	.LVL554:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5282              		.loc 1 1241 11 view .LVU1424
 5283              	.LBE403:
 5284              	.LBE402:
 5285              	.LBE401:
 5286              	.LBI400:
1137:Src/bno055/bno055.c ****     error_bno err;
 5287              		.loc 1 1137 11 is_stmt 1 view .LVU1425
 5288              	.LBB408:
1138:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 5289              		.loc 1 1138 5 view .LVU1426
1144:Src/bno055/bno055.c ****         BNO_OK) {
 5290              		.loc 1 1144 5 view .LVU1427
 5291              	.LBB406:
 5292              	.LBI402:
1238:Src/bno055/bno055.c ****                             uint32_t buf_size) {
 5293              		.loc 1 1238 11 view .LVU1428
 5294              	.LBB404:
1240:Src/bno055/bno055.c ****     err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
 5295              		.loc 1 1240 5 view .LVU1429
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5296              		.loc 1 1241 5 view .LVU1430
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5297              		.loc 1 1241 11 is_stmt 0 view .LVU1431
 5298 00a2 CDE90163 		strd	r6, r3, [sp, #4]
 5299              	.LVL555:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5300              		.loc 1 1241 11 view .LVU1432
 5301 00a6 0DF11F03 		add	r3, sp, #31
 5302              	.LVL556:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5303              		.loc 1 1241 11 view .LVU1433
 5304 00aa 0093     		str	r3, [sp]
 5305 00ac A179     		ldrb	r1, [r4, #6]	@ zero_extendqisi2
 5306              	.LVL557:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5307              		.loc 1 1241 11 view .LVU1434
 5308 00ae 2068     		ldr	r0, [r4]
 5309 00b0 3346     		mov	r3, r6
 5310              	.LVL558:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5311              		.loc 1 1241 11 view .LVU1435
 5312 00b2 3D22     		movs	r2, #61
 5313 00b4 FFF7FEFF 		bl	HAL_I2C_Mem_Write
 5314              	.LVL559:
ARM GAS  /tmp/cc9CDFEk.s 			page 138


1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 5315              		.loc 1 1243 5 is_stmt 1 view .LVU1436
1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 5316              		.loc 1 1243 8 is_stmt 0 view .LVU1437
 5317 00b8 0546     		mov	r5, r0
 5318 00ba 00BB     		cbnz	r0, .L265
 5319              	.LVL560:
1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 5320              		.loc 1 1243 8 view .LVU1438
 5321              	.LBE404:
 5322              	.LBE406:
1148:Src/bno055/bno055.c ****     return BNO_OK;
 5323              		.loc 1 1148 5 is_stmt 1 view .LVU1439
 5324 00bc 1820     		movs	r0, #24
 5325 00be FFF7FEFF 		bl	HAL_Delay
 5326              	.LVL561:
1149:Src/bno055/bno055.c **** }
 5327              		.loc 1 1149 5 view .LVU1440
1149:Src/bno055/bno055.c **** }
 5328              		.loc 1 1149 5 is_stmt 0 view .LVU1441
 5329              	.LBE408:
 5330              	.LBE400:
1200:Src/bno055/bno055.c ****     return BNO_OK;
 5331              		.loc 1 1200 5 is_stmt 1 view .LVU1442
 5332 00c2 0220     		movs	r0, #2
 5333 00c4 FFF7FEFF 		bl	HAL_Delay
 5334              	.LVL562:
1201:Src/bno055/bno055.c **** }
 5335              		.loc 1 1201 5 view .LVU1443
 5336              	.L250:
1202:Src/bno055/bno055.c **** 
 5337              		.loc 1 1202 1 is_stmt 0 view .LVU1444
 5338 00c8 2846     		mov	r0, r5
 5339 00ca 09B0     		add	sp, sp, #36
 5340              	.LCFI163:
 5341              		.cfi_remember_state
 5342              		.cfi_def_cfa_offset 20
 5343              		@ sp needed
 5344 00cc F0BD     		pop	{r4, r5, r6, r7, pc}
 5345              	.LVL563:
 5346              	.L264:
 5347              	.LCFI164:
 5348              		.cfi_restore_state
 5349              	.LBB410:
 5350              	.LBB391:
1253:Src/bno055/bno055.c ****         return BNO_ERR_PAGE_TOO_HIGH;
 5351              		.loc 1 1253 5 is_stmt 1 view .LVU1445
1256:Src/bno055/bno055.c ****     err = bno055_write_regs(*imu, BNO_PAGE_ID, (u8*)&page, 1);
 5352              		.loc 1 1256 5 view .LVU1446
1257:Src/bno055/bno055.c ****     if (err != BNO_OK) {
 5353              		.loc 1 1257 5 view .LVU1447
 5354              	.LBB388:
 5355              	.LBI388:
1238:Src/bno055/bno055.c ****                             uint32_t buf_size) {
 5356              		.loc 1 1238 11 view .LVU1448
 5357              	.LBB389:
1240:Src/bno055/bno055.c ****     err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
ARM GAS  /tmp/cc9CDFEk.s 			page 139


 5358              		.loc 1 1240 5 view .LVU1449
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5359              		.loc 1 1241 5 view .LVU1450
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5360              		.loc 1 1241 11 is_stmt 0 view .LVU1451
 5361 00ce CDE90157 		strd	r5, r7, [sp, #4]
 5362              	.LVL564:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5363              		.loc 1 1241 11 view .LVU1452
 5364 00d2 0DF11F03 		add	r3, sp, #31
 5365              	.LVL565:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5366              		.loc 1 1241 11 view .LVU1453
 5367 00d6 0093     		str	r3, [sp]
 5368 00d8 A179     		ldrb	r1, [r4, #6]	@ zero_extendqisi2
 5369 00da 2068     		ldr	r0, [r4]
 5370 00dc 2B46     		mov	r3, r5
 5371              	.LVL566:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5372              		.loc 1 1241 11 view .LVU1454
 5373 00de 0722     		movs	r2, #7
 5374 00e0 FFF7FEFF 		bl	HAL_I2C_Mem_Write
 5375              	.LVL567:
1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 5376              		.loc 1 1243 5 is_stmt 1 view .LVU1455
1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 5377              		.loc 1 1243 8 is_stmt 0 view .LVU1456
 5378 00e4 0028     		cmp	r0, #0
 5379 00e6 EFD1     		bne	.L250
 5380              	.LVL568:
1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 5381              		.loc 1 1243 8 view .LVU1457
 5382              	.LBE389:
 5383              	.LBE388:
1258:Src/bno055/bno055.c ****         return err;
 5384              		.loc 1 1258 5 is_stmt 1 view .LVU1458
1261:Src/bno055/bno055.c ****     HAL_Delay(2);
 5385              		.loc 1 1261 5 view .LVU1459
1261:Src/bno055/bno055.c ****     HAL_Delay(2);
 5386              		.loc 1 1261 16 is_stmt 0 view .LVU1460
 5387 00e8 9DF81F30 		ldrb	r3, [sp, #31]	@ zero_extendqisi2
 5388 00ec 6373     		strb	r3, [r4, #13]
1262:Src/bno055/bno055.c ****     return BNO_OK;
 5389              		.loc 1 1262 5 is_stmt 1 view .LVU1461
 5390 00ee 0220     		movs	r0, #2
 5391 00f0 FFF7FEFF 		bl	HAL_Delay
 5392              	.LVL569:
 5393              		.loc 1 1263 5 view .LVU1462
 5394              		.loc 1 1263 5 is_stmt 0 view .LVU1463
 5395 00f4 A7E7     		b	.L255
 5396              	.LVL570:
 5397              	.L260:
 5398              		.loc 1 1263 5 view .LVU1464
 5399              	.LBE391:
 5400              	.LBE410:
1180:Src/bno055/bno055.c ****     }
 5401              		.loc 1 1180 16 view .LVU1465
ARM GAS  /tmp/cc9CDFEk.s 			page 140


 5402 00f6 0425     		movs	r5, #4
1202:Src/bno055/bno055.c **** 
 5403              		.loc 1 1202 1 view .LVU1466
 5404 00f8 2846     		mov	r0, r5
 5405              	.LVL571:
1202:Src/bno055/bno055.c **** 
 5406              		.loc 1 1202 1 view .LVU1467
 5407 00fa 09B0     		add	sp, sp, #36
 5408              	.LCFI165:
 5409              		.cfi_remember_state
 5410              		.cfi_def_cfa_offset 20
 5411              		@ sp needed
 5412 00fc F0BD     		pop	{r4, r5, r6, r7, pc}
 5413              	.LVL572:
 5414              	.L265:
 5415              	.LCFI166:
 5416              		.cfi_restore_state
 5417              	.LBB411:
 5418              	.LBB409:
 5419              	.LBB407:
 5420              	.LBB405:
1244:Src/bno055/bno055.c ****     }
 5421              		.loc 1 1244 16 view .LVU1468
 5422 00fe 3546     		mov	r5, r6
 5423 0100 E2E7     		b	.L250
 5424              	.LBE405:
 5425              	.LBE407:
 5426              	.LBE409:
 5427              	.LBE411:
 5428              		.cfi_endproc
 5429              	.LFE166:
 5431 0102 00BF     		.section	.text.bno055_init,"ax",%progbits
 5432              		.align	1
 5433              		.p2align 2,,3
 5434              		.global	bno055_init
 5435              		.syntax unified
 5436              		.thumb
 5437              		.thumb_func
 5438              		.fpu fpv4-sp-d16
 5440              	bno055_init:
 5441              	.LVL573:
 5442              	.LFB133:
  26:Src/bno055/bno055.c ****     u8 id = 0;
 5443              		.loc 1 26 38 is_stmt 1 view -0
 5444              		.cfi_startproc
 5445              		@ args = 0, pretend = 0, frame = 16
 5446              		@ frame_needed = 0, uses_anonymous_args = 0
  27:Src/bno055/bno055.c ****     error_bno err;
 5447              		.loc 1 27 5 view .LVU1470
  26:Src/bno055/bno055.c ****     u8 id = 0;
 5448              		.loc 1 26 38 is_stmt 0 view .LVU1471
 5449 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 5450              	.LCFI167:
 5451              		.cfi_def_cfa_offset 20
 5452              		.cfi_offset 4, -20
 5453              		.cfi_offset 5, -16
 5454              		.cfi_offset 6, -12
ARM GAS  /tmp/cc9CDFEk.s 			page 141


 5455              		.cfi_offset 7, -8
 5456              		.cfi_offset 14, -4
  30:Src/bno055/bno055.c ****     err = bno055_read_regs(*imu, BNO_CHIP_ID, &id, 1);
 5457              		.loc 1 30 28 view .LVU1472
 5458 0002 8379     		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 5459 0004 0568     		ldr	r5, [r0]
  26:Src/bno055/bno055.c ****     u8 id = 0;
 5460              		.loc 1 26 38 view .LVU1473
 5461 0006 89B0     		sub	sp, sp, #36
 5462              	.LCFI168:
 5463              		.cfi_def_cfa_offset 56
  30:Src/bno055/bno055.c ****     err = bno055_read_regs(*imu, BNO_CHIP_ID, &id, 1);
 5464              		.loc 1 30 28 view .LVU1474
 5465 0008 5B00     		lsls	r3, r3, #1
  27:Src/bno055/bno055.c ****     error_bno err;
 5466              		.loc 1 27 8 view .LVU1475
 5467 000a 0022     		movs	r2, #0
  30:Src/bno055/bno055.c ****     err = bno055_read_regs(*imu, BNO_CHIP_ID, &id, 1);
 5468              		.loc 1 30 28 view .LVU1476
 5469 000c DBB2     		uxtb	r3, r3
 5470              	.LBB434:
 5471              	.LBB435:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 5472              		.loc 1 1226 11 view .LVU1477
 5473 000e 4FF0FF36 		mov	r6, #-1
 5474 0012 99B2     		uxth	r1, r3
 5475              	.LBE435:
 5476              	.LBE434:
  30:Src/bno055/bno055.c ****     err = bno055_read_regs(*imu, BNO_CHIP_ID, &id, 1);
 5477              		.loc 1 30 15 view .LVU1478
 5478 0014 8371     		strb	r3, [r0, #6]
  27:Src/bno055/bno055.c ****     error_bno err;
 5479              		.loc 1 27 8 view .LVU1479
 5480 0016 8DF81E20 		strb	r2, [sp, #30]
  28:Src/bno055/bno055.c **** 
 5481              		.loc 1 28 5 is_stmt 1 view .LVU1480
  30:Src/bno055/bno055.c ****     err = bno055_read_regs(*imu, BNO_CHIP_ID, &id, 1);
 5482              		.loc 1 30 5 view .LVU1481
  31:Src/bno055/bno055.c ****     if (err != BNO_OK) {
 5483              		.loc 1 31 5 view .LVU1482
 5484              	.LVL574:
  31:Src/bno055/bno055.c ****     if (err != BNO_OK) {
 5485              		.loc 1 31 5 is_stmt 0 view .LVU1483
 5486 001a 8DF81F20 		strb	r2, [sp, #31]
 5487              	.LVL575:
 5488              	.LBB440:
 5489              	.LBI434:
1220:Src/bno055/bno055.c ****                            uint32_t buf_size) {
 5490              		.loc 1 1220 11 is_stmt 1 view .LVU1484
 5491              	.LBB436:
1222:Src/bno055/bno055.c ****     // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
 5492              		.loc 1 1222 5 view .LVU1485
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 5493              		.loc 1 1226 5 view .LVU1486
 5494              	.LBE436:
 5495              	.LBE440:
  26:Src/bno055/bno055.c ****     u8 id = 0;
ARM GAS  /tmp/cc9CDFEk.s 			page 142


 5496              		.loc 1 26 38 is_stmt 0 view .LVU1487
 5497 001e 0446     		mov	r4, r0
 5498              	.LBB441:
 5499              	.LBB437:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 5500              		.loc 1 1226 11 view .LVU1488
 5501 0020 0096     		str	r6, [sp]
 5502 0022 0123     		movs	r3, #1
 5503              	.LVL576:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 5504              		.loc 1 1226 11 view .LVU1489
 5505 0024 0DF11F02 		add	r2, sp, #31
 5506              	.LVL577:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 5507              		.loc 1 1226 11 view .LVU1490
 5508 0028 2846     		mov	r0, r5
 5509              	.LVL578:
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 5510              		.loc 1 1226 11 view .LVU1491
 5511 002a 0591     		str	r1, [sp, #20]
 5512 002c FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 5513              	.LVL579:
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 5514              		.loc 1 1227 5 is_stmt 1 view .LVU1492
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 5515              		.loc 1 1227 8 is_stmt 0 view .LVU1493
 5516 0030 0599     		ldr	r1, [sp, #20]
 5517 0032 18B1     		cbz	r0, .L267
 5518              	.LVL580:
 5519              	.L269:
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 5520              		.loc 1 1227 8 view .LVU1494
 5521              	.LBE437:
 5522              	.LBE441:
  32:Src/bno055/bno055.c ****         return err;
 5523              		.loc 1 32 5 is_stmt 1 view .LVU1495
 5524              	.LBB442:
 5525              	.LBB438:
1228:Src/bno055/bno055.c ****     }
 5526              		.loc 1 1228 16 is_stmt 0 view .LVU1496
 5527 0034 0125     		movs	r5, #1
 5528              	.LVL581:
 5529              	.L268:
1228:Src/bno055/bno055.c ****     }
 5530              		.loc 1 1228 16 view .LVU1497
 5531              	.LBE438:
 5532              	.LBE442:
  89:Src/bno055/bno055.c **** 
 5533              		.loc 1 89 1 view .LVU1498
 5534 0036 2846     		mov	r0, r5
 5535 0038 09B0     		add	sp, sp, #36
 5536              	.LCFI169:
 5537              		.cfi_remember_state
 5538              		.cfi_def_cfa_offset 20
 5539              		@ sp needed
 5540 003a F0BD     		pop	{r4, r5, r6, r7, pc}
 5541              	.LVL582:
ARM GAS  /tmp/cc9CDFEk.s 			page 143


 5542              	.L267:
 5543              	.LCFI170:
 5544              		.cfi_restore_state
 5545              	.LBB443:
 5546              	.LBB439:
1230:Src/bno055/bno055.c ****         HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 5547              		.loc 1 1230 5 is_stmt 1 view .LVU1499
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 5548              		.loc 1 1231 9 is_stmt 0 view .LVU1500
 5549 003c 0096     		str	r6, [sp]
 5550 003e 2846     		mov	r0, r5
 5551              	.LVL583:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 5552              		.loc 1 1231 9 view .LVU1501
 5553 0040 0123     		movs	r3, #1
 5554 0042 0DF11E02 		add	r2, sp, #30
 5555              	.LVL584:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 5556              		.loc 1 1231 9 view .LVU1502
 5557 0046 FFF7FEFF 		bl	HAL_I2C_Master_Receive
 5558              	.LVL585:
1232:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 5559              		.loc 1 1232 5 is_stmt 1 view .LVU1503
1232:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 5560              		.loc 1 1232 8 is_stmt 0 view .LVU1504
 5561 004a 0028     		cmp	r0, #0
 5562 004c F2D1     		bne	.L269
 5563              	.LVL586:
1232:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 5564              		.loc 1 1232 8 view .LVU1505
 5565              	.LBE439:
 5566              	.LBE443:
  32:Src/bno055/bno055.c ****         return err;
 5567              		.loc 1 32 5 is_stmt 1 view .LVU1506
  35:Src/bno055/bno055.c ****         return BNO_ERR_WRONG_CHIP_ID;
 5568              		.loc 1 35 5 view .LVU1507
  35:Src/bno055/bno055.c ****         return BNO_ERR_WRONG_CHIP_ID;
 5569              		.loc 1 35 8 is_stmt 0 view .LVU1508
 5570 004e 9DF81E30 		ldrb	r3, [sp, #30]	@ zero_extendqisi2
 5571 0052 A02B     		cmp	r3, #160
 5572 0054 40F0A280 		bne	.L275
  38:Src/bno055/bno055.c ****         return err;
 5573              		.loc 1 38 5 is_stmt 1 view .LVU1509
 5574              	.LVL587:
 5575              	.LBB444:
 5576              	.LBB445:
 5577              	.LBB446:
 5578              	.LBB447:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5579              		.loc 1 1241 11 is_stmt 0 view .LVU1510
 5580 0058 0127     		movs	r7, #1
 5581 005a CDE90176 		strd	r7, r6, [sp, #4]
 5582 005e 0DF11F03 		add	r3, sp, #31
 5583 0062 0093     		str	r3, [sp]
 5584 0064 8DF81F00 		strb	r0, [sp, #31]
 5585              	.LVL588:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
ARM GAS  /tmp/cc9CDFEk.s 			page 144


 5586              		.loc 1 1241 11 view .LVU1511
 5587              	.LBE447:
 5588              	.LBE446:
 5589              	.LBE445:
 5590              	.LBI444:
1137:Src/bno055/bno055.c ****     error_bno err;
 5591              		.loc 1 1137 11 is_stmt 1 view .LVU1512
 5592              	.LBB450:
1138:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 5593              		.loc 1 1138 5 view .LVU1513
1144:Src/bno055/bno055.c ****         BNO_OK) {
 5594              		.loc 1 1144 5 view .LVU1514
 5595              	.LBB449:
 5596              	.LBI446:
1238:Src/bno055/bno055.c ****                             uint32_t buf_size) {
 5597              		.loc 1 1238 11 view .LVU1515
 5598              	.LBB448:
1240:Src/bno055/bno055.c ****     err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
 5599              		.loc 1 1240 5 view .LVU1516
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5600              		.loc 1 1241 5 view .LVU1517
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5601              		.loc 1 1241 11 is_stmt 0 view .LVU1518
 5602 0068 A179     		ldrb	r1, [r4, #6]	@ zero_extendqisi2
 5603 006a 2068     		ldr	r0, [r4]
 5604              	.LVL589:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5605              		.loc 1 1241 11 view .LVU1519
 5606 006c 3B46     		mov	r3, r7
 5607              	.LVL590:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5608              		.loc 1 1241 11 view .LVU1520
 5609 006e 3D22     		movs	r2, #61
 5610 0070 FFF7FEFF 		bl	HAL_I2C_Mem_Write
 5611              	.LVL591:
1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 5612              		.loc 1 1243 5 is_stmt 1 view .LVU1521
1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 5613              		.loc 1 1243 8 is_stmt 0 view .LVU1522
 5614 0074 0546     		mov	r5, r0
 5615 0076 0028     		cmp	r0, #0
 5616 0078 DCD1     		bne	.L269
 5617              	.LVL592:
1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 5618              		.loc 1 1243 8 view .LVU1523
 5619              	.LBE448:
 5620              	.LBE449:
1148:Src/bno055/bno055.c ****     return BNO_OK;
 5621              		.loc 1 1148 5 is_stmt 1 view .LVU1524
 5622 007a 1820     		movs	r0, #24
 5623 007c FFF7FEFF 		bl	HAL_Delay
 5624              	.LVL593:
1149:Src/bno055/bno055.c **** }
 5625              		.loc 1 1149 5 view .LVU1525
1149:Src/bno055/bno055.c **** }
 5626              		.loc 1 1149 5 is_stmt 0 view .LVU1526
 5627              	.LBE450:
ARM GAS  /tmp/cc9CDFEk.s 			page 145


 5628              	.LBE444:
  41:Src/bno055/bno055.c ****     bno055_reset(imu);
 5629              		.loc 1 41 5 is_stmt 1 view .LVU1527
 5630 0080 0220     		movs	r0, #2
 5631 0082 FFF7FEFF 		bl	HAL_Delay
 5632              	.LVL594:
  42:Src/bno055/bno055.c ****     HAL_Delay(5000);
 5633              		.loc 1 42 5 view .LVU1528
 5634              	.LBB451:
 5635              	.LBI451:
1204:Src/bno055/bno055.c ****     u8 data = 0x20U;
 5636              		.loc 1 1204 11 view .LVU1529
 5637              	.LBB452:
1205:Src/bno055/bno055.c ****     if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 5638              		.loc 1 1205 5 view .LVU1530
 5639              	.LBB453:
 5640              	.LBB454:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5641              		.loc 1 1241 11 is_stmt 0 view .LVU1531
 5642 0086 CDE90176 		strd	r7, r6, [sp, #4]
 5643 008a 0DF11F03 		add	r3, sp, #31
 5644 008e 0093     		str	r3, [sp]
 5645              	.LBE454:
 5646              	.LBE453:
1205:Src/bno055/bno055.c ****     if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 5647              		.loc 1 1205 8 view .LVU1532
 5648 0090 4FF0200C 		mov	ip, #32
 5649              	.LBB457:
 5650              	.LBB455:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5651              		.loc 1 1241 11 view .LVU1533
 5652 0094 A179     		ldrb	r1, [r4, #6]	@ zero_extendqisi2
 5653 0096 2068     		ldr	r0, [r4]
 5654              	.LBE455:
 5655              	.LBE457:
1205:Src/bno055/bno055.c ****     if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 5656              		.loc 1 1205 8 view .LVU1534
 5657 0098 8DF81FC0 		strb	ip, [sp, #31]
1206:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 5658              		.loc 1 1206 5 is_stmt 1 view .LVU1535
 5659              	.LVL595:
 5660              	.LBB458:
 5661              	.LBI453:
1238:Src/bno055/bno055.c ****                             uint32_t buf_size) {
 5662              		.loc 1 1238 11 view .LVU1536
 5663              	.LBB456:
1240:Src/bno055/bno055.c ****     err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
 5664              		.loc 1 1240 5 view .LVU1537
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5665              		.loc 1 1241 5 view .LVU1538
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5666              		.loc 1 1241 11 is_stmt 0 view .LVU1539
 5667 009c 3B46     		mov	r3, r7
 5668              	.LVL596:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5669              		.loc 1 1241 11 view .LVU1540
 5670 009e 3F22     		movs	r2, #63
ARM GAS  /tmp/cc9CDFEk.s 			page 146


 5671 00a0 FFF7FEFF 		bl	HAL_I2C_Mem_Write
 5672              	.LVL597:
1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 5673              		.loc 1 1243 5 is_stmt 1 view .LVU1541
1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 5674              		.loc 1 1243 5 is_stmt 0 view .LVU1542
 5675              	.LBE456:
 5676              	.LBE458:
 5677              	.LBE452:
 5678              	.LBE451:
  43:Src/bno055/bno055.c ****     if ((err = bno055_set_pwr_mode(imu, BNO_PWR_NORMAL)) != BNO_OK) {
 5679              		.loc 1 43 5 is_stmt 1 view .LVU1543
 5680 00a4 41F28830 		movw	r0, #5000
 5681 00a8 FFF7FEFF 		bl	HAL_Delay
 5682              	.LVL598:
  44:Src/bno055/bno055.c ****         return err;
 5683              		.loc 1 44 5 view .LVU1544
  44:Src/bno055/bno055.c ****         return err;
 5684              		.loc 1 44 16 is_stmt 0 view .LVU1545
 5685 00ac 2946     		mov	r1, r5
 5686 00ae 2046     		mov	r0, r4
 5687 00b0 FFF7FEFF 		bl	bno055_set_pwr_mode
 5688              	.LVL599:
  44:Src/bno055/bno055.c ****         return err;
 5689              		.loc 1 44 8 view .LVU1546
 5690 00b4 0546     		mov	r5, r0
 5691 00b6 0028     		cmp	r0, #0
 5692 00b8 BDD1     		bne	.L268
  47:Src/bno055/bno055.c ****     if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 5693              		.loc 1 47 5 is_stmt 1 view .LVU1547
 5694 00ba 0A20     		movs	r0, #10
 5695              	.LVL600:
  47:Src/bno055/bno055.c ****     if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 5696              		.loc 1 47 5 is_stmt 0 view .LVU1548
 5697 00bc FFF7FEFF 		bl	HAL_Delay
 5698              	.LVL601:
  48:Src/bno055/bno055.c ****         return err;
 5699              		.loc 1 48 5 is_stmt 1 view .LVU1549
 5700              	.LBB459:
 5701              	.LBB460:
1250:Src/bno055/bno055.c ****         return BNO_OK;
 5702              		.loc 1 1250 8 is_stmt 0 view .LVU1550
 5703 00c0 637B     		ldrb	r3, [r4, #13]	@ zero_extendqisi2
 5704 00c2 8DF81F50 		strb	r5, [sp, #31]
 5705              	.LVL602:
1250:Src/bno055/bno055.c ****         return BNO_OK;
 5706              		.loc 1 1250 8 view .LVU1551
 5707              	.LBE460:
 5708              	.LBI459:
1249:Src/bno055/bno055.c ****     if (imu->_page != page) {
 5709              		.loc 1 1249 11 is_stmt 1 view .LVU1552
 5710              	.LBB463:
1250:Src/bno055/bno055.c ****         return BNO_OK;
 5711              		.loc 1 1250 5 view .LVU1553
1250:Src/bno055/bno055.c ****         return BNO_OK;
 5712              		.loc 1 1250 8 is_stmt 0 view .LVU1554
 5713 00c6 002B     		cmp	r3, #0
ARM GAS  /tmp/cc9CDFEk.s 			page 147


 5714 00c8 6CD0     		beq	.L277
 5715              	.LVL603:
 5716              	.L273:
1250:Src/bno055/bno055.c ****         return BNO_OK;
 5717              		.loc 1 1250 8 view .LVU1555
 5718              	.LBE463:
 5719              	.LBE459:
  51:Src/bno055/bno055.c ****     bno055_on(imu);
 5720              		.loc 1 51 5 is_stmt 1 view .LVU1556
 5721              	.LBB465:
 5722              	.LBB466:
 5723              	.LBB467:
 5724              	.LBB468:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5725              		.loc 1 1241 11 is_stmt 0 view .LVU1557
 5726 00ca 0126     		movs	r6, #1
 5727 00cc 4FF0FF35 		mov	r5, #-1
 5728              	.LBE468:
 5729              	.LBE467:
 5730              	.LBE466:
 5731              	.LBE465:
  51:Src/bno055/bno055.c ****     bno055_on(imu);
 5732              		.loc 1 51 5 view .LVU1558
 5733 00d0 0C20     		movs	r0, #12
 5734 00d2 FFF7FEFF 		bl	HAL_Delay
 5735              	.LVL604:
  52:Src/bno055/bno055.c ****     if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 5736              		.loc 1 52 5 is_stmt 1 view .LVU1559
 5737              	.LBB476:
 5738              	.LBI465:
1212:Src/bno055/bno055.c ****     u8 data = 0x00U;
 5739              		.loc 1 1212 11 view .LVU1560
 5740              	.LBB475:
1213:Src/bno055/bno055.c ****     if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 5741              		.loc 1 1213 5 view .LVU1561
 5742              	.LBB472:
 5743              	.LBB469:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5744              		.loc 1 1241 11 is_stmt 0 view .LVU1562
 5745 00d6 CDE90165 		strd	r6, r5, [sp, #4]
 5746 00da 0DF11F02 		add	r2, sp, #31
 5747 00de 0092     		str	r2, [sp]
 5748              	.LBE469:
 5749              	.LBE472:
1213:Src/bno055/bno055.c ****     if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 5750              		.loc 1 1213 8 view .LVU1563
 5751 00e0 0023     		movs	r3, #0
 5752              	.LBB473:
 5753              	.LBB470:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5754              		.loc 1 1241 11 view .LVU1564
 5755 00e2 A179     		ldrb	r1, [r4, #6]	@ zero_extendqisi2
 5756              	.LBE470:
 5757              	.LBE473:
1213:Src/bno055/bno055.c ****     if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 5758              		.loc 1 1213 8 view .LVU1565
 5759 00e4 8DF81F30 		strb	r3, [sp, #31]
ARM GAS  /tmp/cc9CDFEk.s 			page 148


1214:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 5760              		.loc 1 1214 5 is_stmt 1 view .LVU1566
 5761              	.LVL605:
 5762              	.LBB474:
 5763              	.LBI467:
1238:Src/bno055/bno055.c ****                             uint32_t buf_size) {
 5764              		.loc 1 1238 11 view .LVU1567
 5765              	.LBB471:
1240:Src/bno055/bno055.c ****     err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
 5766              		.loc 1 1240 5 view .LVU1568
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5767              		.loc 1 1241 5 view .LVU1569
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5768              		.loc 1 1241 11 is_stmt 0 view .LVU1570
 5769 00e8 3F22     		movs	r2, #63
 5770              	.LVL606:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5771              		.loc 1 1241 11 view .LVU1571
 5772 00ea 3346     		mov	r3, r6
 5773 00ec 2068     		ldr	r0, [r4]
 5774 00ee FFF7FEFF 		bl	HAL_I2C_Mem_Write
 5775              	.LVL607:
1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 5776              		.loc 1 1243 5 is_stmt 1 view .LVU1572
1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 5777              		.loc 1 1243 5 is_stmt 0 view .LVU1573
 5778              	.LBE471:
 5779              	.LBE474:
 5780              	.LBE475:
 5781              	.LBE476:
  53:Src/bno055/bno055.c ****         return err;
 5782              		.loc 1 53 5 is_stmt 1 view .LVU1574
  53:Src/bno055/bno055.c ****         return err;
 5783              		.loc 1 53 5 is_stmt 0 view .LVU1575
 5784 00f2 2179     		ldrb	r1, [r4, #4]	@ zero_extendqisi2
 5785 00f4 8DF81F10 		strb	r1, [sp, #31]
 5786              	.LVL608:
 5787              	.LBB477:
 5788              	.LBI477:
1137:Src/bno055/bno055.c ****     error_bno err;
 5789              		.loc 1 1137 11 is_stmt 1 view .LVU1576
 5790              	.LBB478:
1138:Src/bno055/bno055.c **** #ifdef BNO_AUTO_PAGE_SET
 5791              		.loc 1 1138 5 view .LVU1577
1144:Src/bno055/bno055.c ****         BNO_OK) {
 5792              		.loc 1 1144 5 view .LVU1578
 5793              	.LBB479:
 5794              	.LBI479:
1238:Src/bno055/bno055.c ****                             uint32_t buf_size) {
 5795              		.loc 1 1238 11 view .LVU1579
 5796              	.LBB480:
1240:Src/bno055/bno055.c ****     err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
 5797              		.loc 1 1240 5 view .LVU1580
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5798              		.loc 1 1241 5 view .LVU1581
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5799              		.loc 1 1241 11 is_stmt 0 view .LVU1582
ARM GAS  /tmp/cc9CDFEk.s 			page 149


 5800 00f8 CDE90165 		strd	r6, r5, [sp, #4]
 5801              	.LVL609:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5802              		.loc 1 1241 11 view .LVU1583
 5803 00fc 0DF11F03 		add	r3, sp, #31
 5804              	.LVL610:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5805              		.loc 1 1241 11 view .LVU1584
 5806 0100 0093     		str	r3, [sp]
 5807 0102 A179     		ldrb	r1, [r4, #6]	@ zero_extendqisi2
 5808              	.LVL611:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5809              		.loc 1 1241 11 view .LVU1585
 5810 0104 2068     		ldr	r0, [r4]
 5811 0106 3346     		mov	r3, r6
 5812              	.LVL612:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5813              		.loc 1 1241 11 view .LVU1586
 5814 0108 3D22     		movs	r2, #61
 5815 010a FFF7FEFF 		bl	HAL_I2C_Mem_Write
 5816              	.LVL613:
1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 5817              		.loc 1 1243 5 is_stmt 1 view .LVU1587
1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 5818              		.loc 1 1243 8 is_stmt 0 view .LVU1588
 5819 010e 0546     		mov	r5, r0
 5820 0110 0028     		cmp	r0, #0
 5821 0112 8FD1     		bne	.L269
 5822              	.LVL614:
1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 5823              		.loc 1 1243 8 view .LVU1589
 5824              	.LBE480:
 5825              	.LBE479:
1148:Src/bno055/bno055.c ****     return BNO_OK;
 5826              		.loc 1 1148 5 is_stmt 1 view .LVU1590
 5827 0114 1820     		movs	r0, #24
 5828 0116 FFF7FEFF 		bl	HAL_Delay
 5829              	.LVL615:
1149:Src/bno055/bno055.c **** }
 5830              		.loc 1 1149 5 view .LVU1591
1149:Src/bno055/bno055.c **** }
 5831              		.loc 1 1149 5 is_stmt 0 view .LVU1592
 5832              	.LBE478:
 5833              	.LBE477:
  56:Src/bno055/bno055.c **** 
 5834              		.loc 1 56 5 is_stmt 1 view .LVU1593
 5835 011a 1820     		movs	r0, #24
 5836 011c FFF7FEFF 		bl	HAL_Delay
 5837              	.LVL616:
  58:Src/bno055/bno055.c ****     imu->acc_x = &bno055_acc_x;
 5838              		.loc 1 58 5 view .LVU1594
  58:Src/bno055/bno055.c ****     imu->acc_x = &bno055_acc_x;
 5839              		.loc 1 58 22 is_stmt 0 view .LVU1595
 5840 0120 2B4A     		ldr	r2, .L278
  59:Src/bno055/bno055.c ****     imu->acc_y = &bno055_acc_y;
 5841              		.loc 1 59 16 view .LVU1596
 5842 0122 2C4B     		ldr	r3, .L278+4
ARM GAS  /tmp/cc9CDFEk.s 			page 150


  60:Src/bno055/bno055.c ****     imu->acc_z = &bno055_acc_z;
 5843              		.loc 1 60 16 view .LVU1597
 5844 0124 2C49     		ldr	r1, .L278+8
  59:Src/bno055/bno055.c ****     imu->acc_y = &bno055_acc_y;
 5845              		.loc 1 59 16 view .LVU1598
 5846 0126 C4E90923 		strd	r2, r3, [r4, #36]
  60:Src/bno055/bno055.c ****     imu->acc_z = &bno055_acc_z;
 5847              		.loc 1 60 5 is_stmt 1 view .LVU1599
  61:Src/bno055/bno055.c ****     imu->acc = &bno055_acc;
 5848              		.loc 1 61 16 is_stmt 0 view .LVU1600
 5849 012a 2C4B     		ldr	r3, .L278+12
  62:Src/bno055/bno055.c ****     imu->linear_acc_x = &bno055_linear_acc_x;
 5850              		.loc 1 62 14 view .LVU1601
 5851 012c 2C4A     		ldr	r2, .L278+16
  61:Src/bno055/bno055.c ****     imu->acc = &bno055_acc;
 5852              		.loc 1 61 16 view .LVU1602
 5853 012e C4E90B13 		strd	r1, r3, [r4, #44]
  62:Src/bno055/bno055.c ****     imu->linear_acc_x = &bno055_linear_acc_x;
 5854              		.loc 1 62 5 is_stmt 1 view .LVU1603
  63:Src/bno055/bno055.c ****     imu->linear_acc_y = &bno055_linear_acc_y;
 5855              		.loc 1 63 23 is_stmt 0 view .LVU1604
 5856 0132 2C4B     		ldr	r3, .L278+20
  64:Src/bno055/bno055.c ****     imu->linear_acc_z = &bno055_linear_acc_z;
 5857              		.loc 1 64 23 view .LVU1605
 5858 0134 2C49     		ldr	r1, .L278+24
  63:Src/bno055/bno055.c ****     imu->linear_acc_y = &bno055_linear_acc_y;
 5859              		.loc 1 63 23 view .LVU1606
 5860 0136 C4E90D23 		strd	r2, r3, [r4, #52]
  64:Src/bno055/bno055.c ****     imu->linear_acc_z = &bno055_linear_acc_z;
 5861              		.loc 1 64 5 is_stmt 1 view .LVU1607
  65:Src/bno055/bno055.c ****     imu->linear_acc = &bno055_linear_acc;
 5862              		.loc 1 65 23 is_stmt 0 view .LVU1608
 5863 013a 2C4B     		ldr	r3, .L278+28
  66:Src/bno055/bno055.c ****     imu->gyro_x = &bno055_gyro_x;
 5864              		.loc 1 66 21 view .LVU1609
 5865 013c 2C4A     		ldr	r2, .L278+32
  65:Src/bno055/bno055.c ****     imu->linear_acc = &bno055_linear_acc;
 5866              		.loc 1 65 23 view .LVU1610
 5867 013e C4E90F13 		strd	r1, r3, [r4, #60]
  66:Src/bno055/bno055.c ****     imu->gyro_x = &bno055_gyro_x;
 5868              		.loc 1 66 5 is_stmt 1 view .LVU1611
  67:Src/bno055/bno055.c ****     imu->gyro_y = &bno055_gyro_y;
 5869              		.loc 1 67 17 is_stmt 0 view .LVU1612
 5870 0142 2C4B     		ldr	r3, .L278+36
  68:Src/bno055/bno055.c ****     imu->gyro_z = &bno055_gyro_z;
 5871              		.loc 1 68 17 view .LVU1613
 5872 0144 2C49     		ldr	r1, .L278+40
  67:Src/bno055/bno055.c ****     imu->gyro_y = &bno055_gyro_y;
 5873              		.loc 1 67 17 view .LVU1614
 5874 0146 C4E91123 		strd	r2, r3, [r4, #68]
  68:Src/bno055/bno055.c ****     imu->gyro_z = &bno055_gyro_z;
 5875              		.loc 1 68 5 is_stmt 1 view .LVU1615
  69:Src/bno055/bno055.c ****     imu->gyro = &bno055_gyro;
 5876              		.loc 1 69 17 is_stmt 0 view .LVU1616
 5877 014a 2C4B     		ldr	r3, .L278+44
  70:Src/bno055/bno055.c ****     imu->mag_x = &bno055_mag_x;
 5878              		.loc 1 70 15 view .LVU1617
ARM GAS  /tmp/cc9CDFEk.s 			page 151


 5879 014c 2C4A     		ldr	r2, .L278+48
  69:Src/bno055/bno055.c ****     imu->gyro = &bno055_gyro;
 5880              		.loc 1 69 17 view .LVU1618
 5881 014e C4E91313 		strd	r1, r3, [r4, #76]
  70:Src/bno055/bno055.c ****     imu->mag_x = &bno055_mag_x;
 5882              		.loc 1 70 5 is_stmt 1 view .LVU1619
  71:Src/bno055/bno055.c ****     imu->mag_y = &bno055_mag_y;
 5883              		.loc 1 71 16 is_stmt 0 view .LVU1620
 5884 0152 2C4B     		ldr	r3, .L278+52
  72:Src/bno055/bno055.c ****     imu->mag_z = &bno055_mag_z;
 5885              		.loc 1 72 16 view .LVU1621
 5886 0154 2C49     		ldr	r1, .L278+56
  71:Src/bno055/bno055.c ****     imu->mag_y = &bno055_mag_y;
 5887              		.loc 1 71 16 view .LVU1622
 5888 0156 C4E91523 		strd	r2, r3, [r4, #84]
  72:Src/bno055/bno055.c ****     imu->mag_z = &bno055_mag_z;
 5889              		.loc 1 72 5 is_stmt 1 view .LVU1623
  73:Src/bno055/bno055.c ****     imu->mag = &bno055_mag;
 5890              		.loc 1 73 16 is_stmt 0 view .LVU1624
 5891 015a 2C4B     		ldr	r3, .L278+60
  74:Src/bno055/bno055.c ****     imu->gravity_x = &bno055_gravity_x;
 5892              		.loc 1 74 14 view .LVU1625
 5893 015c 2C4A     		ldr	r2, .L278+64
  73:Src/bno055/bno055.c ****     imu->mag = &bno055_mag;
 5894              		.loc 1 73 16 view .LVU1626
 5895 015e C4E91713 		strd	r1, r3, [r4, #92]
  74:Src/bno055/bno055.c ****     imu->gravity_x = &bno055_gravity_x;
 5896              		.loc 1 74 5 is_stmt 1 view .LVU1627
  75:Src/bno055/bno055.c ****     imu->gravity_y = &bno055_gravity_y;
 5897              		.loc 1 75 20 is_stmt 0 view .LVU1628
 5898 0162 2C4B     		ldr	r3, .L278+68
  76:Src/bno055/bno055.c ****     imu->gravity_z = &bno055_gravity_z;
 5899              		.loc 1 76 20 view .LVU1629
 5900 0164 2C49     		ldr	r1, .L278+72
  75:Src/bno055/bno055.c ****     imu->gravity_y = &bno055_gravity_y;
 5901              		.loc 1 75 20 view .LVU1630
 5902 0166 C4E91923 		strd	r2, r3, [r4, #100]
  76:Src/bno055/bno055.c ****     imu->gravity_z = &bno055_gravity_z;
 5903              		.loc 1 76 5 is_stmt 1 view .LVU1631
  77:Src/bno055/bno055.c ****     imu->gravity = &bno055_gravity;
 5904              		.loc 1 77 20 is_stmt 0 view .LVU1632
 5905 016a 2C4B     		ldr	r3, .L278+76
  78:Src/bno055/bno055.c ****     imu->euler_yaw = &bno055_euler_yaw;
 5906              		.loc 1 78 18 view .LVU1633
 5907 016c 2C4A     		ldr	r2, .L278+80
 5908 016e 6267     		str	r2, [r4, #116]
  77:Src/bno055/bno055.c ****     imu->gravity = &bno055_gravity;
 5909              		.loc 1 77 20 view .LVU1634
 5910 0170 C4E91B13 		strd	r1, r3, [r4, #108]
  78:Src/bno055/bno055.c ****     imu->euler_yaw = &bno055_euler_yaw;
 5911              		.loc 1 78 5 is_stmt 1 view .LVU1635
  79:Src/bno055/bno055.c ****     imu->euler_roll = &bno055_euler_roll;
 5912              		.loc 1 79 5 view .LVU1636
  79:Src/bno055/bno055.c ****     imu->euler_roll = &bno055_euler_roll;
 5913              		.loc 1 79 20 is_stmt 0 view .LVU1637
 5914 0174 2B4B     		ldr	r3, .L278+84
  80:Src/bno055/bno055.c ****     imu->euler_pitch = &bno055_euler_pitch;
ARM GAS  /tmp/cc9CDFEk.s 			page 152


 5915              		.loc 1 80 21 view .LVU1638
 5916 0176 2C49     		ldr	r1, .L278+88
  79:Src/bno055/bno055.c ****     imu->euler_roll = &bno055_euler_roll;
 5917              		.loc 1 79 20 view .LVU1639
 5918 0178 C4F88030 		str	r3, [r4, #128]
  80:Src/bno055/bno055.c ****     imu->euler_pitch = &bno055_euler_pitch;
 5919              		.loc 1 80 5 is_stmt 1 view .LVU1640
  81:Src/bno055/bno055.c ****     imu->euler = &bno055_euler;
 5920              		.loc 1 81 22 is_stmt 0 view .LVU1641
 5921 017c 2B4B     		ldr	r3, .L278+92
  82:Src/bno055/bno055.c ****     imu->quaternion_w = &bno055_quaternion_w;
 5922              		.loc 1 82 16 view .LVU1642
 5923 017e 2C4A     		ldr	r2, .L278+96
  81:Src/bno055/bno055.c ****     imu->euler = &bno055_euler;
 5924              		.loc 1 81 22 view .LVU1643
 5925 0180 C4E91E13 		strd	r1, r3, [r4, #120]
  82:Src/bno055/bno055.c ****     imu->quaternion_w = &bno055_quaternion_w;
 5926              		.loc 1 82 5 is_stmt 1 view .LVU1644
  83:Src/bno055/bno055.c ****     imu->quaternion_x = &bno055_quaternion_x;
 5927              		.loc 1 83 23 is_stmt 0 view .LVU1645
 5928 0184 2B4B     		ldr	r3, .L278+100
  84:Src/bno055/bno055.c ****     imu->quaternion_y = &bno055_quaternion_y;
 5929              		.loc 1 84 23 view .LVU1646
 5930 0186 2C49     		ldr	r1, .L278+104
  83:Src/bno055/bno055.c ****     imu->quaternion_x = &bno055_quaternion_x;
 5931              		.loc 1 83 23 view .LVU1647
 5932 0188 C4E92123 		strd	r2, r3, [r4, #132]
  84:Src/bno055/bno055.c ****     imu->quaternion_y = &bno055_quaternion_y;
 5933              		.loc 1 84 5 is_stmt 1 view .LVU1648
  85:Src/bno055/bno055.c ****     imu->quaternion_z = &bno055_quaternion_z;
 5934              		.loc 1 85 23 is_stmt 0 view .LVU1649
 5935 018c 2B4B     		ldr	r3, .L278+108
  86:Src/bno055/bno055.c ****     imu->quaternion = &bno055_quaternion;
 5936              		.loc 1 86 23 view .LVU1650
 5937 018e 2C4A     		ldr	r2, .L278+112
  85:Src/bno055/bno055.c ****     imu->quaternion_z = &bno055_quaternion_z;
 5938              		.loc 1 85 23 view .LVU1651
 5939 0190 C4E92313 		strd	r1, r3, [r4, #140]
  86:Src/bno055/bno055.c ****     imu->quaternion = &bno055_quaternion;
 5940              		.loc 1 86 5 is_stmt 1 view .LVU1652
  87:Src/bno055/bno055.c ****     return BNO_OK;
 5941              		.loc 1 87 21 is_stmt 0 view .LVU1653
 5942 0194 2B4B     		ldr	r3, .L278+116
 5943 0196 C4E92523 		strd	r2, r3, [r4, #148]
  88:Src/bno055/bno055.c **** }
 5944              		.loc 1 88 5 is_stmt 1 view .LVU1654
  88:Src/bno055/bno055.c **** }
 5945              		.loc 1 88 12 is_stmt 0 view .LVU1655
 5946 019a 4CE7     		b	.L268
 5947              	.L275:
  36:Src/bno055/bno055.c ****     }
 5948              		.loc 1 36 16 view .LVU1656
 5949 019c 0625     		movs	r5, #6
  89:Src/bno055/bno055.c **** 
 5950              		.loc 1 89 1 view .LVU1657
 5951 019e 2846     		mov	r0, r5
 5952 01a0 09B0     		add	sp, sp, #36
ARM GAS  /tmp/cc9CDFEk.s 			page 153


 5953              	.LCFI171:
 5954              		.cfi_remember_state
 5955              		.cfi_def_cfa_offset 20
 5956              		@ sp needed
 5957 01a2 F0BD     		pop	{r4, r5, r6, r7, pc}
 5958              	.LVL617:
 5959              	.L277:
 5960              	.LCFI172:
 5961              		.cfi_restore_state
 5962              	.LBB481:
 5963              	.LBB464:
1253:Src/bno055/bno055.c ****         return BNO_ERR_PAGE_TOO_HIGH;
 5964              		.loc 1 1253 5 is_stmt 1 view .LVU1658
1256:Src/bno055/bno055.c ****     err = bno055_write_regs(*imu, BNO_PAGE_ID, (u8*)&page, 1);
 5965              		.loc 1 1256 5 view .LVU1659
1257:Src/bno055/bno055.c ****     if (err != BNO_OK) {
 5966              		.loc 1 1257 5 view .LVU1660
 5967              	.LBB461:
 5968              	.LBI461:
1238:Src/bno055/bno055.c ****                             uint32_t buf_size) {
 5969              		.loc 1 1238 11 view .LVU1661
 5970              	.LBB462:
1240:Src/bno055/bno055.c ****     err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
 5971              		.loc 1 1240 5 view .LVU1662
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5972              		.loc 1 1241 5 view .LVU1663
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5973              		.loc 1 1241 11 is_stmt 0 view .LVU1664
 5974 01a4 CDE90176 		strd	r7, r6, [sp, #4]
 5975              	.LVL618:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5976              		.loc 1 1241 11 view .LVU1665
 5977 01a8 0DF11F03 		add	r3, sp, #31
 5978              	.LVL619:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5979              		.loc 1 1241 11 view .LVU1666
 5980 01ac 0093     		str	r3, [sp]
 5981 01ae A179     		ldrb	r1, [r4, #6]	@ zero_extendqisi2
 5982 01b0 2068     		ldr	r0, [r4]
 5983 01b2 3B46     		mov	r3, r7
 5984              	.LVL620:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 5985              		.loc 1 1241 11 view .LVU1667
 5986 01b4 0722     		movs	r2, #7
 5987 01b6 FFF7FEFF 		bl	HAL_I2C_Mem_Write
 5988              	.LVL621:
1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 5989              		.loc 1 1243 5 is_stmt 1 view .LVU1668
1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 5990              		.loc 1 1243 8 is_stmt 0 view .LVU1669
 5991 01ba 0028     		cmp	r0, #0
 5992 01bc 7FF43AAF 		bne	.L269
 5993              	.LVL622:
1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 5994              		.loc 1 1243 8 view .LVU1670
 5995              	.LBE462:
 5996              	.LBE461:
ARM GAS  /tmp/cc9CDFEk.s 			page 154


1258:Src/bno055/bno055.c ****         return err;
 5997              		.loc 1 1258 5 is_stmt 1 view .LVU1671
1261:Src/bno055/bno055.c ****     HAL_Delay(2);
 5998              		.loc 1 1261 5 view .LVU1672
1261:Src/bno055/bno055.c ****     HAL_Delay(2);
 5999              		.loc 1 1261 16 is_stmt 0 view .LVU1673
 6000 01c0 9DF81F30 		ldrb	r3, [sp, #31]	@ zero_extendqisi2
 6001 01c4 6373     		strb	r3, [r4, #13]
1262:Src/bno055/bno055.c ****     return BNO_OK;
 6002              		.loc 1 1262 5 is_stmt 1 view .LVU1674
 6003 01c6 0220     		movs	r0, #2
 6004 01c8 FFF7FEFF 		bl	HAL_Delay
 6005              	.LVL623:
 6006              		.loc 1 1263 5 view .LVU1675
 6007              		.loc 1 1263 5 is_stmt 0 view .LVU1676
 6008 01cc 7DE7     		b	.L273
 6009              	.L279:
 6010 01ce 00BF     		.align	2
 6011              	.L278:
 6012 01d0 00000000 		.word	bno055_temperature
 6013 01d4 00000000 		.word	bno055_acc_x
 6014 01d8 00000000 		.word	bno055_acc_y
 6015 01dc 00000000 		.word	bno055_acc_z
 6016 01e0 00000000 		.word	bno055_acc
 6017 01e4 00000000 		.word	bno055_linear_acc_x
 6018 01e8 00000000 		.word	bno055_linear_acc_y
 6019 01ec 00000000 		.word	bno055_linear_acc_z
 6020 01f0 00000000 		.word	bno055_linear_acc
 6021 01f4 00000000 		.word	bno055_gyro_x
 6022 01f8 00000000 		.word	bno055_gyro_y
 6023 01fc 00000000 		.word	bno055_gyro_z
 6024 0200 00000000 		.word	bno055_gyro
 6025 0204 00000000 		.word	bno055_mag_x
 6026 0208 00000000 		.word	bno055_mag_y
 6027 020c 00000000 		.word	bno055_mag_z
 6028 0210 00000000 		.word	bno055_mag
 6029 0214 00000000 		.word	bno055_gravity_x
 6030 0218 00000000 		.word	bno055_gravity_y
 6031 021c 00000000 		.word	bno055_gravity_z
 6032 0220 00000000 		.word	bno055_gravity
 6033 0224 00000000 		.word	bno055_euler_yaw
 6034 0228 00000000 		.word	bno055_euler_roll
 6035 022c 00000000 		.word	bno055_euler_pitch
 6036 0230 00000000 		.word	bno055_euler
 6037 0234 00000000 		.word	bno055_quaternion_w
 6038 0238 00000000 		.word	bno055_quaternion_x
 6039 023c 00000000 		.word	bno055_quaternion_y
 6040 0240 00000000 		.word	bno055_quaternion_z
 6041 0244 00000000 		.word	bno055_quaternion
 6042              	.LBE464:
 6043              	.LBE481:
 6044              		.cfi_endproc
 6045              	.LFE133:
 6047              		.section	.text.bno055_reset,"ax",%progbits
 6048              		.align	1
 6049              		.p2align 2,,3
 6050              		.global	bno055_reset
ARM GAS  /tmp/cc9CDFEk.s 			page 155


 6051              		.syntax unified
 6052              		.thumb
 6053              		.thumb_func
 6054              		.fpu fpv4-sp-d16
 6056              	bno055_reset:
 6057              	.LVL624:
 6058              	.LFB167:
1204:Src/bno055/bno055.c ****     u8 data = 0x20U;
 6059              		.loc 1 1204 39 is_stmt 1 view -0
 6060              		.cfi_startproc
 6061              		@ args = 0, pretend = 0, frame = 8
 6062              		@ frame_needed = 0, uses_anonymous_args = 0
1205:Src/bno055/bno055.c ****     if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 6063              		.loc 1 1205 5 view .LVU1678
1204:Src/bno055/bno055.c ****     u8 data = 0x20U;
 6064              		.loc 1 1204 39 is_stmt 0 view .LVU1679
 6065 0000 00B5     		push	{lr}
 6066              	.LCFI173:
 6067              		.cfi_def_cfa_offset 4
 6068              		.cfi_offset 14, -4
 6069              	.LBB482:
 6070              	.LBB483:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 6071              		.loc 1 1241 11 view .LVU1680
 6072 0002 0123     		movs	r3, #1
 6073              	.LBE483:
 6074              	.LBE482:
1204:Src/bno055/bno055.c ****     u8 data = 0x20U;
 6075              		.loc 1 1204 39 view .LVU1681
 6076 0004 87B0     		sub	sp, sp, #28
 6077              	.LCFI174:
 6078              		.cfi_def_cfa_offset 32
 6079              	.LBB487:
 6080              	.LBB484:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 6081              		.loc 1 1241 11 view .LVU1682
 6082 0006 4FF0FF31 		mov	r1, #-1
 6083 000a CDE90131 		strd	r3, r1, [sp, #4]
 6084 000e 0DF11702 		add	r2, sp, #23
 6085 0012 0092     		str	r2, [sp]
 6086 0014 8179     		ldrb	r1, [r0, #6]	@ zero_extendqisi2
 6087 0016 0068     		ldr	r0, [r0]
 6088              	.LVL625:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 6089              		.loc 1 1241 11 view .LVU1683
 6090              	.LBE484:
 6091              	.LBE487:
1205:Src/bno055/bno055.c ****     if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 6092              		.loc 1 1205 8 view .LVU1684
 6093 0018 4FF0200C 		mov	ip, #32
 6094              	.LBB488:
 6095              	.LBB485:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 6096              		.loc 1 1241 11 view .LVU1685
 6097 001c 3F22     		movs	r2, #63
 6098              	.LBE485:
 6099              	.LBE488:
ARM GAS  /tmp/cc9CDFEk.s 			page 156


1205:Src/bno055/bno055.c ****     if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 6100              		.loc 1 1205 8 view .LVU1686
 6101 001e 8DF817C0 		strb	ip, [sp, #23]
1206:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 6102              		.loc 1 1206 5 is_stmt 1 view .LVU1687
 6103              	.LVL626:
 6104              	.LBB489:
 6105              	.LBI482:
1238:Src/bno055/bno055.c ****                             uint32_t buf_size) {
 6106              		.loc 1 1238 11 view .LVU1688
 6107              	.LBB486:
1240:Src/bno055/bno055.c ****     err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
 6108              		.loc 1 1240 5 view .LVU1689
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 6109              		.loc 1 1241 5 view .LVU1690
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 6110              		.loc 1 1241 11 is_stmt 0 view .LVU1691
 6111 0022 FFF7FEFF 		bl	HAL_I2C_Mem_Write
 6112              	.LVL627:
1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 6113              		.loc 1 1243 5 is_stmt 1 view .LVU1692
1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 6114              		.loc 1 1243 5 is_stmt 0 view .LVU1693
 6115              	.LBE486:
 6116              	.LBE489:
1210:Src/bno055/bno055.c **** 
 6117              		.loc 1 1210 1 view .LVU1694
 6118 0026 0038     		subs	r0, r0, #0
 6119 0028 18BF     		it	ne
 6120 002a 0120     		movne	r0, #1
 6121 002c 07B0     		add	sp, sp, #28
 6122              	.LCFI175:
 6123              		.cfi_def_cfa_offset 4
 6124              		@ sp needed
 6125 002e 5DF804FB 		ldr	pc, [sp], #4
 6126              		.cfi_endproc
 6127              	.LFE167:
 6129 0032 00BF     		.section	.text.bno055_on,"ax",%progbits
 6130              		.align	1
 6131              		.p2align 2,,3
 6132              		.global	bno055_on
 6133              		.syntax unified
 6134              		.thumb
 6135              		.thumb_func
 6136              		.fpu fpv4-sp-d16
 6138              	bno055_on:
 6139              	.LVL628:
 6140              	.LFB168:
1212:Src/bno055/bno055.c ****     u8 data = 0x00U;
 6141              		.loc 1 1212 36 is_stmt 1 view -0
 6142              		.cfi_startproc
 6143              		@ args = 0, pretend = 0, frame = 8
 6144              		@ frame_needed = 0, uses_anonymous_args = 0
1213:Src/bno055/bno055.c ****     if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 6145              		.loc 1 1213 5 view .LVU1696
1212:Src/bno055/bno055.c ****     u8 data = 0x00U;
 6146              		.loc 1 1212 36 is_stmt 0 view .LVU1697
ARM GAS  /tmp/cc9CDFEk.s 			page 157


 6147 0000 00B5     		push	{lr}
 6148              	.LCFI176:
 6149              		.cfi_def_cfa_offset 4
 6150              		.cfi_offset 14, -4
 6151              	.LBB490:
 6152              	.LBB491:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 6153              		.loc 1 1241 11 view .LVU1698
 6154 0002 0123     		movs	r3, #1
 6155              	.LBE491:
 6156              	.LBE490:
1212:Src/bno055/bno055.c ****     u8 data = 0x00U;
 6157              		.loc 1 1212 36 view .LVU1699
 6158 0004 87B0     		sub	sp, sp, #28
 6159              	.LCFI177:
 6160              		.cfi_def_cfa_offset 32
 6161              	.LBB495:
 6162              	.LBB492:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 6163              		.loc 1 1241 11 view .LVU1700
 6164 0006 4FF0FF31 		mov	r1, #-1
 6165 000a CDE90131 		strd	r3, r1, [sp, #4]
 6166 000e 0DF11702 		add	r2, sp, #23
 6167 0012 0092     		str	r2, [sp]
 6168 0014 8179     		ldrb	r1, [r0, #6]	@ zero_extendqisi2
 6169 0016 0068     		ldr	r0, [r0]
 6170              	.LVL629:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 6171              		.loc 1 1241 11 view .LVU1701
 6172              	.LBE492:
 6173              	.LBE495:
1213:Src/bno055/bno055.c ****     if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 6174              		.loc 1 1213 8 view .LVU1702
 6175 0018 4FF0000C 		mov	ip, #0
 6176              	.LBB496:
 6177              	.LBB493:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 6178              		.loc 1 1241 11 view .LVU1703
 6179 001c 3F22     		movs	r2, #63
 6180              	.LBE493:
 6181              	.LBE496:
1213:Src/bno055/bno055.c ****     if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 6182              		.loc 1 1213 8 view .LVU1704
 6183 001e 8DF817C0 		strb	ip, [sp, #23]
1214:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 6184              		.loc 1 1214 5 is_stmt 1 view .LVU1705
 6185              	.LVL630:
 6186              	.LBB497:
 6187              	.LBI490:
1238:Src/bno055/bno055.c ****                             uint32_t buf_size) {
 6188              		.loc 1 1238 11 view .LVU1706
 6189              	.LBB494:
1240:Src/bno055/bno055.c ****     err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
 6190              		.loc 1 1240 5 view .LVU1707
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 6191              		.loc 1 1241 5 view .LVU1708
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
ARM GAS  /tmp/cc9CDFEk.s 			page 158


 6192              		.loc 1 1241 11 is_stmt 0 view .LVU1709
 6193 0022 FFF7FEFF 		bl	HAL_I2C_Mem_Write
 6194              	.LVL631:
1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 6195              		.loc 1 1243 5 is_stmt 1 view .LVU1710
1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 6196              		.loc 1 1243 5 is_stmt 0 view .LVU1711
 6197              	.LBE494:
 6198              	.LBE497:
1218:Src/bno055/bno055.c **** 
 6199              		.loc 1 1218 1 view .LVU1712
 6200 0026 0038     		subs	r0, r0, #0
 6201 0028 18BF     		it	ne
 6202 002a 0120     		movne	r0, #1
 6203 002c 07B0     		add	sp, sp, #28
 6204              	.LCFI178:
 6205              		.cfi_def_cfa_offset 4
 6206              		@ sp needed
 6207 002e 5DF804FB 		ldr	pc, [sp], #4
 6208              		.cfi_endproc
 6209              	.LFE168:
 6211 0032 00BF     		.section	.text.bno055_read_regs,"ax",%progbits
 6212              		.align	1
 6213              		.p2align 2,,3
 6214              		.global	bno055_read_regs
 6215              		.syntax unified
 6216              		.thumb
 6217              		.thumb_func
 6218              		.fpu fpv4-sp-d16
 6220              	bno055_read_regs:
 6221              	.LVL632:
 6222              	.LFB169:
1221:Src/bno055/bno055.c ****     HAL_StatusTypeDef err;
 6223              		.loc 1 1221 47 is_stmt 1 view -0
 6224              		.cfi_startproc
 6225              		@ args = 172, pretend = 16, frame = 8
 6226              		@ frame_needed = 0, uses_anonymous_args = 0
1221:Src/bno055/bno055.c ****     HAL_StatusTypeDef err;
 6227              		.loc 1 1221 47 is_stmt 0 view .LVU1714
 6228 0000 84B0     		sub	sp, sp, #16
 6229              	.LCFI179:
 6230              		.cfi_def_cfa_offset 16
 6231 0002 30B5     		push	{r4, r5, lr}
 6232              	.LCFI180:
 6233              		.cfi_def_cfa_offset 28
 6234              		.cfi_offset 4, -28
 6235              		.cfi_offset 5, -24
 6236              		.cfi_offset 14, -20
 6237 0004 85B0     		sub	sp, sp, #20
 6238              	.LCFI181:
 6239              		.cfi_def_cfa_offset 48
1221:Src/bno055/bno055.c ****     HAL_StatusTypeDef err;
 6240              		.loc 1 1221 47 view .LVU1715
 6241 0006 08AC     		add	r4, sp, #32
 6242 0008 84E80F00 		stm	r4, {r0, r1, r2, r3}
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 6243              		.loc 1 1226 11 view .LVU1716
ARM GAS  /tmp/cc9CDFEk.s 			page 159


 6244 000c 4FF0FF35 		mov	r5, #-1
 6245 0010 9DF82610 		ldrb	r1, [sp, #38]	@ zero_extendqisi2
 6246 0014 0095     		str	r5, [sp]
 6247 0016 0123     		movs	r3, #1
 6248 0018 30AA     		add	r2, sp, #192
 6249 001a 0446     		mov	r4, r0
 6250              	.LVL633:
1222:Src/bno055/bno055.c ****     // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
 6251              		.loc 1 1222 5 is_stmt 1 view .LVU1717
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 6252              		.loc 1 1226 5 view .LVU1718
1226:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 6253              		.loc 1 1226 11 is_stmt 0 view .LVU1719
 6254 001c 0391     		str	r1, [sp, #12]
 6255 001e FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 6256              	.LVL634:
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 6257              		.loc 1 1227 5 is_stmt 1 view .LVU1720
1227:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 6258              		.loc 1 1227 8 is_stmt 0 view .LVU1721
 6259 0022 28B1     		cbz	r0, .L288
1228:Src/bno055/bno055.c ****     }
 6260              		.loc 1 1228 16 view .LVU1722
 6261 0024 0120     		movs	r0, #1
 6262              	.LVL635:
1236:Src/bno055/bno055.c **** 
 6263              		.loc 1 1236 1 view .LVU1723
 6264 0026 05B0     		add	sp, sp, #20
 6265              	.LCFI182:
 6266              		.cfi_remember_state
 6267              		.cfi_def_cfa_offset 28
 6268              		@ sp needed
 6269 0028 BDE83040 		pop	{r4, r5, lr}
 6270              	.LCFI183:
 6271              		.cfi_restore 14
 6272              		.cfi_restore 5
 6273              		.cfi_restore 4
 6274              		.cfi_def_cfa_offset 16
 6275              	.LVL636:
1236:Src/bno055/bno055.c **** 
 6276              		.loc 1 1236 1 view .LVU1724
 6277 002c 04B0     		add	sp, sp, #16
 6278              	.LCFI184:
 6279              		.cfi_def_cfa_offset 0
 6280 002e 7047     		bx	lr
 6281              	.LVL637:
 6282              	.L288:
 6283              	.LCFI185:
 6284              		.cfi_restore_state
1230:Src/bno055/bno055.c ****         HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 6285              		.loc 1 1230 5 is_stmt 1 view .LVU1725
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 6286              		.loc 1 1231 9 is_stmt 0 view .LVU1726
 6287 0030 329B     		ldr	r3, [sp, #200]
 6288 0032 319A     		ldr	r2, [sp, #196]
 6289 0034 0399     		ldr	r1, [sp, #12]
 6290 0036 0095     		str	r5, [sp]
ARM GAS  /tmp/cc9CDFEk.s 			page 160


 6291 0038 9BB2     		uxth	r3, r3
 6292 003a 2046     		mov	r0, r4
 6293              	.LVL638:
1231:Src/bno055/bno055.c ****     if (err != HAL_OK) {
 6294              		.loc 1 1231 9 view .LVU1727
 6295 003c FFF7FEFF 		bl	HAL_I2C_Master_Receive
 6296              	.LVL639:
1232:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 6297              		.loc 1 1232 5 is_stmt 1 view .LVU1728
1228:Src/bno055/bno055.c ****     }
 6298              		.loc 1 1228 16 is_stmt 0 view .LVU1729
 6299 0040 0038     		subs	r0, r0, #0
 6300              	.LVL640:
1228:Src/bno055/bno055.c ****     }
 6301              		.loc 1 1228 16 view .LVU1730
 6302 0042 18BF     		it	ne
 6303 0044 0120     		movne	r0, #1
1236:Src/bno055/bno055.c **** 
 6304              		.loc 1 1236 1 view .LVU1731
 6305 0046 05B0     		add	sp, sp, #20
 6306              	.LCFI186:
 6307              		.cfi_def_cfa_offset 28
 6308              		@ sp needed
 6309 0048 BDE83040 		pop	{r4, r5, lr}
 6310              	.LCFI187:
 6311              		.cfi_restore 14
 6312              		.cfi_restore 5
 6313              		.cfi_restore 4
 6314              		.cfi_def_cfa_offset 16
 6315              	.LVL641:
1236:Src/bno055/bno055.c **** 
 6316              		.loc 1 1236 1 view .LVU1732
 6317 004c 04B0     		add	sp, sp, #16
 6318              	.LCFI188:
 6319              		.cfi_def_cfa_offset 0
 6320 004e 7047     		bx	lr
 6321              		.cfi_endproc
 6322              	.LFE169:
 6324              		.section	.text.bno055_write_regs,"ax",%progbits
 6325              		.align	1
 6326              		.p2align 2,,3
 6327              		.global	bno055_write_regs
 6328              		.syntax unified
 6329              		.thumb
 6330              		.thumb_func
 6331              		.fpu fpv4-sp-d16
 6333              	bno055_write_regs:
 6334              	.LVL642:
 6335              	.LFB170:
1239:Src/bno055/bno055.c ****     HAL_StatusTypeDef err;
 6336              		.loc 1 1239 48 is_stmt 1 view -0
 6337              		.cfi_startproc
 6338              		@ args = 172, pretend = 16, frame = 0
 6339              		@ frame_needed = 0, uses_anonymous_args = 0
1240:Src/bno055/bno055.c ****     err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
 6340              		.loc 1 1240 5 view .LVU1734
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
ARM GAS  /tmp/cc9CDFEk.s 			page 161


 6341              		.loc 1 1241 5 view .LVU1735
1239:Src/bno055/bno055.c ****     HAL_StatusTypeDef err;
 6342              		.loc 1 1239 48 is_stmt 0 view .LVU1736
 6343 0000 84B0     		sub	sp, sp, #16
 6344              	.LCFI189:
 6345              		.cfi_def_cfa_offset 16
 6346 0002 10B5     		push	{r4, lr}
 6347              	.LCFI190:
 6348              		.cfi_def_cfa_offset 24
 6349              		.cfi_offset 4, -24
 6350              		.cfi_offset 14, -20
 6351 0004 84B0     		sub	sp, sp, #16
 6352              	.LCFI191:
 6353              		.cfi_def_cfa_offset 40
1239:Src/bno055/bno055.c ****     HAL_StatusTypeDef err;
 6354              		.loc 1 1239 48 view .LVU1737
 6355 0006 06AC     		add	r4, sp, #24
 6356 0008 84E80F00 		stm	r4, {r0, r1, r2, r3}
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 6357              		.loc 1 1241 11 view .LVU1738
 6358 000c BDF8C030 		ldrh	r3, [sp, #192]
1239:Src/bno055/bno055.c ****     HAL_StatusTypeDef err;
 6359              		.loc 1 1239 48 view .LVU1739
 6360 0010 2F99     		ldr	r1, [sp, #188]
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 6361              		.loc 1 1241 11 view .LVU1740
 6362 0012 0091     		str	r1, [sp]
 6363 0014 4FF0FF34 		mov	r4, #-1
 6364 0018 CDE90134 		strd	r3, r4, [sp, #4]
 6365 001c BDF8B820 		ldrh	r2, [sp, #184]
 6366 0020 9DF81E10 		ldrb	r1, [sp, #30]	@ zero_extendqisi2
 6367 0024 FFF7FEFF 		bl	HAL_I2C_Mem_Write
 6368              	.LVL643:
1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 6369              		.loc 1 1243 5 is_stmt 1 view .LVU1741
1247:Src/bno055/bno055.c **** 
 6370              		.loc 1 1247 1 is_stmt 0 view .LVU1742
 6371 0028 0038     		subs	r0, r0, #0
 6372              	.LVL644:
1247:Src/bno055/bno055.c **** 
 6373              		.loc 1 1247 1 view .LVU1743
 6374 002a 18BF     		it	ne
 6375 002c 0120     		movne	r0, #1
 6376 002e 04B0     		add	sp, sp, #16
 6377              	.LCFI192:
 6378              		.cfi_def_cfa_offset 24
 6379              		@ sp needed
 6380 0030 BDE81040 		pop	{r4, lr}
 6381              	.LCFI193:
 6382              		.cfi_restore 14
 6383              		.cfi_restore 4
 6384              		.cfi_def_cfa_offset 16
 6385 0034 04B0     		add	sp, sp, #16
 6386              	.LCFI194:
 6387              		.cfi_def_cfa_offset 0
 6388 0036 7047     		bx	lr
 6389              		.cfi_endproc
ARM GAS  /tmp/cc9CDFEk.s 			page 162


 6390              	.LFE170:
 6392              		.section	.text.bno055_set_page,"ax",%progbits
 6393              		.align	1
 6394              		.p2align 2,,3
 6395              		.global	bno055_set_page
 6396              		.syntax unified
 6397              		.thumb
 6398              		.thumb_func
 6399              		.fpu fpv4-sp-d16
 6401              	bno055_set_page:
 6402              	.LVL645:
 6403              	.LFB171:
1249:Src/bno055/bno055.c ****     if (imu->_page != page) {
 6404              		.loc 1 1249 68 is_stmt 1 view -0
 6405              		.cfi_startproc
 6406              		@ args = 0, pretend = 0, frame = 8
 6407              		@ frame_needed = 0, uses_anonymous_args = 0
1250:Src/bno055/bno055.c ****         return BNO_OK;
 6408              		.loc 1 1250 5 view .LVU1745
1249:Src/bno055/bno055.c ****     if (imu->_page != page) {
 6409              		.loc 1 1249 68 is_stmt 0 view .LVU1746
 6410 0000 70B5     		push	{r4, r5, r6, lr}
 6411              	.LCFI195:
 6412              		.cfi_def_cfa_offset 16
 6413              		.cfi_offset 4, -16
 6414              		.cfi_offset 5, -12
 6415              		.cfi_offset 6, -8
 6416              		.cfi_offset 14, -4
1250:Src/bno055/bno055.c ****         return BNO_OK;
 6417              		.loc 1 1250 8 view .LVU1747
 6418 0002 437B     		ldrb	r3, [r0, #13]	@ zero_extendqisi2
1249:Src/bno055/bno055.c ****     if (imu->_page != page) {
 6419              		.loc 1 1249 68 view .LVU1748
 6420 0004 86B0     		sub	sp, sp, #24
 6421              	.LCFI196:
 6422              		.cfi_def_cfa_offset 40
1250:Src/bno055/bno055.c ****         return BNO_OK;
 6423              		.loc 1 1250 8 view .LVU1749
 6424 0006 8B42     		cmp	r3, r1
1249:Src/bno055/bno055.c ****     if (imu->_page != page) {
 6425              		.loc 1 1249 68 view .LVU1750
 6426 0008 8DF81710 		strb	r1, [sp, #23]
1250:Src/bno055/bno055.c ****         return BNO_OK;
 6427              		.loc 1 1250 8 view .LVU1751
 6428 000c 1BD1     		bne	.L293
1253:Src/bno055/bno055.c ****         return BNO_ERR_PAGE_TOO_HIGH;
 6429              		.loc 1 1253 5 is_stmt 1 view .LVU1752
1253:Src/bno055/bno055.c ****         return BNO_ERR_PAGE_TOO_HIGH;
 6430              		.loc 1 1253 8 is_stmt 0 view .LVU1753
 6431 000e 012B     		cmp	r3, #1
 6432 0010 1DD8     		bhi	.L294
1256:Src/bno055/bno055.c ****     err = bno055_write_regs(*imu, BNO_PAGE_ID, (u8*)&page, 1);
 6433              		.loc 1 1256 5 is_stmt 1 view .LVU1754
1257:Src/bno055/bno055.c ****     if (err != BNO_OK) {
 6434              		.loc 1 1257 5 view .LVU1755
 6435              	.LVL646:
 6436              	.LBB498:
ARM GAS  /tmp/cc9CDFEk.s 			page 163


 6437              	.LBI498:
1238:Src/bno055/bno055.c ****                             uint32_t buf_size) {
 6438              		.loc 1 1238 11 view .LVU1756
 6439              	.LBB499:
1240:Src/bno055/bno055.c ****     err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
 6440              		.loc 1 1240 5 view .LVU1757
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 6441              		.loc 1 1241 5 view .LVU1758
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 6442              		.loc 1 1241 11 is_stmt 0 view .LVU1759
 6443 0012 0126     		movs	r6, #1
 6444 0014 4FF0FF32 		mov	r2, #-1
 6445 0018 CDE90162 		strd	r6, r2, [sp, #4]
 6446              	.LVL647:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 6447              		.loc 1 1241 11 view .LVU1760
 6448 001c 0DF11703 		add	r3, sp, #23
 6449              	.LVL648:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 6450              		.loc 1 1241 11 view .LVU1761
 6451 0020 0093     		str	r3, [sp]
 6452 0022 8179     		ldrb	r1, [r0, #6]	@ zero_extendqisi2
 6453              	.LVL649:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 6454              		.loc 1 1241 11 view .LVU1762
 6455 0024 0446     		mov	r4, r0
 6456 0026 3346     		mov	r3, r6
 6457              	.LVL650:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 6458              		.loc 1 1241 11 view .LVU1763
 6459 0028 0068     		ldr	r0, [r0]
 6460              	.LVL651:
1241:Src/bno055/bno055.c ****                             HAL_MAX_DELAY);
 6461              		.loc 1 1241 11 view .LVU1764
 6462 002a 0722     		movs	r2, #7
 6463 002c FFF7FEFF 		bl	HAL_I2C_Mem_Write
 6464              	.LVL652:
1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 6465              		.loc 1 1243 5 is_stmt 1 view .LVU1765
1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 6466              		.loc 1 1243 8 is_stmt 0 view .LVU1766
 6467 0030 0546     		mov	r5, r0
 6468 0032 80B9     		cbnz	r0, .L295
 6469              	.LVL653:
1243:Src/bno055/bno055.c ****         return BNO_ERR_I2C;
 6470              		.loc 1 1243 8 view .LVU1767
 6471              	.LBE499:
 6472              	.LBE498:
1258:Src/bno055/bno055.c ****         return err;
 6473              		.loc 1 1258 5 is_stmt 1 view .LVU1768
1261:Src/bno055/bno055.c ****     HAL_Delay(2);
 6474              		.loc 1 1261 5 view .LVU1769
1261:Src/bno055/bno055.c ****     HAL_Delay(2);
 6475              		.loc 1 1261 16 is_stmt 0 view .LVU1770
 6476 0034 9DF81730 		ldrb	r3, [sp, #23]	@ zero_extendqisi2
 6477 0038 6373     		strb	r3, [r4, #13]
1262:Src/bno055/bno055.c ****     return BNO_OK;
ARM GAS  /tmp/cc9CDFEk.s 			page 164


 6478              		.loc 1 1262 5 is_stmt 1 view .LVU1771
 6479 003a 0220     		movs	r0, #2
 6480 003c FFF7FEFF 		bl	HAL_Delay
 6481              	.LVL654:
 6482              		.loc 1 1263 5 view .LVU1772
1264:Src/bno055/bno055.c **** }
 6483              		.loc 1 1264 1 is_stmt 0 view .LVU1773
 6484 0040 2846     		mov	r0, r5
 6485 0042 06B0     		add	sp, sp, #24
 6486              	.LCFI197:
 6487              		.cfi_remember_state
 6488              		.cfi_def_cfa_offset 16
 6489              		@ sp needed
 6490 0044 70BD     		pop	{r4, r5, r6, pc}
 6491              	.LVL655:
 6492              	.L293:
 6493              	.LCFI198:
 6494              		.cfi_restore_state
1251:Src/bno055/bno055.c ****     }
 6495              		.loc 1 1251 16 view .LVU1774
 6496 0046 0025     		movs	r5, #0
 6497              	.LVL656:
 6498              	.L292:
 6499              		.loc 1 1264 1 view .LVU1775
 6500 0048 2846     		mov	r0, r5
 6501 004a 06B0     		add	sp, sp, #24
 6502              	.LCFI199:
 6503              		.cfi_remember_state
 6504              		.cfi_def_cfa_offset 16
 6505              		@ sp needed
 6506 004c 70BD     		pop	{r4, r5, r6, pc}
 6507              	.LVL657:
 6508              	.L294:
 6509              	.LCFI200:
 6510              		.cfi_restore_state
1254:Src/bno055/bno055.c ****     }
 6511              		.loc 1 1254 16 view .LVU1776
 6512 004e 0225     		movs	r5, #2
 6513              		.loc 1 1264 1 view .LVU1777
 6514 0050 2846     		mov	r0, r5
 6515              	.LVL658:
 6516              		.loc 1 1264 1 view .LVU1778
 6517 0052 06B0     		add	sp, sp, #24
 6518              	.LCFI201:
 6519              		.cfi_remember_state
 6520              		.cfi_def_cfa_offset 16
 6521              		@ sp needed
 6522 0054 70BD     		pop	{r4, r5, r6, pc}
 6523              	.LVL659:
 6524              	.L295:
 6525              	.LCFI202:
 6526              		.cfi_restore_state
 6527              	.LBB501:
 6528              	.LBB500:
1244:Src/bno055/bno055.c ****     }
 6529              		.loc 1 1244 16 view .LVU1779
 6530 0056 3546     		mov	r5, r6
ARM GAS  /tmp/cc9CDFEk.s 			page 165


 6531 0058 F6E7     		b	.L292
 6532              	.LBE500:
 6533              	.LBE501:
 6534              		.cfi_endproc
 6535              	.LFE171:
 6537 005a 00BF     		.section	.text.bno055_err_str,"ax",%progbits
 6538              		.align	1
 6539              		.p2align 2,,3
 6540              		.global	bno055_err_str
 6541              		.syntax unified
 6542              		.thumb
 6543              		.thumb_func
 6544              		.fpu fpv4-sp-d16
 6546              	bno055_err_str:
 6547              	.LVL660:
 6548              	.LFB172:
1265:Src/bno055/bno055.c **** 
1266:Src/bno055/bno055.c **** char* bno055_err_str(const error_bno err) {
 6549              		.loc 1 1266 43 is_stmt 1 view -0
 6550              		.cfi_startproc
 6551              		@ args = 0, pretend = 0, frame = 0
 6552              		@ frame_needed = 0, uses_anonymous_args = 0
 6553              		@ link register save eliminated.
1267:Src/bno055/bno055.c ****     switch (err) {
 6554              		.loc 1 1267 5 view .LVU1781
 6555 0000 0628     		cmp	r0, #6
 6556 0002 03D8     		bhi	.L298
1268:Src/bno055/bno055.c ****         case BNO_OK:
1269:Src/bno055/bno055.c ****             return "[BNO] Ok!";
1270:Src/bno055/bno055.c ****         case BNO_ERR_I2C:
1271:Src/bno055/bno055.c ****             return "[BNO] I2C error!";
1272:Src/bno055/bno055.c ****         case BNO_ERR_PAGE_TOO_HIGH:
1273:Src/bno055/bno055.c ****             return "[BNO] Page setting to high.";
1274:Src/bno055/bno055.c ****         case BNO_ERR_NULL_PTR:
1275:Src/bno055/bno055.c ****             return "[BNO] BNO struct is nullpointer.";
1276:Src/bno055/bno055.c ****         case BNO_ERR_AXIS_REMAP:
1277:Src/bno055/bno055.c ****             return "[BNO] Axis remap error!";
1278:Src/bno055/bno055.c ****         case BNO_ERR_SETTING_PAGE:
1279:Src/bno055/bno055.c ****             return "[BNO] TODO";
1280:Src/bno055/bno055.c ****         case BNO_ERR_WRONG_CHIP_ID:
1281:Src/bno055/bno055.c ****             return "[BNO] Wrong Chip ID.";
1282:Src/bno055/bno055.c ****     }
1283:Src/bno055/bno055.c **** }
 6557              		.loc 1 1283 1 is_stmt 0 view .LVU1782
 6558 0004 024B     		ldr	r3, .L299
 6559 0006 53F82000 		ldr	r0, [r3, r0, lsl #2]
 6560              	.LVL661:
 6561              		.loc 1 1283 1 view .LVU1783
 6562 000a 7047     		bx	lr
 6563              	.LVL662:
 6564              	.L298:
 6565              	.LVL663:
 6566              		.loc 1 1283 1 view .LVU1784
 6567 000c 7047     		bx	lr
 6568              	.L300:
 6569 000e 00BF     		.align	2
 6570              	.L299:
ARM GAS  /tmp/cc9CDFEk.s 			page 166


 6571 0010 00000000 		.word	.LANCHOR0
 6572              		.cfi_endproc
 6573              	.LFE172:
 6575              		.section	.rodata.str1.4,"aMS",%progbits,1
 6576              		.align	2
 6577              	.LC0:
 6578 0000 5B424E4F 		.ascii	"[BNO] Ok!\000"
 6578      5D204F6B 
 6578      2100
 6579 000a 0000     		.align	2
 6580              	.LC1:
 6581 000c 5B424E4F 		.ascii	"[BNO] I2C error!\000"
 6581      5D204932 
 6581      43206572 
 6581      726F7221 
 6581      00
 6582 001d 000000   		.align	2
 6583              	.LC2:
 6584 0020 5B424E4F 		.ascii	"[BNO] Page setting to high.\000"
 6584      5D205061 
 6584      67652073 
 6584      65747469 
 6584      6E672074 
 6585              		.align	2
 6586              	.LC3:
 6587 003c 5B424E4F 		.ascii	"[BNO] TODO\000"
 6587      5D20544F 
 6587      444F00
 6588 0047 00       		.align	2
 6589              	.LC4:
 6590 0048 5B424E4F 		.ascii	"[BNO] BNO struct is nullpointer.\000"
 6590      5D20424E 
 6590      4F207374 
 6590      72756374 
 6590      20697320 
 6591 0069 000000   		.align	2
 6592              	.LC5:
 6593 006c 5B424E4F 		.ascii	"[BNO] Axis remap error!\000"
 6593      5D204178 
 6593      69732072 
 6593      656D6170 
 6593      20657272 
 6594              		.align	2
 6595              	.LC6:
 6596 0084 5B424E4F 		.ascii	"[BNO] Wrong Chip ID.\000"
 6596      5D205772 
 6596      6F6E6720 
 6596      43686970 
 6596      2049442E 
 6597              		.section	.rodata.CSWTCH.82,"a"
 6598              		.align	2
 6599              		.set	.LANCHOR0,. + 0
 6602              	CSWTCH.82:
 6603 0000 00000000 		.word	.LC0
 6604 0004 0C000000 		.word	.LC1
 6605 0008 20000000 		.word	.LC2
 6606 000c 3C000000 		.word	.LC3
ARM GAS  /tmp/cc9CDFEk.s 			page 167


 6607 0010 48000000 		.word	.LC4
 6608 0014 6C000000 		.word	.LC5
 6609 0018 84000000 		.word	.LC6
 6610              		.text
 6611              	.Letext0:
 6612              		.file 2 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 6613              		.file 3 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f411xe.h"
 6614              		.file 4 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 6615              		.file 5 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 6616              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 6617              		.file 7 "Src/bno055/bno055.h"
 6618              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
ARM GAS  /tmp/cc9CDFEk.s 			page 168


DEFINED SYMBOLS
                            *ABS*:0000000000000000 bno055.c
     /tmp/cc9CDFEk.s:18     .text.bno055_quaternion_w:0000000000000000 $t
     /tmp/cc9CDFEk.s:27     .text.bno055_quaternion_w:0000000000000000 bno055_quaternion_w
     /tmp/cc9CDFEk.s:156    .text.bno055_quaternion_x:0000000000000000 $t
     /tmp/cc9CDFEk.s:164    .text.bno055_quaternion_x:0000000000000000 bno055_quaternion_x
     /tmp/cc9CDFEk.s:292    .text.bno055_mag_x:0000000000000000 $t
     /tmp/cc9CDFEk.s:300    .text.bno055_mag_x:0000000000000000 bno055_mag_x
     /tmp/cc9CDFEk.s:428    .text.bno055_mag_y:0000000000000000 $t
     /tmp/cc9CDFEk.s:436    .text.bno055_mag_y:0000000000000000 bno055_mag_y
     /tmp/cc9CDFEk.s:564    .text.bno055_mag_z:0000000000000000 $t
     /tmp/cc9CDFEk.s:572    .text.bno055_mag_z:0000000000000000 bno055_mag_z
     /tmp/cc9CDFEk.s:700    .text.bno055_quaternion_y:0000000000000000 $t
     /tmp/cc9CDFEk.s:708    .text.bno055_quaternion_y:0000000000000000 bno055_quaternion_y
     /tmp/cc9CDFEk.s:836    .text.bno055_quaternion_z:0000000000000000 $t
     /tmp/cc9CDFEk.s:844    .text.bno055_quaternion_z:0000000000000000 bno055_quaternion_z
     /tmp/cc9CDFEk.s:972    .text.bno055_temperature:0000000000000000 $t
     /tmp/cc9CDFEk.s:980    .text.bno055_temperature:0000000000000000 bno055_temperature
     /tmp/cc9CDFEk.s:1122   .text.bno055_acc_x:0000000000000000 $t
     /tmp/cc9CDFEk.s:1130   .text.bno055_acc_x:0000000000000000 bno055_acc_x
     /tmp/cc9CDFEk.s:1265   .text.bno055_acc_x:0000000000000060 $d
     /tmp/cc9CDFEk.s:1270   .text.bno055_acc_y:0000000000000000 $t
     /tmp/cc9CDFEk.s:1278   .text.bno055_acc_y:0000000000000000 bno055_acc_y
     /tmp/cc9CDFEk.s:1413   .text.bno055_acc_y:0000000000000060 $d
     /tmp/cc9CDFEk.s:1418   .text.bno055_acc_z:0000000000000000 $t
     /tmp/cc9CDFEk.s:1426   .text.bno055_acc_z:0000000000000000 bno055_acc_z
     /tmp/cc9CDFEk.s:1561   .text.bno055_acc_z:0000000000000060 $d
     /tmp/cc9CDFEk.s:1566   .text.bno055_linear_acc_x:0000000000000000 $t
     /tmp/cc9CDFEk.s:1574   .text.bno055_linear_acc_x:0000000000000000 bno055_linear_acc_x
     /tmp/cc9CDFEk.s:1709   .text.bno055_linear_acc_x:0000000000000060 $d
     /tmp/cc9CDFEk.s:1714   .text.bno055_linear_acc_y:0000000000000000 $t
     /tmp/cc9CDFEk.s:1722   .text.bno055_linear_acc_y:0000000000000000 bno055_linear_acc_y
     /tmp/cc9CDFEk.s:1857   .text.bno055_linear_acc_y:0000000000000060 $d
     /tmp/cc9CDFEk.s:1862   .text.bno055_gravity_x:0000000000000000 $t
     /tmp/cc9CDFEk.s:1870   .text.bno055_gravity_x:0000000000000000 bno055_gravity_x
     /tmp/cc9CDFEk.s:2011   .text.bno055_gravity_x:000000000000006c $d
     /tmp/cc9CDFEk.s:2016   .text.bno055_gravity_y:0000000000000000 $t
     /tmp/cc9CDFEk.s:2024   .text.bno055_gravity_y:0000000000000000 bno055_gravity_y
     /tmp/cc9CDFEk.s:2165   .text.bno055_gravity_y:000000000000006c $d
     /tmp/cc9CDFEk.s:2170   .text.bno055_gravity_z:0000000000000000 $t
     /tmp/cc9CDFEk.s:2178   .text.bno055_gravity_z:0000000000000000 bno055_gravity_z
     /tmp/cc9CDFEk.s:2319   .text.bno055_gravity_z:000000000000006c $d
     /tmp/cc9CDFEk.s:2324   .text.bno055_euler_yaw:0000000000000000 $t
     /tmp/cc9CDFEk.s:2332   .text.bno055_euler_yaw:0000000000000000 bno055_euler_yaw
     /tmp/cc9CDFEk.s:2473   .text.bno055_euler_yaw:000000000000006c $d
     /tmp/cc9CDFEk.s:2478   .text.bno055_euler_roll:0000000000000000 $t
     /tmp/cc9CDFEk.s:2486   .text.bno055_euler_roll:0000000000000000 bno055_euler_roll
     /tmp/cc9CDFEk.s:2627   .text.bno055_euler_roll:000000000000006c $d
     /tmp/cc9CDFEk.s:2632   .text.bno055_euler_pitch:0000000000000000 $t
     /tmp/cc9CDFEk.s:2640   .text.bno055_euler_pitch:0000000000000000 bno055_euler_pitch
     /tmp/cc9CDFEk.s:2781   .text.bno055_euler_pitch:000000000000006c $d
     /tmp/cc9CDFEk.s:2786   .text.bno055_gyro_z:0000000000000000 $t
     /tmp/cc9CDFEk.s:2794   .text.bno055_gyro_z:0000000000000000 bno055_gyro_z
     /tmp/cc9CDFEk.s:2933   .text.bno055_gyro_z:000000000000006c $d
     /tmp/cc9CDFEk.s:2938   .text.bno055_linear_acc_z:0000000000000000 $t
     /tmp/cc9CDFEk.s:2946   .text.bno055_linear_acc_z:0000000000000000 bno055_linear_acc_z
     /tmp/cc9CDFEk.s:3081   .text.bno055_linear_acc_z:0000000000000060 $d
ARM GAS  /tmp/cc9CDFEk.s 			page 169


     /tmp/cc9CDFEk.s:3086   .text.bno055_gyro_x:0000000000000000 $t
     /tmp/cc9CDFEk.s:3094   .text.bno055_gyro_x:0000000000000000 bno055_gyro_x
     /tmp/cc9CDFEk.s:3233   .text.bno055_gyro_x:000000000000006c $d
     /tmp/cc9CDFEk.s:3238   .text.bno055_gyro_y:0000000000000000 $t
     /tmp/cc9CDFEk.s:3246   .text.bno055_gyro_y:0000000000000000 bno055_gyro_y
     /tmp/cc9CDFEk.s:3385   .text.bno055_gyro_y:000000000000006c $d
     /tmp/cc9CDFEk.s:3390   .text.bno055_gravity:0000000000000000 $t
     /tmp/cc9CDFEk.s:3398   .text.bno055_gravity:0000000000000000 bno055_gravity
     /tmp/cc9CDFEk.s:3549   .text.bno055_gravity:0000000000000080 $d
     /tmp/cc9CDFEk.s:3554   .text.bno055_mag:0000000000000000 $t
     /tmp/cc9CDFEk.s:3562   .text.bno055_mag:0000000000000000 bno055_mag
     /tmp/cc9CDFEk.s:3714   .text.bno055_mag:0000000000000084 $d
     /tmp/cc9CDFEk.s:3719   .text.bno055_linear_acc:0000000000000000 $t
     /tmp/cc9CDFEk.s:3727   .text.bno055_linear_acc:0000000000000000 bno055_linear_acc
     /tmp/cc9CDFEk.s:3887   .text.bno055_linear_acc:0000000000000094 $d
     /tmp/cc9CDFEk.s:3892   .text.bno055_acc:0000000000000000 $t
     /tmp/cc9CDFEk.s:3900   .text.bno055_acc:0000000000000000 bno055_acc
     /tmp/cc9CDFEk.s:4060   .text.bno055_acc:0000000000000094 $d
     /tmp/cc9CDFEk.s:4065   .text.bno055_euler:0000000000000000 $t
     /tmp/cc9CDFEk.s:4073   .text.bno055_euler:0000000000000000 bno055_euler
     /tmp/cc9CDFEk.s:4233   .text.bno055_euler:0000000000000094 $d
     /tmp/cc9CDFEk.s:4238   .text.bno055_gyro:0000000000000000 $t
     /tmp/cc9CDFEk.s:4246   .text.bno055_gyro:0000000000000000 bno055_gyro
     /tmp/cc9CDFEk.s:4406   .text.bno055_gyro:0000000000000094 $d
     /tmp/cc9CDFEk.s:4411   .text.bno055_quaternion:0000000000000000 $t
     /tmp/cc9CDFEk.s:4419   .text.bno055_quaternion:0000000000000000 bno055_quaternion
     /tmp/cc9CDFEk.s:4581   .text.bno055_quaternion:0000000000000098 $d
     /tmp/cc9CDFEk.s:4586   .text.bno055_set_opmode:0000000000000000 $t
     /tmp/cc9CDFEk.s:4594   .text.bno055_set_opmode:0000000000000000 bno055_set_opmode
     /tmp/cc9CDFEk.s:4699   .text.bno055_set_unit:0000000000000000 $t
     /tmp/cc9CDFEk.s:4707   .text.bno055_set_unit:0000000000000000 bno055_set_unit
     /tmp/cc9CDFEk.s:5052   .text.bno055_set_pwr_mode:0000000000000000 $t
     /tmp/cc9CDFEk.s:5060   .text.bno055_set_pwr_mode:0000000000000000 bno055_set_pwr_mode
     /tmp/cc9CDFEk.s:5432   .text.bno055_init:0000000000000000 $t
     /tmp/cc9CDFEk.s:5440   .text.bno055_init:0000000000000000 bno055_init
     /tmp/cc9CDFEk.s:6012   .text.bno055_init:00000000000001d0 $d
     /tmp/cc9CDFEk.s:6048   .text.bno055_reset:0000000000000000 $t
     /tmp/cc9CDFEk.s:6056   .text.bno055_reset:0000000000000000 bno055_reset
     /tmp/cc9CDFEk.s:6130   .text.bno055_on:0000000000000000 $t
     /tmp/cc9CDFEk.s:6138   .text.bno055_on:0000000000000000 bno055_on
     /tmp/cc9CDFEk.s:6212   .text.bno055_read_regs:0000000000000000 $t
     /tmp/cc9CDFEk.s:6220   .text.bno055_read_regs:0000000000000000 bno055_read_regs
     /tmp/cc9CDFEk.s:6325   .text.bno055_write_regs:0000000000000000 $t
     /tmp/cc9CDFEk.s:6333   .text.bno055_write_regs:0000000000000000 bno055_write_regs
     /tmp/cc9CDFEk.s:6393   .text.bno055_set_page:0000000000000000 $t
     /tmp/cc9CDFEk.s:6401   .text.bno055_set_page:0000000000000000 bno055_set_page
     /tmp/cc9CDFEk.s:6538   .text.bno055_err_str:0000000000000000 $t
     /tmp/cc9CDFEk.s:6546   .text.bno055_err_str:0000000000000000 bno055_err_str
     /tmp/cc9CDFEk.s:6571   .text.bno055_err_str:0000000000000010 $d
     /tmp/cc9CDFEk.s:6576   .rodata.str1.4:0000000000000000 $d
     /tmp/cc9CDFEk.s:6598   .rodata.CSWTCH.82:0000000000000000 $d
     /tmp/cc9CDFEk.s:6602   .rodata.CSWTCH.82:0000000000000000 CSWTCH.82

UNDEFINED SYMBOLS
HAL_I2C_Master_Transmit
HAL_I2C_Master_Receive
HAL_I2C_Mem_Write
ARM GAS  /tmp/cc9CDFEk.s 			page 170


HAL_Delay
